struct __va_list_tag;
template<typename T>struct __xcodeml_identity { typedef T t; };
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long __int64_t;
typedef unsigned long __uint64_t;
typedef int __clock_t;
typedef long __critical_t;
typedef double __double_t;
typedef float __float_t;
typedef long __intfptr_t;
typedef long __intptr_t;
typedef long __intmax_t;
typedef int __int_fast8_t;
typedef int __int_fast16_t;
typedef int __int_fast32_t;
typedef long __int_fast64_t;
typedef signed char __int_least8_t;
typedef short __int_least16_t;
typedef int __int_least32_t;
typedef long __int_least64_t;
typedef long __ptrdiff_t;
typedef long __register_t;
typedef long __segsz_t;
typedef unsigned long __size_t;
typedef long __ssize_t;
typedef long __time_t;
typedef unsigned long __uintfptr_t;
typedef unsigned long __uintptr_t;
typedef unsigned long __uintmax_t;
typedef unsigned int __uint_fast8_t;
typedef unsigned int __uint_fast16_t;
typedef unsigned int __uint_fast32_t;
typedef unsigned long __uint_fast64_t;
typedef unsigned char __uint_least8_t;
typedef unsigned short __uint_least16_t;
typedef unsigned int __uint_least32_t;
typedef unsigned long __uint_least64_t;
typedef unsigned long __u_register_t;
typedef unsigned long __vm_offset_t;
typedef unsigned long __vm_paddr_t;
typedef unsigned long __vm_size_t;
typedef int ___wchar_t;
typedef int __blksize_t;
typedef long __blkcnt_t;
typedef int __clockid_t;
typedef unsigned int __fflags_t;
typedef unsigned long __fsblkcnt_t;
typedef unsigned long __fsfilcnt_t;
typedef unsigned int __gid_t;
typedef long __id_t;
typedef unsigned long __ino_t;
typedef long __key_t;
typedef int __lwpid_t;
typedef unsigned short __mode_t;
typedef int __accmode_t;
typedef int __nl_item;
typedef unsigned long __nlink_t;
typedef long __off_t;
typedef long __off64_t;
typedef int __pid_t;
typedef long __rlim_t;
typedef unsigned char __sa_family_t;
typedef unsigned int __socklen_t;
typedef long __suseconds_t;
class __timer;
typedef class::__timer(*__timer_t);
class __mq;
typedef class::__mq(*__mqd_t);
typedef unsigned int __uid_t;
typedef unsigned int __useconds_t;
typedef int __cpuwhich_t;
typedef int __cpulevel_t;
typedef int __cpusetid_t;
typedef long __daddr_t;
typedef int __ct_rune_t;
typedef int __rune_t;
typedef int __wint_t;
class __xcodeml_1{public:long long __max_align1/*gccattr aligned:(alignof(long long))*/;
public:long double __max_align2/*gccattr aligned:(alignof(long double))*/;
}
;
typedef class::__xcodeml_1 __max_align_t;
typedef unsigned long __dev_t;
typedef unsigned int __fixpt_t;
union __xcodeml_2{public:char __mbstate8[128];
public:long _mbstateL;
}
;
typedef union::__xcodeml_2 __mbstate_t;
typedef unsigned long __rman_res_t;
typedef class::__va_list_tag __va_list[1];
typedef class::__va_list_tag __gnuc_va_list[1];
unsigned short __bswap16_var(unsigned short _x){return((unsigned short)((_x<<8)|(_x>>8)));
}
unsigned int __bswap32_var(unsigned int _x){asm("bswap %0":"+r"(_x));
return _x;
}
unsigned long __bswap64_var(unsigned long _x){asm("bswap %0":"+r"(_x));
return _x;
}
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long uint64_t;
unsigned short be16dec(void const(*pp)){unsigned char const(*p)=((unsigned char const(*))pp);
return(((p)[0]<<8)|(p)[1]);
}
unsigned int be32dec(void const(*pp)){unsigned char const(*p)=((unsigned char const(*))pp);
return((((((unsigned int)(p)[0])<<24)|((p)[1]<<16))|((p)[2]<<8))|(p)[3]);
}
unsigned long be64dec(void const(*pp)){unsigned char const(*p)=((unsigned char const(*))pp);
return((((unsigned long)(be32dec(p)))<<32)|(be32dec((p+4))));
}
unsigned short le16dec(void const(*pp)){unsigned char const(*p)=((unsigned char const(*))pp);
return(((p)[1]<<8)|(p)[0]);
}
unsigned int le32dec(void const(*pp)){unsigned char const(*p)=((unsigned char const(*))pp);
return((((((unsigned int)(p)[3])<<24)|((p)[2]<<16))|((p)[1]<<8))|(p)[0]);
}
unsigned long le64dec(void const(*pp)){unsigned char const(*p)=((unsigned char const(*))pp);
return((((unsigned long)(le32dec((p+4))))<<32)|(le32dec(p)));
}
void be16enc(void(*pp),unsigned short u){unsigned char(*p)=((unsigned char(*))pp);
((p)[0]=((u>>8)&0xff));
((p)[1]=(u&0xff));
}
void be32enc(void(*pp),unsigned int u){unsigned char(*p)=((unsigned char(*))pp);
((p)[0]=((u>>24)&0xff));
((p)[1]=((u>>16)&0xff));
((p)[2]=((u>>8)&0xff));
((p)[3]=(u&0xff));
}
void be64enc(void(*pp),unsigned long u){unsigned char(*p)=((unsigned char(*))pp);
(be32enc(p,((unsigned int)(u>>32))));
(be32enc((p+4),((unsigned int)(u&0xffffffffU))));
}
void le16enc(void(*pp),unsigned short u){unsigned char(*p)=((unsigned char(*))pp);
((p)[0]=(u&0xff));
((p)[1]=((u>>8)&0xff));
}
void le32enc(void(*pp),unsigned int u){unsigned char(*p)=((unsigned char(*))pp);
((p)[0]=(u&0xff));
((p)[1]=((u>>8)&0xff));
((p)[2]=((u>>16)&0xff));
((p)[3]=((u>>24)&0xff));
}
void le64enc(void(*pp),unsigned long u){unsigned char(*p)=((unsigned char(*))pp);
(le32enc(p,((unsigned int)(u&0xffffffffU))));
(le32enc((p+4),((unsigned int)(u>>32))));
}
namespace std{namespace __1{}
}
extern"C"{unsigned long ___runetype(int)/*gccattr pure:*/;};
extern"C"{int ___tolower(int)/*gccattr pure:*/;};
extern"C"{int ___toupper(int)/*gccattr pure:*/;};

extern int __mb_sb_limit;
class __xcodeml_3{public:int __min;
public:int __max;
public:int __map;
public:unsigned long(*__types);
}
;
typedef class::__xcodeml_3 _RuneEntry;
class __xcodeml_4{public:int __nranges;
public:class::__xcodeml_3(*__ranges);
}
;
typedef class::__xcodeml_4 _RuneRange;
class __xcodeml_5{public:char __magic[8];
public:char __encoding[32];
public:int(*__sgetrune)(char const(*),unsigned long,char const(*(*)));
public:int(*__sputrune)(int,char(*),unsigned long,char(*(*)));
public:int __invalid_rune;
public:unsigned long __runetype[256];
public:int __maplower[256];
public:int __mapupper[256];
public:class::__xcodeml_4 __runetype_ext;
public:class::__xcodeml_4 __maplower_ext;
public:class::__xcodeml_4 __mapupper_ext;
public:void(*__variable);
public:int __variable_len;
}
;
typedef class::__xcodeml_5 _RuneLocale;
extern class __xcodeml_5 const _DefaultRuneLocale;
extern class __xcodeml_5 const(*_CurrentRuneLocale);
extern class __xcodeml_5 const(*_ThreadRuneLocale);
class __xcodeml_5 const(*__getCurrentRuneLocale()){if(_ThreadRuneLocale){return _ThreadRuneLocale;};
return _CurrentRuneLocale;
}

int __maskrune(int _c,unsigned long _f){return((((_c<0)||(_c>=(1<<8)))?(___runetype(_c)):((__getCurrentRuneLocale())->__runetype)[_c])&_f);
}
int __sbmaskrune(int _c,unsigned long _f){return(((_c<0)||(_c>=__mb_sb_limit))?0:(((__getCurrentRuneLocale())->__runetype)[_c]&_f));
}
int __istype(int _c,unsigned long _f){return(!(!(__maskrune(_c,_f))));
}
int __sbistype(int _c,unsigned long _f){return(!(!(__sbmaskrune(_c,_f))));
}
int __isctype(int _c,unsigned long _f){return(((_c<0)||(_c>=128))?0:(!(!((_DefaultRuneLocale.__runetype)[_c]&_f))));
}
int __toupper(int _c){return(((_c<0)||(_c>=(1<<8)))?(___toupper(_c)):((__getCurrentRuneLocale())->__mapupper)[_c]);
}
int __sbtoupper(int _c){return(((_c<0)||(_c>=__mb_sb_limit))?_c:((__getCurrentRuneLocale())->__mapupper)[_c]);
}
int __tolower(int _c){return(((_c<0)||(_c>=(1<<8)))?(___tolower(_c)):((__getCurrentRuneLocale())->__maplower)[_c]);
}
int __sbtolower(int _c){return(((_c<0)||(_c>=__mb_sb_limit))?_c:((__getCurrentRuneLocale())->__maplower)[_c]);
}
int __wcwidth(int _c){unsigned int _x;
if((_c==0)){return 0;};
(_x=((unsigned int)(__maskrune(_c,(0xe0000000L|0x00040000L)))));
if(((_x&0xe0000000L)!=0)){return((_x&0xe0000000L)>>30);};
return(((_x&0x00040000L)!=0)?1:(-1));
}
typedef union::__xcodeml_2 mbstate_t;
typedef unsigned long size_t;
typedef class::__va_list_tag va_list[1];
typedef int wint_t;
class __sFILE;
typedef class::__sFILE FILE;
class tm;
extern"C"{int btowc(int);};
extern"C"{int fgetwc(class::__sFILE(*));};
extern"C"{wchar_t(*fgetws(wchar_t(*),int,class::__sFILE(*)));};
extern"C"{int fputwc(wchar_t,class::__sFILE(*));};
extern"C"{int fputws(wchar_t const(*),class::__sFILE(*));};
extern"C"{int fwide(class::__sFILE(*),int);};
extern"C"{int fwprintf(class::__sFILE(*),wchar_t const(*),...);};
extern"C"{int fwscanf(class::__sFILE(*),wchar_t const(*),...);};
extern"C"{int getwc(class::__sFILE(*));};
extern"C"{int getwchar();};
extern"C"{unsigned long mbrlen(char const(*),unsigned long,union::__xcodeml_2(*));};
extern"C"{unsigned long mbrtowc(wchar_t(*),char const(*),unsigned long,union::__xcodeml_2(*));};
extern"C"{int mbsinit(union __xcodeml_2 const(*));};
extern"C"{unsigned long mbsrtowcs(wchar_t(*),char const(*(*)),unsigned long,union::__xcodeml_2(*));};
extern"C"{int putwc(wchar_t,class::__sFILE(*));};
extern"C"{int putwchar(wchar_t);};
extern"C"{int swprintf(wchar_t(*),unsigned long n,wchar_t const(*),...);};
extern"C"{int swscanf(wchar_t const(*),wchar_t const(*),...);};
extern"C"{int ungetwc(int,class::__sFILE(*));};
extern"C"{int vfwprintf(class::__sFILE(*),wchar_t const(*),class::__va_list_tag(*));};
extern"C"{int vswprintf(wchar_t(*),unsigned long n,wchar_t const(*),class::__va_list_tag(*));};
extern"C"{int vwprintf(wchar_t const(*),class::__va_list_tag(*));};
extern"C"{unsigned long wcrtomb(char(*),wchar_t,union::__xcodeml_2(*));};
extern"C"{wchar_t(*wcscat(wchar_t(*),wchar_t const(*)));};
extern"C"{wchar_t(*wcschr(wchar_t const(*),wchar_t))/*gccattr pure:*/;};
extern"C"{int wcscmp(wchar_t const(*),wchar_t const(*))/*gccattr pure:*/;};
extern"C"{int wcscoll(wchar_t const(*),wchar_t const(*));};
extern"C"{wchar_t(*wcscpy(wchar_t(*),wchar_t const(*)));};
extern"C"{unsigned long wcscspn(wchar_t const(*),wchar_t const(*))/*gccattr pure:*/;};
extern"C"{unsigned long wcsftime(wchar_t(*),unsigned long,wchar_t const(*),class tm const(*));};
extern"C"{unsigned long wcslen(wchar_t const(*))/*gccattr pure:*/;};
extern"C"{wchar_t(*wcsncat(wchar_t(*),wchar_t const(*),unsigned long));};
extern"C"{int wcsncmp(wchar_t const(*),wchar_t const(*),unsigned long)/*gccattr pure:*/;};
extern"C"{wchar_t(*wcsncpy(wchar_t(*),wchar_t const(*),unsigned long));};
extern"C"{wchar_t(*wcspbrk(wchar_t const(*),wchar_t const(*)))/*gccattr pure:*/;};
extern"C"{wchar_t(*wcsrchr(wchar_t const(*),wchar_t))/*gccattr pure:*/;};
extern"C"{unsigned long wcsrtombs(char(*),wchar_t const(*(*)),unsigned long,union::__xcodeml_2(*));};
extern"C"{unsigned long wcsspn(wchar_t const(*),wchar_t const(*))/*gccattr pure:*/;};
extern"C"{wchar_t(*wcsstr(wchar_t const(*),wchar_t const(*)))/*gccattr pure:*/;};
extern"C"{unsigned long wcsxfrm(wchar_t(*),wchar_t const(*),unsigned long);};
extern"C"{int wctob(int);};
extern"C"{double wcstod(wchar_t const(*),wchar_t(*(*)));};
extern"C"{wchar_t(*wcstok(wchar_t(*),wchar_t const(*),wchar_t(*(*))));};
extern"C"{long wcstol(wchar_t const(*),wchar_t(*(*)),int);};
extern"C"{unsigned long wcstoul(wchar_t const(*),wchar_t(*(*)),int);};
extern"C"{wchar_t(*wmemchr(wchar_t const(*),wchar_t,unsigned long))/*gccattr pure:*/;};
extern"C"{int wmemcmp(wchar_t const(*),wchar_t const(*),unsigned long)/*gccattr pure:*/;};
extern"C"{wchar_t(*wmemcpy(wchar_t(*),wchar_t const(*),unsigned long));};
extern"C"{wchar_t(*wmemmove(wchar_t(*),wchar_t const(*),unsigned long));};
extern"C"{wchar_t(*wmemset(wchar_t(*),wchar_t,unsigned long));};
extern"C"{int wprintf(wchar_t const(*),...);};
extern"C"{int wscanf(wchar_t const(*),...);};
extern class::__sFILE(*__stdinp);
extern class::__sFILE(*__stdoutp);
extern class::__sFILE(*__stderrp);
extern"C"{int vfwscanf(class::__sFILE(*),wchar_t const(*),class::__va_list_tag(*));};
extern"C"{int vswscanf(wchar_t const(*),wchar_t const(*),class::__va_list_tag(*));};
extern"C"{int vwscanf(wchar_t const(*),class::__va_list_tag(*));};
extern"C"{float wcstof(wchar_t const(*),wchar_t(*(*)));};
extern"C"{long double wcstold(wchar_t const(*),wchar_t(*(*)));};
extern"C"{long long wcstoll(wchar_t const(*),wchar_t(*(*)),int);};
extern"C"{unsigned long long wcstoull(wchar_t const(*),wchar_t(*(*)),int);};
extern"C"{int wcswidth(wchar_t const(*),unsigned long);};
extern"C"{int wcwidth(wchar_t);};
extern"C"{unsigned long mbsnrtowcs(wchar_t(*),char const(*(*)),unsigned long,unsigned long,union::__xcodeml_2(*));};
extern"C"{class::__sFILE(*open_wmemstream(wchar_t(*(*)),unsigned long(*)));};
extern"C"{wchar_t(*wcpcpy(wchar_t(*),wchar_t const(*)));};
extern"C"{wchar_t(*wcpncpy(wchar_t(*),wchar_t const(*),unsigned long));};
extern"C"{wchar_t(*wcsdup(wchar_t const(*)))/*gccattr malloc:*/;};
extern"C"{int wcscasecmp(wchar_t const(*),wchar_t const(*));};
extern"C"{int wcsncasecmp(wchar_t const(*),wchar_t const(*),unsigned long n);};
extern"C"{unsigned long wcsnlen(wchar_t const(*),unsigned long)/*gccattr pure:*/;};
extern"C"{unsigned long wcsnrtombs(char(*),wchar_t const(*(*)),unsigned long,unsigned long,union::__xcodeml_2(*));};
extern"C"{wchar_t(*fgetwln(class::__sFILE(*),unsigned long(*)));};
extern"C"{unsigned long wcslcat(wchar_t(*),wchar_t const(*),unsigned long);};
extern"C"{unsigned long wcslcpy(wchar_t(*),wchar_t const(*),unsigned long);};
class _xlocale;
typedef class::_xlocale(*locale_t);
extern"C"{int wcscasecmp_l(wchar_t const(*),wchar_t const(*),class::_xlocale(*));};
extern"C"{int wcsncasecmp_l(wchar_t const(*),wchar_t const(*),unsigned long,class::_xlocale(*));};
extern"C"{int wcscoll_l(wchar_t const(*),wchar_t const(*),class::_xlocale(*));};
extern"C"{unsigned long wcsxfrm_l(wchar_t(*),wchar_t const(*),unsigned long,class::_xlocale(*));};

wchar_t(*__libcpp_wcschr(wchar_t const(*__s),wchar_t __c))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((wchar_t(*))(wcschr(__s,__c)));
}
const wchar_t *wcschr(wchar_t const*__s,wchar_t __c)__attribute__((__visibility__("hidden")))__attribute((__exclude_from_explicit_instantiation__))__attribute((__enable_if__(true,""))){return(__libcpp_wcschr(__s,__c));
}
wchar_t(*wcschr(wchar_t*__s,wchar_t __c))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr enable_if:true*/{return(__libcpp_wcschr(__s,__c));
}
wchar_t(*__libcpp_wcspbrk(wchar_t const(*__s1),wchar_t const(*__s2)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((wchar_t(*))(wcspbrk(__s1,__s2)));
}
wchar_t const(*wcspbrk(wchar_t const(*__s1),wchar_t const(*__s2)))__attribute__((__visibility__("hidden")))__attribute((__exclude__from_explicit_instantiation__))__attribute((__enable_if__(true,""))){return(__libcpp_wcspbrk(__s1,__s2));
}
wchar_t(*wcspbrk(wchar_t(*__s1),wchar_t const(*__s2)))__attribute__((__visibility__("hidden")))__attribute((__exclude__from_explicit_instantiation__))__attribute((__enable_if__(true,""))){return(__libcpp_wcspbrk(__s1,__s2));
}
wchar_t(*__libcpp_wcsrchr(wchar_t const(*__s),wchar_t __c))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((wchar_t(*))(wcsrchr(__s,__c)));
}
wchar_t const(*wcsrchr(wchar_t const(*__s),wchar_t __c))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr enable_if:true*/{return(__libcpp_wcsrchr(__s,__c));
}
wchar_t(*wcsrchr(wchar_t(*__s),wchar_t __c))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr enable_if:true*/{return(__libcpp_wcsrchr(__s,__c));
}
wchar_t(*__libcpp_wcsstr(wchar_t const(*__s1),wchar_t const(*__s2)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((wchar_t(*))(wcsstr(__s1,__s2)));
}
wchar_t const(*wcsstr(wchar_t const(*__s1),wchar_t const(*__s2)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr enable_if:true*/{return(__libcpp_wcsstr(__s1,__s2));
}
wchar_t(*wcsstr(wchar_t(*__s1),wchar_t const(*__s2)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr enable_if:true*/{return(__libcpp_wcsstr(__s1,__s2));
}
wchar_t(*__libcpp_wmemchr(wchar_t const(*__s),wchar_t __c,unsigned long __n))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((wchar_t(*))(wmemchr(__s,__c,__n)));
}
wchar_t const(*wmemchr(wchar_t const(*__s),wchar_t __c,unsigned long __n))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr enable_if:true*/{return(__libcpp_wmemchr(__s,__c,__n));
}
wchar_t(*wmemchr(wchar_t(*__s),wchar_t __c,unsigned long __n))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr enable_if:true*/{return(__libcpp_wmemchr(__s,__c,__n));
}

namespace std{namespace __1{class ios_base/*gccattr visibility:*/;
template<typename __xcodeml_template_type_0_0>class char_traits/*gccattr type_visibility:*/;
;
template<>class::std::__1::char_traits<char>;
template<>class::std::__1::char_traits<char16_t>;
template<>class::std::__1::char_traits<char32_t>;
template<>class::std::__1::char_traits<wchar_t>;
template<typename __xcodeml_template_type_0_0>class allocator/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class basic_ios/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class basic_streambuf/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class basic_istream/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class basic_ostream/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class basic_iostream/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class basic_stringbuf/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class basic_istringstream/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class basic_ostringstream/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class basic_stringstream/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class basic_filebuf/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class basic_ifstream/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class basic_ofstream/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class basic_fstream/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class istreambuf_iterator/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class ostreambuf_iterator/*gccattr type_visibility:*/;
;
typedef class::std::__1::basic_ios<char,class::std::__1::char_traits<char> >ios;
typedef class::std::__1::basic_ios<wchar_t,class::std::__1::char_traits<wchar_t> >wios;
typedef class::std::__1::basic_streambuf<char,class::std::__1::char_traits<char> >streambuf;
typedef class::std::__1::basic_istream<char,class::std::__1::char_traits<char> >istream;
typedef class::std::__1::basic_ostream<char,class::std::__1::char_traits<char> >ostream;
typedef class::std::__1::basic_iostream<char,class::std::__1::char_traits<char> >iostream;
typedef class::std::__1::basic_stringbuf<char,class::std::__1::char_traits<char>,class::std::__1::allocator<char> >stringbuf;
typedef class::std::__1::basic_istringstream<char,class::std::__1::char_traits<char>,class::std::__1::allocator<char> >istringstream;
typedef class::std::__1::basic_ostringstream<char,class::std::__1::char_traits<char>,class::std::__1::allocator<char> >ostringstream;
typedef class::std::__1::basic_stringstream<char,class::std::__1::char_traits<char>,class::std::__1::allocator<char> >stringstream;
typedef class::std::__1::basic_filebuf<char,class::std::__1::char_traits<char> >filebuf;
typedef class::std::__1::basic_ifstream<char,class::std::__1::char_traits<char> >ifstream;
typedef class::std::__1::basic_ofstream<char,class::std::__1::char_traits<char> >ofstream;
typedef class::std::__1::basic_fstream<char,class::std::__1::char_traits<char> >fstream;
typedef class::std::__1::basic_streambuf<wchar_t,class::std::__1::char_traits<wchar_t> >wstreambuf;
typedef class::std::__1::basic_istream<wchar_t,class::std::__1::char_traits<wchar_t> >wistream;
typedef class::std::__1::basic_ostream<wchar_t,class::std::__1::char_traits<wchar_t> >wostream;
typedef class::std::__1::basic_iostream<wchar_t,class::std::__1::char_traits<wchar_t> >wiostream;
typedef class::std::__1::basic_stringbuf<wchar_t,class::std::__1::char_traits<wchar_t>,class::std::__1::allocator<wchar_t> >wstringbuf;
typedef class::std::__1::basic_istringstream<wchar_t,class::std::__1::char_traits<wchar_t>,class::std::__1::allocator<wchar_t> >wistringstream;
typedef class::std::__1::basic_ostringstream<wchar_t,class::std::__1::char_traits<wchar_t>,class::std::__1::allocator<wchar_t> >wostringstream;
typedef class::std::__1::basic_stringstream<wchar_t,class::std::__1::char_traits<wchar_t>,class::std::__1::allocator<wchar_t> >wstringstream;
typedef class::std::__1::basic_filebuf<wchar_t,class::std::__1::char_traits<wchar_t> >wfilebuf;
typedef class::std::__1::basic_ifstream<wchar_t,class::std::__1::char_traits<wchar_t> >wifstream;
typedef class::std::__1::basic_ofstream<wchar_t,class::std::__1::char_traits<wchar_t> >wofstream;
typedef class::std::__1::basic_fstream<wchar_t,class::std::__1::char_traits<wchar_t> >wfstream;
template<typename __xcodeml_template_type_0_0>class fpos/*gccattr type_visibility:*/;
;
typedef class::std::__1::fpos<union::__xcodeml_2>streampos;
typedef class::std::__1::fpos<union::__xcodeml_2>wstreampos;
typedef class::std::__1::fpos<union::__xcodeml_2>u16streampos;
typedef class::std::__1::fpos<union::__xcodeml_2>u32streampos;
typedef long long streamoff;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class basic_string/*gccattr type_visibility:*/;
;
typedef class::std::__1::basic_string<char,class::std::__1::char_traits<char>,class::std::__1::allocator<char> >string;
typedef class::std::__1::basic_string<wchar_t,class::std::__1::char_traits<wchar_t>,class::std::__1::allocator<wchar_t> >wstring;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class vector/*gccattr type_visibility:*/;
;
}
}
typedef long ptrdiff_t;
typedef int rune_t;
typedef class::__xcodeml_1 max_align_t;
typedef unsigned long rsize_t;
namespace std{typedef nullptr_t nullptr_t;
}
namespace std{namespace __1{using::ptrdiff_t;
using::size_t;
using::max_align_t;
}
}
namespace std{namespace __1{template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class pair/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0>class reference_wrapper/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0>class hash/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0,__xcodeml_template_type_0_0 __v>class integral_constant{public:constexpr static __xcodeml_template_type_0_0 const value=__v;
public:typedef __xcodeml_template_type_0_0 value_type;
public:typedef class integral_constant type;
public:operator __xcodeml_template_type_0_0()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return value;
}
}
;
;
constexpr __xcodeml_template_type_0_0 const integral_constant::value;
typedef class::std::__1::integral_constant<bool,1>true_type;
typedef class::std::__1::integral_constant<bool,0>false_type;
template<bool _Val>using _BoolConstant=integral_constant<bool,expression>;
template<bool>class _MetaBase;
;
template<>class _MetaBase<1>{public:template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>using _SelectImpl=__xcodeml_template_type_0_0;
public:template<template<typename...__xcodeml_template_type_1_0> class __xcodeml_template_template_0_0,template<typename...__xcodeml_template_type_1_0> class __xcodeml_template_template_0_1,typename...__xcodeml_template_type_0_2>using _SelectApplyImpl=__xcodeml_template_template_0_0<__xcodeml_template_type_0_2...>/*packsize1*/;
public:template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>using _FirstImpl=__xcodeml_template_type_0_0;
public:template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>using _SecondImpl=__xcodeml_template_type_0_1;
public:template<typename __xcodeml_template_type_0_0>using _EnableIfImpl=__xcodeml_template_type_0_0;
public:template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>using _OrImpl=/*DTS*/_MetaBase<expression>::template _OrImpl<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>;
public:template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>using _AndImpl=/*DTS*/_MetaBase<expression>::template _AndImpl<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>;
}
;
template<>class _MetaBase<0>{public:template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>using _SelectImpl=__xcodeml_template_type_0_1;
public:template<template<typename...__xcodeml_template_type_1_0> class __xcodeml_template_template_0_0,template<typename...__xcodeml_template_type_1_0> class __xcodeml_template_template_0_1,typename...__xcodeml_template_type_0_2>using _SelectApplyImpl=__xcodeml_template_template_0_1<__xcodeml_template_type_0_2...>/*packsize1*/;
public:template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>using _OrImpl=__xcodeml_template_type_0_0;
public:template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>using _AndImpl=__xcodeml_template_type_0_0;
}
;
template<bool _Cond,typename __xcodeml_template_type_0_1>using _EnableIf=/*DTS*/_MetaBase<expression>::template _EnableIfImpl<__xcodeml_template_type_0_1>;
template<bool _Cond,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>using _If=/*DTS*/_MetaBase<expression>::template _SelectImpl<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>;
template<typename...__xcodeml_template_type_0_0>using _Or=/*DTS*/_MetaBase<expression>::template _OrImpl<class::std::__1::integral_constant<bool,0>,__xcodeml_template_type_0_0...>;
template<typename...__xcodeml_template_type_0_0>using _And=/*DTS*/_MetaBase<expression>::template _AndImpl<class::std::__1::integral_constant<bool,1>,__xcodeml_template_type_0_0...>;
template<typename __xcodeml_template_type_0_0>class _Not:public integral_constant<bool,expression>{}
;
;
template<typename...__xcodeml_template_type_0_0>using _FirstType=/*DTS*/_MetaBase<expression>::template _FirstImpl<__xcodeml_template_type_0_0...>;
template<typename...__xcodeml_template_type_0_0>using _SecondType=/*DTS*/_MetaBase<expression>::template _SecondImpl<__xcodeml_template_type_0_0...>;
template<template<typename...__xcodeml_template_type_1_0> class __xcodeml_template_template_0_0,typename...__xcodeml_template_type_0_1>class _Lazy:public __xcodeml_template_template_0_0<__xcodeml_template_type_0_1...>/*packsize1*/{}
;
;
template<template<typename...__xcodeml_template_type_1_0> class __xcodeml_template_template_0_0,typename...__xcodeml_template_type_0_1>class::std::__1::integral_constant<bool,1>__sfinae_test_impl(int)
template<template<typename...__xcodeml_template_type_1_0> class __xcodeml_template_template_0_0,typename...__xcodeml_template_type_0_1>class::std::__1::integral_constant<bool,0>__sfinae_test_impl(...)
template<template<typename...__xcodeml_template_type_1_0> class __xcodeml_template_template_0_0,typename...__xcodeml_template_type_0_1>using _IsValidExpansion=decltype ();
template<typename __xcodeml_template_type_0_0>class __void_t{public:typedef void type;
}
;
;
template<typename __xcodeml_template_type_0_0>class __identity{public:typedef __xcodeml_template_type_0_0 type;
}
;
;
template<typename __xcodeml_template_type_0_0,bool>class __dependent_type:public __xcodeml_template_type_0_0{}
;
;
template<bool _Bp,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class conditional{public:typedef __xcodeml_template_type_0_1 type;
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class conditional<0,__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>{public:typedef __xcodeml_template_type_0_1 type;
}
;
template<bool,typename __xcodeml_template_type_0_1>class enable_if{}
;
;
template<typename __xcodeml_template_type_0_0>class enable_if<1,__xcodeml_template_type_0_0>{public:typedef __xcodeml_template_type_0_0 type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class is_same:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_same<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>using _IsSame=integral_constant<bool,expression>;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>using _IsNotSame=integral_constant<bool,expression>;
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0(*addressof(__xcodeml_template_type_0_0&__x))/*gccattr no_sanitize:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_addressof(__x));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0(*addressof(__xcodeml_template_type_0_0 const&& ))
class __two{public:char __lx[2];
}
;
template<typename __xcodeml_template_type_0_0>class is_const:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_const<__xcodeml_template_type_0_0 const>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0>class is_volatile:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_volatile<__xcodeml_template_type_0_0 volatile>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0>class remove_const{public:typedef __xcodeml_template_type_0_0 type;
}
;
;
template<typename __xcodeml_template_type_0_0>class remove_const<__xcodeml_template_type_0_0 const>{public:typedef __xcodeml_template_type_0_0 type;
}
;
template<typename __xcodeml_template_type_0_0>class remove_volatile{public:typedef __xcodeml_template_type_0_0 type;
}
;
;
template<typename __xcodeml_template_type_0_0>class remove_volatile<__xcodeml_template_type_0_0 volatile>{public:typedef __xcodeml_template_type_0_0 type;
}
;
template<typename __xcodeml_template_type_0_0>class remove_cv{public:typedef typename remove_volatile<typename remove_const<__xcodeml_template_type_0_0>::type>::type type;
}
;
;
template<typename __xcodeml_template_type_0_0>class __libcpp_is_void:public integral_constant<bool,0>{}
;
;
template<>class __libcpp_is_void<void>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0>class is_void:public __libcpp_is_void<typename remove_cv<__xcodeml_template_type_0_0>::type>{}
;
;
template<typename __xcodeml_template_type_0_0>class __is_nullptr_t_impl:public integral_constant<bool,0>{}
;
;
template<>class __is_nullptr_t_impl<nullptr_t>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0>class __is_nullptr_t:public __is_nullptr_t_impl<typename remove_cv<__xcodeml_template_type_0_0>::type>{}
;
;
template<typename __xcodeml_template_type_0_0>class __libcpp_is_integral:public integral_constant<bool,0>{}
;
;
template<>class __libcpp_is_integral<bool>:public integral_constant<bool,1>{}
;
template<>class __libcpp_is_integral<char>:public integral_constant<bool,1>{}
;
template<>class __libcpp_is_integral<signed char>:public integral_constant<bool,1>{}
;
template<>class __libcpp_is_integral<unsigned char>:public integral_constant<bool,1>{}
;
template<>class __libcpp_is_integral<wchar_t>:public integral_constant<bool,1>{}
;
template<>class __libcpp_is_integral<char16_t>:public integral_constant<bool,1>{}
;
template<>class __libcpp_is_integral<char32_t>:public integral_constant<bool,1>{}
;
template<>class __libcpp_is_integral<short>:public integral_constant<bool,1>{}
;
template<>class __libcpp_is_integral<unsigned short>:public integral_constant<bool,1>{}
;
template<>class __libcpp_is_integral<int>:public integral_constant<bool,1>{}
;
template<>class __libcpp_is_integral<unsigned int>:public integral_constant<bool,1>{}
;
template<>class __libcpp_is_integral<long>:public integral_constant<bool,1>{}
;
template<>class __libcpp_is_integral<unsigned long>:public integral_constant<bool,1>{}
;
template<>class __libcpp_is_integral<long long>:public integral_constant<bool,1>{}
;
template<>class __libcpp_is_integral<unsigned long long>:public integral_constant<bool,1>{}
;
template<>class __libcpp_is_integral<__int128>:public integral_constant<bool,1>{}
;
template<>class __libcpp_is_integral<unsigned __int128>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0>class is_integral:public __libcpp_is_integral<typename remove_cv<__xcodeml_template_type_0_0>::type>{}
;
;
template<typename __xcodeml_template_type_0_0>class __libcpp_is_floating_point:public integral_constant<bool,0>{}
;
;
template<>class __libcpp_is_floating_point<float>:public integral_constant<bool,1>{}
;
template<>class __libcpp_is_floating_point<double>:public integral_constant<bool,1>{}
;
template<>class __libcpp_is_floating_point<long double>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0>class is_floating_point:public __libcpp_is_floating_point<typename remove_cv<__xcodeml_template_type_0_0>::type>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_array:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_array<__xcodeml_template_type_0_0>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0,unsigned long _Np>class is_array<__xcodeml_template_type_0_0>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0>class __libcpp_is_pointer:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class __libcpp_is_pointer<__xcodeml_template_type_0_0(*)>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0>class __libcpp_remove_objc_qualifiers{public:typedef __xcodeml_template_type_0_0 type;
}
;
;
template<typename __xcodeml_template_type_0_0>class is_pointer:public __libcpp_is_pointer<typename __libcpp_remove_objc_qualifiers<typename remove_cv<__xcodeml_template_type_0_0>::type>::type>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_lvalue_reference:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_lvalue_reference<__xcodeml_template_type_0_0&>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0>class is_rvalue_reference:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_rvalue_reference<__xcodeml_template_type_0_0&& >:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0>class is_reference:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_reference<__xcodeml_template_type_0_0&>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0>class is_reference<__xcodeml_template_type_0_0&& >:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0>class is_union:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_class:public integral_constant<bool,expression>{}
;
;
namespace __libcpp_is_function_imp{class __dummy_type{}
;
template<typename __xcodeml_template_type_0_0>char __test(__xcodeml_template_type_0_0(*))
template<typename __xcodeml_template_type_0_0>char __test(class::std::__1::__libcpp_is_function_imp::__dummy_type)
template<typename __xcodeml_template_type_0_0>class::std::__1::__two __test(...)
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0&__source(int)
template<typename __xcodeml_template_type_0_0>class::std::__1::__libcpp_is_function_imp::__dummy_type __source(...)
}
template<typename __xcodeml_template_type_0_0,bool=((((is_class<__xcodeml_template_type_0_0>::value||is_union<__xcodeml_template_type_0_0>::value)||is_void<__xcodeml_template_type_0_0>::value)||is_reference<__xcodeml_template_type_0_0>::value)||__is_nullptr_t<__xcodeml_template_type_0_0>::value)>class __libcpp_is_function:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class __libcpp_is_function<__xcodeml_template_type_0_0,1>:public integral_constant<bool,0>{}
;
template<typename __xcodeml_template_type_0_0>class is_function:public __libcpp_is_function<__xcodeml_template_type_0_0,expression>{}
;
;
template<typename __xcodeml_template_type_0_0,bool _IsMemberFunctionPtr,bool _IsMemberObjectPtr>class __member_pointer_traits_imp{}
;
;
template<typename __xcodeml_template_type_0_0>class __libcpp_is_member_function_pointer:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __libcpp_is_member_function_pointer<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)>:public is_function<__xcodeml_template_type_0_0>{}
;
template<typename __xcodeml_template_type_0_0>class is_member_function_pointer:public typename __libcpp_is_member_function_pointer<typename remove_cv<__xcodeml_template_type_0_0>::type>::type{}
;
;
template<typename __xcodeml_template_type_0_0>class __libcpp_is_member_pointer:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __libcpp_is_member_pointer<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0>class is_member_pointer:public __libcpp_is_member_pointer<typename remove_cv<__xcodeml_template_type_0_0>::type>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_member_object_pointer:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_enum:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_arithmetic:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_fundamental:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_scalar:public integral_constant<bool,expression>{}
;
;
template<>class is_scalar<nullptr_t>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0>class is_object:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_compound:public integral_constant<bool,expression>{}
;
;
class __is_referenceable_impl{public:template<typename __xcodeml_template_type_0_0>static __xcodeml_template_type_0_0&__test(int)
public:template<typename __xcodeml_template_type_0_0>static class::std::__1::__two __test(...)
}
;
template<typename __xcodeml_template_type_0_0>class __is_referenceable:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0,bool=((is_reference<__xcodeml_template_type_0_0>::value||is_function<__xcodeml_template_type_0_0>::value)||is_const<__xcodeml_template_type_0_0>::value)>class __add_const{public:typedef __xcodeml_template_type_0_0 type;
}
;
;
template<typename __xcodeml_template_type_0_0>class __add_const<__xcodeml_template_type_0_0,0>{public:typedef __xcodeml_template_type_0_0 const type;
}
;
template<typename __xcodeml_template_type_0_0>class add_const{public:typedef typename __add_const<__xcodeml_template_type_0_0,expression>::type type;
}
;
;
template<typename __xcodeml_template_type_0_0,bool=((is_reference<__xcodeml_template_type_0_0>::value||is_function<__xcodeml_template_type_0_0>::value)||is_volatile<__xcodeml_template_type_0_0>::value)>class __add_volatile{public:typedef __xcodeml_template_type_0_0 type;
}
;
;
template<typename __xcodeml_template_type_0_0>class __add_volatile<__xcodeml_template_type_0_0,0>{public:typedef __xcodeml_template_type_0_0 volatile type;
}
;
template<typename __xcodeml_template_type_0_0>class add_volatile{public:typedef typename __add_volatile<__xcodeml_template_type_0_0,expression>::type type;
}
;
;
template<typename __xcodeml_template_type_0_0>class add_cv{public:typedef typename add_const<typename add_volatile<__xcodeml_template_type_0_0>::type>::type type;
}
;
;
template<typename __xcodeml_template_type_0_0>class remove_reference{public:typedef __xcodeml_template_type_0_0 type;
}
;
;
template<typename __xcodeml_template_type_0_0>class remove_reference<__xcodeml_template_type_0_0&>{public:typedef __xcodeml_template_type_0_0 type;
}
;
template<typename __xcodeml_template_type_0_0>class remove_reference<__xcodeml_template_type_0_0&& >{public:typedef __xcodeml_template_type_0_0 type;
}
;
template<typename __xcodeml_template_type_0_0,bool=__is_referenceable<__xcodeml_template_type_0_0>::value>class __add_lvalue_reference_impl{public:typedef __xcodeml_template_type_0_0 type;
}
;
;
template<typename __xcodeml_template_type_0_0>class __add_lvalue_reference_impl<__xcodeml_template_type_0_0,1>{public:typedef __xcodeml_template_type_0_0&type;
}
;
template<typename __xcodeml_template_type_0_0>class add_lvalue_reference{public:typedef typename __add_lvalue_reference_impl<__xcodeml_template_type_0_0,expression>::type type;
}
;
;
template<typename __xcodeml_template_type_0_0,bool=__is_referenceable<__xcodeml_template_type_0_0>::value>class __add_rvalue_reference_impl{public:typedef __xcodeml_template_type_0_0 type;
}
;
;
template<typename __xcodeml_template_type_0_0>class __add_rvalue_reference_impl<__xcodeml_template_type_0_0,1>{public:typedef __xcodeml_template_type_0_0&& type;
}
;
template<typename __xcodeml_template_type_0_0>class add_rvalue_reference{public:typedef typename __add_rvalue_reference_impl<__xcodeml_template_type_0_0,expression>::type type;
}
;
;
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0&& __declval(int)
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __declval(long)
template<typename __xcodeml_template_type_0_0>decltype ()declval()
template<typename __xcodeml_template_type_0_0>class __uncvref{public:typedef typename remove_cv<typename remove_reference<__xcodeml_template_type_0_0>::type>::type type;
}
;
;
template<typename __xcodeml_template_type_0_0>class __unconstref{public:typedef typename remove_const<typename remove_reference<__xcodeml_template_type_0_0>::type>::type type;
}
;
;
template<typename __xcodeml_template_type_0_0>using __uncvref_t=typename __uncvref<__xcodeml_template_type_0_0>::type;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __is_same_uncvref:public integral_constant<bool,expression>{}
;
;
class __any{public:__any(...);
}
;
template<typename __xcodeml_template_type_0_0>class remove_pointer{public:typedef __xcodeml_template_type_0_0 type;
}
;
;
template<typename __xcodeml_template_type_0_0>class remove_pointer<__xcodeml_template_type_0_0(*)>{public:typedef __xcodeml_template_type_0_0 type;
}
;
template<typename __xcodeml_template_type_0_0>class remove_pointer<__xcodeml_template_type_0_0(*const)>{public:typedef __xcodeml_template_type_0_0 type;
}
;
template<typename __xcodeml_template_type_0_0>class remove_pointer<__xcodeml_template_type_0_0(*volatile)>{public:typedef __xcodeml_template_type_0_0 type;
}
;
template<typename __xcodeml_template_type_0_0>class remove_pointer<__xcodeml_template_type_0_0(*volatile const)>{public:typedef __xcodeml_template_type_0_0 type;
}
;
template<typename __xcodeml_template_type_0_0,bool=(__is_referenceable<__xcodeml_template_type_0_0>::value||integral_constant<bool,expression>::value)>class __add_pointer_impl{public:typedef typename remove_reference<__xcodeml_template_type_0_0>::type(*type);
}
;
;
template<typename __xcodeml_template_type_0_0>class __add_pointer_impl<__xcodeml_template_type_0_0,0>{public:typedef __xcodeml_template_type_0_0 type;
}
;
template<typename __xcodeml_template_type_0_0>class add_pointer{public:typedef typename __add_pointer_impl<__xcodeml_template_type_0_0,expression>::type type;
}
;
;
template<typename __xcodeml_template_type_0_0,bool=is_integral<__xcodeml_template_type_0_0>::value>class __libcpp_is_signed_impl:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class __libcpp_is_signed_impl<__xcodeml_template_type_0_0,0>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0,bool=is_arithmetic<__xcodeml_template_type_0_0>::value>class __libcpp_is_signed:public __libcpp_is_signed_impl<__xcodeml_template_type_0_0,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class __libcpp_is_signed<__xcodeml_template_type_0_0,0>:public integral_constant<bool,0>{}
;
template<typename __xcodeml_template_type_0_0>class is_signed:public __libcpp_is_signed<__xcodeml_template_type_0_0,expression>{}
;
;
template<typename __xcodeml_template_type_0_0,bool=is_integral<__xcodeml_template_type_0_0>::value>class __libcpp_is_unsigned_impl:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class __libcpp_is_unsigned_impl<__xcodeml_template_type_0_0,0>:public integral_constant<bool,0>{}
;
template<typename __xcodeml_template_type_0_0,bool=is_arithmetic<__xcodeml_template_type_0_0>::value>class __libcpp_is_unsigned:public __libcpp_is_unsigned_impl<__xcodeml_template_type_0_0,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class __libcpp_is_unsigned<__xcodeml_template_type_0_0,0>:public integral_constant<bool,0>{}
;
template<typename __xcodeml_template_type_0_0>class is_unsigned:public __libcpp_is_unsigned<__xcodeml_template_type_0_0,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class rank:public integral_constant<unsigned long,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class rank<__xcodeml_template_type_0_0>:public integral_constant<unsigned long,expression>{}
;
template<typename __xcodeml_template_type_0_0,unsigned long _Np>class rank<__xcodeml_template_type_0_0>:public integral_constant<unsigned long,expression>{}
;
template<typename __xcodeml_template_type_0_0,unsigned int _Ip=0>class extent:public integral_constant<unsigned long,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class extent<__xcodeml_template_type_0_0,0>:public integral_constant<unsigned long,0>{}
;
template<typename __xcodeml_template_type_0_0,unsigned int _Ip>class extent<__xcodeml_template_type_0_0,expression>:public integral_constant<unsigned long,expression>{}
;
template<typename __xcodeml_template_type_0_0,unsigned long _Np>class extent<__xcodeml_template_type_0_0,0>:public integral_constant<unsigned long,expression>{}
;
template<typename __xcodeml_template_type_0_0,unsigned long _Np,unsigned int _Ip>class extent<__xcodeml_template_type_0_0,expression>:public integral_constant<unsigned long,expression>{}
;
template<typename __xcodeml_template_type_0_0>class remove_extent{public:typedef __xcodeml_template_type_0_0 type;
}
;
;
template<typename __xcodeml_template_type_0_0>class remove_extent<__xcodeml_template_type_0_0>{public:typedef __xcodeml_template_type_0_0 type;
}
;
template<typename __xcodeml_template_type_0_0,unsigned long _Np>class remove_extent<__xcodeml_template_type_0_0>{public:typedef __xcodeml_template_type_0_0 type;
}
;
template<typename __xcodeml_template_type_0_0>class remove_all_extents{public:typedef __xcodeml_template_type_0_0 type;
}
;
;
template<typename __xcodeml_template_type_0_0>class remove_all_extents<__xcodeml_template_type_0_0>{public:typedef typename remove_all_extents<__xcodeml_template_type_0_0>::type type;
}
;
template<typename __xcodeml_template_type_0_0,unsigned long _Np>class remove_all_extents<__xcodeml_template_type_0_0>{public:typedef typename remove_all_extents<__xcodeml_template_type_0_0>::type type;
}
;
template<typename __xcodeml_template_type_0_0,bool>class __decay{public:typedef typename remove_cv<__xcodeml_template_type_0_0>::type type;
}
;
;
template<typename __xcodeml_template_type_0_0>class __decay<__xcodeml_template_type_0_0,1>{public:
public:typedef typename conditional<expression,typename remove_extent<__xcodeml_template_type_0_0>::type(*),typename conditional<expression,typename add_pointer<__xcodeml_template_type_0_0>::type,typename remove_cv<__xcodeml_template_type_0_0>::type>::type>::type type;
}
;
template<typename __xcodeml_template_type_0_0>class decay{private:
private:typedef typename remove_reference<__xcodeml_template_type_0_0>::type _Up;
public:
public:typedef typename __decay<typename remove_reference<__xcodeml_template_type_0_0>::type,expression>::type type;
}
;
;
template<typename __xcodeml_template_type_0_0>class is_abstract:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class __libcpp_is_final:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class is_base_of:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class is_convertible:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_empty:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_polymorphic:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class has_virtual_destructor:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class alignment_of:public integral_constant<unsigned long,expression>{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __type_list{public:typedef __xcodeml_template_type_0_0 _Head;
public:typedef __xcodeml_template_type_0_1 _Tail;
}
;
;
class __nat{public:__nat();
public:__nat(class __nat const&);
public:class::std::__1::__nat&operator=(class __nat const&);
public:~__nat();
}
;
template<typename __xcodeml_template_type_0_0>class __align_type{public:static unsigned long const value=(__alignof(__xcodeml_template_type_0_0));
public:typedef __xcodeml_template_type_0_0 type;
}
;
;
class __struct_double{public:long double __lx;
}
;
class __struct_double4{public:double __lx[4];
}
;
typedef class::std::__1::__type_list<class::std::__1::__align_type<unsigned char>,class::std::__1::__type_list<class::std::__1::__align_type<unsigned short>,class::std::__1::__type_list<class::std::__1::__align_type<unsigned int>,class::std::__1::__type_list<class::std::__1::__align_type<unsigned long>,class::std::__1::__type_list<class::std::__1::__align_type<unsigned long long>,class::std::__1::__type_list<class::std::__1::__align_type<double>,class::std::__1::__type_list<class::std::__1::__align_type<long double>,class::std::__1::__type_list<class::std::__1::__align_type<class::std::__1::__struct_double>,class::std::__1::__type_list<class::std::__1::__align_type<class::std::__1::__struct_double4>,class::std::__1::__type_list<class::std::__1::__align_type<int(*)>,class::std::__1::__nat> > > > > > > > > >__all_types;
template<unsigned long _Align>class __fallback_overaligned{}
;
;
template<typename __xcodeml_template_type_0_0,unsigned long _Align>class __find_pod;
;
template<typename __xcodeml_template_type_0_0,unsigned long _Align>class __find_pod<__type_list<__xcodeml_template_type_0_0,class::std::__1::__nat>,expression>{public:typedef typename conditional<expression,typename __xcodeml_template_type_0_0::type,__fallback_overaligned<expression> >::type type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,unsigned long _Align>class __find_pod<__type_list<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>,expression>{public:typedef typename conditional<expression,typename __xcodeml_template_type_0_0::type,typename __find_pod<__xcodeml_template_type_0_1,expression>::type>::type type;
}
;
template<typename __xcodeml_template_type_0_0,unsigned long _Len>class __find_max_align;
;
template<typename __xcodeml_template_type_0_0,unsigned long _Len>class __find_max_align<__type_list<__xcodeml_template_type_0_0,class::std::__1::__nat>,expression>:public integral_constant<unsigned long,expression>{}
;
template<unsigned long _Len,unsigned long _A1,unsigned long _A2>class __select_align{private:
private:static unsigned long const __min=((_A2<_A1)?_A2:_A1);
private:static unsigned long const __max=((_A1<_A2)?_A2:_A1);
public:
public:static unsigned long const value=((_Len<__max)?__min:__max);
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,unsigned long _Len>class __find_max_align<__type_list<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>,expression>:public integral_constant<unsigned long,expression>{}
;
template<unsigned long _Len,unsigned long _Align=__find_max_align<class::std::__1::__type_list<class::std::__1::__align_type<unsigned char>,class::std::__1::__type_list<class::std::__1::__align_type<unsigned short>,class::std::__1::__type_list<class::std::__1::__align_type<unsigned int>,class::std::__1::__type_list<class::std::__1::__align_type<unsigned long>,class::std::__1::__type_list<class::std::__1::__align_type<unsigned long long>,class::std::__1::__type_list<class::std::__1::__align_type<double>,class::std::__1::__type_list<class::std::__1::__align_type<long double>,class::std::__1::__type_list<class::std::__1::__align_type<class::std::__1::__struct_double>,class::std::__1::__type_list<class::std::__1::__align_type<class::std::__1::__struct_double4>,class::std::__1::__type_list<class::std::__1::__align_type<int(*)>,class::std::__1::__nat> > > > > > > > > >,expression>::value>class aligned_storage{public:typedef typename __find_pod<class::std::__1::__type_list<class::std::__1::__align_type<unsigned char>,class::std::__1::__type_list<class::std::__1::__align_type<unsigned short>,class::std::__1::__type_list<class::std::__1::__align_type<unsigned int>,class::std::__1::__type_list<class::std::__1::__align_type<unsigned long>,class::std::__1::__type_list<class::std::__1::__align_type<unsigned long long>,class::std::__1::__type_list<class::std::__1::__align_type<double>,class::std::__1::__type_list<class::std::__1::__align_type<long double>,class::std::__1::__type_list<class::std::__1::__align_type<class::std::__1::__struct_double>,class::std::__1::__type_list<class::std::__1::__align_type<class::std::__1::__struct_double4>,class::std::__1::__type_list<class::std::__1::__align_type<int(*)>,class::std::__1::__nat> > > > > > > > > >,expression>::type _Aligner;
public:union type{public:typename __find_pod<class::std::__1::__type_list<class::std::__1::__align_type<unsigned char>,class::std::__1::__type_list<class::std::__1::__align_type<unsigned short>,class::std::__1::__type_list<class::std::__1::__align_type<unsigned int>,class::std::__1::__type_list<class::std::__1::__align_type<unsigned long>,class::std::__1::__type_list<class::std::__1::__align_type<unsigned long long>,class::std::__1::__type_list<class::std::__1::__align_type<double>,class::std::__1::__type_list<class::std::__1::__align_type<long double>,class::std::__1::__type_list<class::std::__1::__align_type<class::std::__1::__struct_double>,class::std::__1::__type_list<class::std::__1::__align_type<class::std::__1::__struct_double4>,class::std::__1::__type_list<class::std::__1::__align_type<int(*)>,class::std::__1::__nat> > > > > > > > > >,expression>::type __align;
public:unsigned char __data[((((_Len+_Align)-1)/_Align)*_Align)];
}
;
}
;
;
template<unsigned long _Len>class aligned_storage<expression,1>{public:class type{public:unsigned char __lx[((((_Len+0x1)-1)/0x1)*0x1)];
}
;
}
;
template<unsigned long _Len>class aligned_storage<expression,2>{public:class type{public:unsigned char __lx[((((_Len+0x2)-1)/0x2)*0x2)];
}
;
}
;
template<unsigned long _Len>class aligned_storage<expression,4>{public:class type{public:unsigned char __lx[((((_Len+0x4)-1)/0x4)*0x4)];
}
;
}
;
template<unsigned long _Len>class aligned_storage<expression,8>{public:class type{public:unsigned char __lx[((((_Len+0x8)-1)/0x8)*0x8)];
}
;
}
;
template<unsigned long _Len>class aligned_storage<expression,16>{public:class type{public:unsigned char __lx[((((_Len+0x10)-1)/0x10)*0x10)];
}
;
}
;
template<unsigned long _Len>class aligned_storage<expression,32>{public:class type{public:unsigned char __lx[((((_Len+0x20)-1)/0x20)*0x20)];
}
;
}
;
template<unsigned long _Len>class aligned_storage<expression,64>{public:class type{public:unsigned char __lx[((((_Len+0x40)-1)/0x40)*0x40)];
}
;
}
;
template<unsigned long _Len>class aligned_storage<expression,128>{public:class type{public:unsigned char __lx[((((_Len+0x80)-1)/0x80)*0x80)];
}
;
}
;
template<unsigned long _Len>class aligned_storage<expression,256>{public:class type{public:unsigned char __lx[((((_Len+0x100)-1)/0x100)*0x100)];
}
;
}
;
template<unsigned long _Len>class aligned_storage<expression,512>{public:class type{public:unsigned char __lx[((((_Len+0x200)-1)/0x200)*0x200)];
}
;
}
;
template<unsigned long _Len>class aligned_storage<expression,1024>{public:class type{public:unsigned char __lx[((((_Len+0x400)-1)/0x400)*0x400)];
}
;
}
;
template<unsigned long _Len>class aligned_storage<expression,2048>{public:class type{public:unsigned char __lx[((((_Len+0x800)-1)/0x800)*0x800)];
}
;
}
;
template<unsigned long _Len>class aligned_storage<expression,4096>{public:class type{public:unsigned char __lx[((((_Len+0x1000)-1)/0x1000)*0x1000)];
}
;
}
;
template<unsigned long _Len>class aligned_storage<expression,8192>{public:class type{public:unsigned char __lx[((((_Len+0x2000)-1)/0x2000)*0x2000)];
}
;
}
;
template<unsigned long _Len>class aligned_storage<expression,16384>{public:class type{public:unsigned char __lx[((((_Len+0x4000)-1)/0x4000)*0x4000)];
}
;
}
;
template<unsigned long _I0,unsigned long _In...>class __static_max;
;
template<unsigned long _I0>class __static_max<expression>/*packsize0*/{public:static unsigned long const value=_I0;
}
;
template<unsigned long _I0,unsigned long _I1,unsigned long _In...>class __static_max<expression,expression,expression>/*packsize2*/{public:static unsigned long const value=((_I0>=_I1)?__static_max<expression,expression>/*packsize1*/::value:__static_max<expression,expression>/*packsize1*/::value);
}
;
template<unsigned long _Len,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class aligned_union{public:static unsigned long const alignment_value=__static_max<expression,expression>/*packsize1*/::value;
public:static unsigned long const __len=__static_max<expression,expression,expression>/*packsize2*/::value;
public:typedef typename aligned_storage<expression,expression>::type type;
}
;
;
template<typename __xcodeml_template_type_0_0>class __numeric_type{public:static void __test(...);
public:static float __test(float);
public:static double __test(char);
public:static double __test(int);
public:static double __test(unsigned int);
public:static double __test(long);
public:static double __test(unsigned long);
public:static double __test(long long);
public:static double __test(unsigned long long);
public:static double __test(double);
public:static long double __test(long double);
public:typedef decltype ()type;
public:static bool const value=integral_constant<bool,expression>::value;
}
;
;
template<>class __numeric_type<void>{public:static bool const value=true;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,bool=((__numeric_type<__xcodeml_template_type_0_0>::value&&__numeric_type<__xcodeml_template_type_0_1>::value)&&__numeric_type<__xcodeml_template_type_0_2>::value)>class __promote_imp{public:
public:static bool const value=false;
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __promote_imp<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2,1>{private:
private:typedef typename __promote_imp<__xcodeml_template_type_0_0,void,void,expression>::type __type1;
private:typedef typename __promote_imp<__xcodeml_template_type_0_1,void,void,expression>::type __type2;
private:typedef typename __promote_imp<__xcodeml_template_type_0_2,void,void,expression>::type __type3;
public:
public:typedef decltype ()type;
public:static bool const value=true;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __promote_imp<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void,1>{private:
private:typedef typename __promote_imp<__xcodeml_template_type_0_0,void,void,expression>::type __type1;
private:typedef typename __promote_imp<__xcodeml_template_type_0_1,void,void,expression>::type __type2;
public:
public:typedef decltype ()type;
public:static bool const value=true;
}
;
template<typename __xcodeml_template_type_0_0>class __promote_imp<__xcodeml_template_type_0_0,void,void,1>{public:
public:typedef typename __numeric_type<__xcodeml_template_type_0_0>::type type;
public:static bool const value=true;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __promote:public __promote_imp<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2,expression>{}
;
;
typedef class::std::__1::__type_list<signed char,class::std::__1::__type_list<short,class::std::__1::__type_list<int,class::std::__1::__type_list<long,class::std::__1::__type_list<long long,class::std::__1::__type_list<__int128,class::std::__1::__nat> > > > > >__signed_types;
typedef class::std::__1::__type_list<unsigned char,class::std::__1::__type_list<unsigned short,class::std::__1::__type_list<unsigned int,class::std::__1::__type_list<unsigned long,class::std::__1::__type_list<unsigned long long,class::std::__1::__type_list<unsigned __int128,class::std::__1::__nat> > > > > >__unsigned_types;
template<typename __xcodeml_template_type_0_0,unsigned long _Size,bool=(_Size<=(sizeof(typename __xcodeml_template_type_0_0::_Head)))>class __find_first;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,unsigned long _Size>class __find_first<__type_list<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>,expression,1>{public:typedef __xcodeml_template_type_0_0 type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,unsigned long _Size>class __find_first<__type_list<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>,expression,0>{public:typedef typename __find_first<__xcodeml_template_type_0_1,expression,expression>::type type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,bool=is_const<typename remove_reference<__xcodeml_template_type_0_0>::type>::value,bool=is_volatile<typename remove_reference<__xcodeml_template_type_0_0>::type>::value>class __apply_cv{public:typedef __xcodeml_template_type_0_1 type;
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __apply_cv<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,1,0>{public:typedef __xcodeml_template_type_0_1 const type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __apply_cv<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,0,1>{public:typedef __xcodeml_template_type_0_1 volatile type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __apply_cv<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,1,1>{public:typedef __xcodeml_template_type_0_1 volatile const type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __apply_cv<__xcodeml_template_type_0_0&,__xcodeml_template_type_0_1,0,0>{public:typedef __xcodeml_template_type_0_1&type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __apply_cv<__xcodeml_template_type_0_0&,__xcodeml_template_type_0_1,1,0>{public:typedef __xcodeml_template_type_0_1 const&type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __apply_cv<__xcodeml_template_type_0_0&,__xcodeml_template_type_0_1,0,1>{public:typedef __xcodeml_template_type_0_1 volatile&type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __apply_cv<__xcodeml_template_type_0_0&,__xcodeml_template_type_0_1,1,1>{public:typedef __xcodeml_template_type_0_1 volatile const&type;
}
;
template<typename __xcodeml_template_type_0_0,bool=(is_integral<__xcodeml_template_type_0_0>::value||is_enum<__xcodeml_template_type_0_0>::value)>class __make_signed{}
;
;
template<typename __xcodeml_template_type_0_0>class __make_signed<__xcodeml_template_type_0_0,1>{public:typedef typename __find_first<class::std::__1::__type_list<signed char,class::std::__1::__type_list<short,class::std::__1::__type_list<int,class::std::__1::__type_list<long,class::std::__1::__type_list<long long,class::std::__1::__type_list<__int128,class::std::__1::__nat> > > > > >,expression,expression>::type type;
}
;
template<>class __make_signed<bool,1>{}
;
template<>class __make_signed<short,1>{public:typedef short type;
}
;
template<>class __make_signed<unsigned short,1>{public:typedef short type;
}
;
template<>class __make_signed<int,1>{public:typedef int type;
}
;
template<>class __make_signed<unsigned int,1>{public:typedef int type;
}
;
template<>class __make_signed<long,1>{public:typedef long type;
}
;
template<>class __make_signed<unsigned long,1>{public:typedef long type;
}
;
template<>class __make_signed<long long,1>{public:typedef long long type;
}
;
template<>class __make_signed<unsigned long long,1>{public:typedef long long type;
}
;
template<>class __make_signed<__int128,1>{public:typedef __int128 type;
}
;
template<>class __make_signed<unsigned __int128,1>{public:typedef __int128 type;
}
;
template<typename __xcodeml_template_type_0_0>class make_signed{public:typedef typename __apply_cv<__xcodeml_template_type_0_0,typename __make_signed<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::type,expression,expression>::type type;
}
;
;
template<typename __xcodeml_template_type_0_0,bool=(is_integral<__xcodeml_template_type_0_0>::value||is_enum<__xcodeml_template_type_0_0>::value)>class __make_unsigned{}
;
;
template<typename __xcodeml_template_type_0_0>class __make_unsigned<__xcodeml_template_type_0_0,1>{public:typedef typename __find_first<class::std::__1::__type_list<unsigned char,class::std::__1::__type_list<unsigned short,class::std::__1::__type_list<unsigned int,class::std::__1::__type_list<unsigned long,class::std::__1::__type_list<unsigned long long,class::std::__1::__type_list<unsigned __int128,class::std::__1::__nat> > > > > >,expression,expression>::type type;
}
;
template<>class __make_unsigned<bool,1>{}
;
template<>class __make_unsigned<short,1>{public:typedef unsigned short type;
}
;
template<>class __make_unsigned<unsigned short,1>{public:typedef unsigned short type;
}
;
template<>class __make_unsigned<int,1>{public:typedef unsigned int type;
}
;
template<>class __make_unsigned<unsigned int,1>{public:typedef unsigned int type;
}
;
template<>class __make_unsigned<long,1>{public:typedef unsigned long type;
}
;
template<>class __make_unsigned<unsigned long,1>{public:typedef unsigned long type;
}
;
template<>class __make_unsigned<long long,1>{public:typedef unsigned long long type;
}
;
template<>class __make_unsigned<unsigned long long,1>{public:typedef unsigned long long type;
}
;
template<>class __make_unsigned<__int128,1>{public:typedef unsigned __int128 type;
}
;
template<>class __make_unsigned<unsigned __int128,1>{public:typedef unsigned __int128 type;
}
;
template<typename __xcodeml_template_type_0_0>class make_unsigned{public:typedef typename __apply_cv<__xcodeml_template_type_0_0,typename __make_unsigned<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::type,expression,expression>::type type;
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __common_type2_imp{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __common_type2_imp<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,typename __void_t<decltype ()>::type>{public:typedef typename decay<decltype ()>::type type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __common_type_impl{}
;
;
template<typename...__xcodeml_template_type_0_0>class __common_types;
;
template<typename...__xcodeml_template_type_0_0>class common_type/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __common_type_impl<__common_types<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>/*packsize2*/,typename __void_t<typename common_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>/*packsize2*/::type>::type>{public:typedef typename common_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>/*packsize2*/::type type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename...__xcodeml_template_type_0_3>class __common_type_impl<__common_types<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2,__xcodeml_template_type_0_3...>/*packsize4*/,typename __void_t<typename common_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>/*packsize2*/::type>::type>:public __common_type_impl<__common_types<typename common_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>/*packsize2*/::type,__xcodeml_template_type_0_2,__xcodeml_template_type_0_3...>/*packsize3*/,void>{}
;
template<>class common_type<>/*packsize0*/{}
;
template<typename __xcodeml_template_type_0_0>class common_type<__xcodeml_template_type_0_0>/*packsize1*/:public common_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>/*packsize2*/{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class common_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>/*packsize2*/:public typename conditional<expression,__common_type2_imp<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>,common_type<typename decay<__xcodeml_template_type_0_0>::type,typename decay<__xcodeml_template_type_0_1>::type>/*packsize2*/>::type{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename...__xcodeml_template_type_0_3>class common_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2,__xcodeml_template_type_0_3...>/*packsize4*/:public __common_type_impl<__common_types<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2,__xcodeml_template_type_0_3...>/*packsize4*/,void>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __select_2nd{public:typedef __xcodeml_template_type_0_1 type;
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename __select_2nd<decltype (),class::std::__1::integral_constant<bool,1> >::type __is_assignable_test(int)
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class::std::__1::integral_constant<bool,0>__is_assignable_test(...)
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,bool=(is_void<__xcodeml_template_type_0_0>::value||is_void<__xcodeml_template_type_0_1>::value)>class __is_assignable_imp:public/*Decltype*/{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __is_assignable_imp<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,1>:public integral_constant<bool,0>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class is_assignable:public __is_assignable_imp<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_copy_assignable:public is_assignable<typename add_lvalue_reference<__xcodeml_template_type_0_0>::type,typename add_lvalue_reference<typename add_const<__xcodeml_template_type_0_0>::type>::type>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_move_assignable:public is_assignable<typename add_lvalue_reference<__xcodeml_template_type_0_0>::type,typename add_rvalue_reference<__xcodeml_template_type_0_0>::type>{}
;
;
template<typename __xcodeml_template_type_0_0>class __is_destructible_apply{public:typedef int type;
}
;
;
template<typename __xcodeml_template_type_0_0>class __is_destructor_wellformed{public:template<typename __xcodeml_template_type_1_0>static char __test(typename __is_destructible_apply<decltype ()>::type)
public:template<typename __xcodeml_template_type_1_0>static class::std::__1::__two __test(...)
public:static bool const value=((sizeof((__test<__xcodeml_template_type_0_0>(12))))==(sizeof(char)));
}
;
;
template<typename __xcodeml_template_type_0_0,bool>class __destructible_imp;
;
template<typename __xcodeml_template_type_0_0>class __destructible_imp<__xcodeml_template_type_0_0,0>:public integral_constant<bool,expression>{}
;
template<typename __xcodeml_template_type_0_0>class __destructible_imp<__xcodeml_template_type_0_0,1>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0,bool>class __destructible_false;
;
template<typename __xcodeml_template_type_0_0>class __destructible_false<__xcodeml_template_type_0_0,0>:public __destructible_imp<__xcodeml_template_type_0_0,expression>{}
;
template<typename __xcodeml_template_type_0_0>class __destructible_false<__xcodeml_template_type_0_0,1>:public integral_constant<bool,0>{}
;
template<typename __xcodeml_template_type_0_0>class is_destructible:public __destructible_false<__xcodeml_template_type_0_0,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_destructible<__xcodeml_template_type_0_0>:public integral_constant<bool,0>{}
;
template<>class is_destructible<void>:public integral_constant<bool,0>{}
;
template<typename __xcodeml_template_type_0_0>typename remove_reference<__xcodeml_template_type_0_0>::type&& move(__xcodeml_template_type_0_0&& __t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename remove_reference<__xcodeml_template_type_0_0>::type _Up;
return static_cast<typename remove_reference<__xcodeml_template_type_0_0>::type&& >(__t);
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0&& forward(typename remove_reference<__xcodeml_template_type_0_0>::type&__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<__xcodeml_template_type_0_0&& >(__t);
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0&& forward(typename remove_reference<__xcodeml_template_type_0_0>::type&& __t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert((!is_lvalue_reference<__xcodeml_template_type_0_0>::value),"can not forward an rvalue as an lvalue");
return static_cast<__xcodeml_template_type_0_0&& >(__t);
}
template<typename __xcodeml_template_type_0_0>typename decay<__xcodeml_template_type_0_0>::type __decay_copy(__xcodeml_template_type_0_0&& __t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::forward<__xcodeml_template_type_0_0>(__t));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...),1,0>{public:typedef __xcodeml_template_type_0_1 _ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...,...),1,0>{public:typedef __xcodeml_template_type_0_1 _ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...,...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...)const,1,0>{public:typedef __xcodeml_template_type_0_1 const _ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...,...)const,1,0>{public:typedef __xcodeml_template_type_0_1 const _ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...,...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...)volatile,1,0>{public:typedef __xcodeml_template_type_0_1 volatile _ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...,...)volatile,1,0>{public:typedef __xcodeml_template_type_0_1 volatile _ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...,...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...)const volatile,1,0>{public:typedef __xcodeml_template_type_0_1 volatile const _ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...,...)const volatile,1,0>{public:typedef __xcodeml_template_type_0_1 volatile const _ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...,...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...),1,0>{public:typedef __xcodeml_template_type_0_1&_ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...,...),1,0>{public:typedef __xcodeml_template_type_0_1&_ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...,...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...)const,1,0>{public:typedef __xcodeml_template_type_0_1 const&_ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...,...)const,1,0>{public:typedef __xcodeml_template_type_0_1 const&_ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...,...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...)volatile,1,0>{public:typedef __xcodeml_template_type_0_1 volatile&_ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...,...)volatile,1,0>{public:typedef __xcodeml_template_type_0_1 volatile&_ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...,...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...)const volatile,1,0>{public:typedef __xcodeml_template_type_0_1 volatile const&_ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...,...)const volatile,1,0>{public:typedef __xcodeml_template_type_0_1 volatile const&_ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...,...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...),1,0>{public:typedef __xcodeml_template_type_0_1&& _ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...,...),1,0>{public:typedef __xcodeml_template_type_0_1&& _ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...,...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...)const,1,0>{public:typedef __xcodeml_template_type_0_1 const&& _ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...,...)const,1,0>{public:typedef __xcodeml_template_type_0_1 const&& _ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...,...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...)volatile,1,0>{public:typedef __xcodeml_template_type_0_1 volatile&& _ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...,...)volatile,1,0>{public:typedef __xcodeml_template_type_0_1 volatile&& _ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...,...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...)const volatile,1,0>{public:typedef __xcodeml_template_type_0_1 volatile const&& _ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2...,...)const volatile,1,0>{public:typedef __xcodeml_template_type_0_1 volatile const&& _ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
public:typedef __xcodeml_template_type_0_0 _FnType(__xcodeml_template_type_0_2...,...);
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __member_pointer_traits_imp<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*),0,1>{public:typedef __xcodeml_template_type_0_1 _ClassType;
public:typedef __xcodeml_template_type_0_0 _ReturnType;
}
;
template<typename __xcodeml_template_type_0_0>class __member_pointer_traits:public __member_pointer_traits_imp<typename remove_cv<__xcodeml_template_type_0_0>::type,expression,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class __member_pointer_class_type{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __member_pointer_class_type<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)>{public:typedef __xcodeml_template_type_0_1 type;
}
;
template<typename __xcodeml_template_type_0_0>class result_of;
;
namespace __is_construct{class __nat{}
;
}
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>class is_constructible:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_default_constructible:public is_constructible<__xcodeml_template_type_0_0>/*packsize0*/{}
;
;
template<typename __xcodeml_template_type_0_0>class is_copy_constructible:public is_constructible<__xcodeml_template_type_0_0,typename add_lvalue_reference<typename add_const<__xcodeml_template_type_0_0>::type>::type>/*packsize1*/{}
;
;
template<typename __xcodeml_template_type_0_0>class is_move_constructible:public is_constructible<__xcodeml_template_type_0_0,typename add_rvalue_reference<__xcodeml_template_type_0_0>::type>/*packsize1*/{}
;
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>class is_trivially_constructible:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_trivially_default_constructible:public is_trivially_constructible<__xcodeml_template_type_0_0>/*packsize0*/{}
;
;
template<typename __xcodeml_template_type_0_0>class is_trivially_copy_constructible:public is_trivially_constructible<__xcodeml_template_type_0_0,typename add_lvalue_reference<__xcodeml_template_type_0_0 const>::type>/*packsize1*/{}
;
;
template<typename __xcodeml_template_type_0_0>class is_trivially_move_constructible:public is_trivially_constructible<__xcodeml_template_type_0_0,typename add_rvalue_reference<__xcodeml_template_type_0_0>::type>/*packsize1*/{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class is_trivially_assignable:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_trivially_copy_assignable:public is_trivially_assignable<typename add_lvalue_reference<__xcodeml_template_type_0_0>::type,typename add_lvalue_reference<typename add_const<__xcodeml_template_type_0_0>::type>::type>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_trivially_move_assignable:public is_trivially_assignable<typename add_lvalue_reference<__xcodeml_template_type_0_0>::type,typename add_rvalue_reference<__xcodeml_template_type_0_0>::type>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_trivially_destructible:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>class is_nothrow_constructible:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_nothrow_default_constructible:public is_nothrow_constructible<__xcodeml_template_type_0_0>/*packsize0*/{}
;
;
template<typename __xcodeml_template_type_0_0>class is_nothrow_copy_constructible:public is_nothrow_constructible<__xcodeml_template_type_0_0,typename add_lvalue_reference<typename add_const<__xcodeml_template_type_0_0>::type>::type>/*packsize1*/{}
;
;
template<typename __xcodeml_template_type_0_0>class is_nothrow_move_constructible:public is_nothrow_constructible<__xcodeml_template_type_0_0,typename add_rvalue_reference<__xcodeml_template_type_0_0>::type>/*packsize1*/{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class is_nothrow_assignable:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_nothrow_copy_assignable:public is_nothrow_assignable<typename add_lvalue_reference<__xcodeml_template_type_0_0>::type,typename add_lvalue_reference<typename add_const<__xcodeml_template_type_0_0>::type>::type>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_nothrow_move_assignable:public is_nothrow_assignable<typename add_lvalue_reference<__xcodeml_template_type_0_0>::type,typename add_rvalue_reference<__xcodeml_template_type_0_0>::type>{}
;
;
template<bool,typename __xcodeml_template_type_0_1>class __libcpp_is_nothrow_destructible;
;
template<typename __xcodeml_template_type_0_0>class __libcpp_is_nothrow_destructible<0,__xcodeml_template_type_0_0>:public integral_constant<bool,0>{}
;
template<typename __xcodeml_template_type_0_0>class __libcpp_is_nothrow_destructible<1,__xcodeml_template_type_0_0>:public integral_constant<bool,expression>{}
;
template<typename __xcodeml_template_type_0_0>class is_nothrow_destructible:public __libcpp_is_nothrow_destructible<expression,__xcodeml_template_type_0_0>{}
;
;
template<typename __xcodeml_template_type_0_0,unsigned long _Ns>class is_nothrow_destructible<__xcodeml_template_type_0_0>:public is_nothrow_destructible<__xcodeml_template_type_0_0>{}
;
template<typename __xcodeml_template_type_0_0>class is_nothrow_destructible<__xcodeml_template_type_0_0&>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0>class is_nothrow_destructible<__xcodeml_template_type_0_0&& >:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0>class is_pod:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_literal_type:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_standard_layout:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_trivially_copyable:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_trivial:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class __is_reference_wrapper_impl:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class __is_reference_wrapper_impl<reference_wrapper<__xcodeml_template_type_0_0> >:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0>class __is_reference_wrapper:public __is_reference_wrapper_impl<typename remove_cv<__xcodeml_template_type_0_0>::type>{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3,typename __xcodeml_template_type_0_4>using __enable_if_bullet1=typename enable_if<expression,void>::type;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>using __enable_if_bullet2=typename enable_if<expression,void>::type;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3,typename __xcodeml_template_type_0_4>using __enable_if_bullet3=typename enable_if<expression,void>::type;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3,typename __xcodeml_template_type_0_4>using __enable_if_bullet4=typename enable_if<expression,void>::type;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>using __enable_if_bullet5=typename enable_if<expression,void>::type;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3,typename __xcodeml_template_type_0_4>using __enable_if_bullet6=typename enable_if<expression,void>::type;
template<typename...__xcodeml_template_type_0_0>class::std::__1::__nat __invoke(class::std::__1::__any,__xcodeml_template_type_0_0&& ...__args)
template<typename...__xcodeml_template_type_0_0>class::std::__1::__nat __invoke_constexpr(class::std::__1::__any,__xcodeml_template_type_0_0&& ...__args)
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>decltype ()__invoke(__xcodeml_template_type_0_0&& __f,__xcodeml_template_type_0_1&& __a0,__xcodeml_template_type_0_2&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(((std::__1::forward<__xcodeml_template_type_0_1>(__a0)).*__f)((std::__1::forward<__xcodeml_template_type_0_2...>(__args))...));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>decltype ()__invoke_constexpr(__xcodeml_template_type_0_0&& __f,__xcodeml_template_type_0_1&& __a0,__xcodeml_template_type_0_2&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(((std::__1::forward<__xcodeml_template_type_0_1>(__a0)).*__f)((std::__1::forward<__xcodeml_template_type_0_2...>(__args))...));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>decltype ()__invoke(__xcodeml_template_type_0_0&& __f,__xcodeml_template_type_0_1&& __a0,__xcodeml_template_type_0_2&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(((__a0.get()).*__f)((std::__1::forward<__xcodeml_template_type_0_2...>(__args))...));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>decltype ()__invoke_constexpr(__xcodeml_template_type_0_0&& __f,__xcodeml_template_type_0_1&& __a0,__xcodeml_template_type_0_2&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(((__a0.get()).*__f)((std::__1::forward<__xcodeml_template_type_0_2...>(__args))...));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>decltype ()__invoke(__xcodeml_template_type_0_0&& __f,__xcodeml_template_type_0_1&& __a0,__xcodeml_template_type_0_2&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(((*(std::__1::forward<__xcodeml_template_type_0_1>(__a0))).*__f)((std::__1::forward<__xcodeml_template_type_0_2...>(__args))...));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>decltype ()__invoke_constexpr(__xcodeml_template_type_0_0&& __f,__xcodeml_template_type_0_1&& __a0,__xcodeml_template_type_0_2&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(((*(std::__1::forward<__xcodeml_template_type_0_1>(__a0))).*__f)((std::__1::forward<__xcodeml_template_type_0_2...>(__args))...));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>decltype ()__invoke(__xcodeml_template_type_0_0&& __f,__xcodeml_template_type_0_1&& __a0)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((std::__1::forward<__xcodeml_template_type_0_1>(__a0)).*__f);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>decltype ()__invoke_constexpr(__xcodeml_template_type_0_0&& __f,__xcodeml_template_type_0_1&& __a0)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((std::__1::forward<__xcodeml_template_type_0_1>(__a0)).*__f);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>decltype ()__invoke(__xcodeml_template_type_0_0&& __f,__xcodeml_template_type_0_1&& __a0)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((__a0.get()).*__f);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>decltype ()__invoke_constexpr(__xcodeml_template_type_0_0&& __f,__xcodeml_template_type_0_1&& __a0)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((__a0.get()).*__f);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>decltype ()__invoke(__xcodeml_template_type_0_0&& __f,__xcodeml_template_type_0_1&& __a0)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((*(std::__1::forward<__xcodeml_template_type_0_1>(__a0))).*__f);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>decltype ()__invoke_constexpr(__xcodeml_template_type_0_0&& __f,__xcodeml_template_type_0_1&& __a0)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((*(std::__1::forward<__xcodeml_template_type_0_1>(__a0))).*__f);
}
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>decltype ()__invoke(__xcodeml_template_type_0_0&& __f,__xcodeml_template_type_0_1&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((std::__1::forward<__xcodeml_template_type_0_0>(__f))((std::__1::forward<__xcodeml_template_type_0_1...>(__args))...));
}
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>decltype ()__invoke_constexpr(__xcodeml_template_type_0_0&& __f,__xcodeml_template_type_0_1&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((std::__1::forward<__xcodeml_template_type_0_0>(__f))((std::__1::forward<__xcodeml_template_type_0_1...>(__args))...));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __invokable_r{public:template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1>static decltype ()__try_call(int)
public:template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1>static class::std::__1::__nat __try_call(...)
public:using _Result=decltype ();
public:using type=typename conditional<expression,typename conditional<expression,class::std::__1::integral_constant<bool,1>,is_convertible<decltype (),__xcodeml_template_type_0_0> >::type,class::std::__1::integral_constant<bool,0> >::type;
public:static bool const value=typename conditional<expression,typename conditional<expression,class::std::__1::integral_constant<bool,1>,is_convertible<decltype (),__xcodeml_template_type_0_0> >::type,class::std::__1::integral_constant<bool,0> >::type::value;
}
;
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>using __invokable=__invokable_r<void,__xcodeml_template_type_0_0,__xcodeml_template_type_0_1...>/*packsize1*/;
template<bool _IsInvokable,bool _IsCVVoid,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3,typename...__xcodeml_template_type_0_4>class __nothrow_invokable_r_imp{public:static bool const value=false;
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __nothrow_invokable_r_imp<1,0,__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/{public:typedef class __nothrow_invokable_r_imp<1,0,__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/_ThisT;
public:template<typename __xcodeml_template_type_1_0>static void __test_noexcept(__xcodeml_template_type_1_0)
public:static bool const value=noexcept((__nothrow_invokable_r_imp::__test_noexcept<__xcodeml_template_type_0_0>((std::__1::__invoke((std::__1::declval<__xcodeml_template_type_0_1>()),(std::__1::declval<__xcodeml_template_type_0_2...>())...)))));
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __nothrow_invokable_r_imp<1,1,__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/{public:static bool const value=noexcept((std::__1::__invoke((std::__1::declval<__xcodeml_template_type_0_1>()),(std::__1::declval<__xcodeml_template_type_0_2...>())...)));
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>using __nothrow_invokable_r=__nothrow_invokable_r_imp<expression,expression,__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>using __nothrow_invokable=__nothrow_invokable_r_imp<expression,1,void,__xcodeml_template_type_0_0,__xcodeml_template_type_0_1...>/*packsize1*/;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>class __invoke_of:public enable_if<expression,typename __invokable_r<void,__xcodeml_template_type_0_0,__xcodeml_template_type_0_1...>/*packsize1*/::_Result>{}
;
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>class result_of<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>:public __invoke_of<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1...>/*packsize1*/{}
;
template<typename __xcodeml_template_type_0_0>class __is_swappable;
;
template<typename __xcodeml_template_type_0_0>class __is_nothrow_swappable;
;
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,void>::type swap(__xcodeml_template_type_0_0&__x,__xcodeml_template_type_0_0&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{__xcodeml_template_type_0_0 __t=(std::__1::move(__x));
(__x=(std::__1::move(__y)));
(__y=(std::__1::move(__t)));
}
template<typename __xcodeml_template_type_0_0,unsigned long _Np>typename enable_if<expression,void>::type swap(__xcodeml_template_type_0_0&__a,__xcodeml_template_type_0_0&__b)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void iter_swap(__xcodeml_template_type_0_0 __a,__xcodeml_template_type_0_1 __b)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(swap((*__a),(*__b)));
}
namespace __detail{template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,bool _NotVoid=((!is_void<__xcodeml_template_type_0_0>::value)&&(!is_void<__xcodeml_template_type_0_1>::value))>class __swappable_with{public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>static decltype ()__test_swap(int)
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>static class::std::__1::__nat __test_swap(long)
public:typedef decltype ()__swap1;
public:typedef decltype ()__swap2;
public:static bool const value=(integral_constant<bool,expression>::value&&integral_constant<bool,expression>::value);
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __swappable_with<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,0>:public integral_constant<bool,0>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,bool _Swappable=__swappable_with<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,expression>::value>class __nothrow_swappable_with{public:static bool const value=(noexcept((swap((std::__1::declval<__xcodeml_template_type_0_0>()),(std::__1::declval<__xcodeml_template_type_0_1>()))))&&noexcept((swap((std::__1::declval<__xcodeml_template_type_0_1>()),(std::__1::declval<__xcodeml_template_type_0_0>())))));
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __nothrow_swappable_with<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,0>:public integral_constant<bool,0>{}
;
}
template<typename __xcodeml_template_type_0_0>class __is_swappable:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class __is_nothrow_swappable:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0,bool=is_enum<__xcodeml_template_type_0_0>::value>class __underlying_type_impl;
;
template<typename __xcodeml_template_type_0_0>class __underlying_type_impl<__xcodeml_template_type_0_0,0>{}
;
template<typename __xcodeml_template_type_0_0>class __underlying_type_impl<__xcodeml_template_type_0_0,1>{public:typedef __underlying_type(__xcodeml_template_type_0_0) type;
}
;
template<typename __xcodeml_template_type_0_0>class underlying_type:public __underlying_type_impl<__xcodeml_template_type_0_0,expression>{}
;
;
template<typename __xcodeml_template_type_0_0,bool=is_enum<__xcodeml_template_type_0_0>::value>class __sfinae_underlying_type{public:typedef typename underlying_type<__xcodeml_template_type_0_0>::type type;
public:typedef decltype ()__promoted_type;
}
;
;
template<typename __xcodeml_template_type_0_0>class __sfinae_underlying_type<__xcodeml_template_type_0_0,0>{}
;
int __convert_to_integral(int __val)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __val;
}
unsigned int __convert_to_integral(unsigned int __val)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __val;
}
long __convert_to_integral(long __val)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __val;
}
unsigned long __convert_to_integral(unsigned long __val)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __val;
}
long long __convert_to_integral(long long __val)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __val;
}
unsigned long long __convert_to_integral(unsigned long long __val)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __val;
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,long long>::type __convert_to_integral(__xcodeml_template_type_0_0 __val)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __val;
}
__int128 __convert_to_integral(__int128 __val)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __val;
}
unsigned __int128 __convert_to_integral(unsigned __int128 __val)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __val;
}
template<typename __xcodeml_template_type_0_0>typename __sfinae_underlying_type<__xcodeml_template_type_0_0,expression>::__promoted_type __convert_to_integral(__xcodeml_template_type_0_0 __val)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __val;
}
template<typename __xcodeml_template_type_0_0>class __has_operator_addressof_member_imp{public:template<typename __xcodeml_template_type_1_0>static typename __select_2nd<decltype (),class::std::__1::integral_constant<bool,1> >::type __test(int)
public:template<typename __xcodeml_template_type_1_0>static class::std::__1::integral_constant<bool,0>__test(long)
public:static bool const value=decltype ()::value;
}
;
;
template<typename __xcodeml_template_type_0_0>class __has_operator_addressof_free_imp{public:template<typename __xcodeml_template_type_1_0>static typename __select_2nd<decltype (),class::std::__1::integral_constant<bool,1> >::type __test(int)
public:template<typename __xcodeml_template_type_1_0>static class::std::__1::integral_constant<bool,0>__test(long)
public:static bool const value=decltype ()::value;
}
;
;
template<typename __xcodeml_template_type_0_0>class __has_operator_addressof:public integral_constant<bool,expression>{}
;
;
class __extract_key_fail_tag{}
;
class __extract_key_self_tag{}
;
class __extract_key_first_tag{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __can_extract_key:public typename conditional<expression,class::std::__1::__extract_key_self_tag,class::std::__1::__extract_key_fail_tag>::type{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>class __can_extract_key<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,pair<__xcodeml_template_type_0_2,__xcodeml_template_type_0_3> >:public typename conditional<expression,class::std::__1::__extract_key_first_tag,class::std::__1::__extract_key_fail_tag>::type{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>class __can_extract_map_key:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __can_extract_map_key<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>:public integral_constant<bool,0>{}
;
bool __libcpp_is_constant_evaluated(){return(__builtin_is_constant_evaluated());
}
template<typename __xcodeml_template_type_0_0>using _IsCharLikeType=/*DTS*/_MetaBase<expression>::template _AndImpl<is_standard_layout<__xcodeml_template_type_0_0>,is_trivial<__xcodeml_template_type_0_0> >;
constexpr bool const integral_constant::value;
constexpr bool const integral_constant::value;
constexpr unsigned long const integral_constant::value;
constexpr unsigned long const integral_constant::value;
constexpr unsigned long const integral_constant::value;
constexpr unsigned long const integral_constant::value;
}
}
namespace std{namespace __1{enum float_round_style{round_indeterminate=(-1),round_toward_zero=0,round_to_nearest=1,round_toward_infinity=2,round_toward_neg_infinity=3};
enum float_denorm_style{denorm_indeterminate=(-1),denorm_absent=0,denorm_present=1};
template<typename __xcodeml_template_type_0_0,bool=is_arithmetic<__xcodeml_template_type_0_0>::value>class __libcpp_numeric_limits{protected:
protected:typedef __xcodeml_template_type_0_0 type;
protected:constexpr static bool const is_specialized=false;
protected:static __xcodeml_template_type_0_0 min()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__xcodeml_template_type_0_0>::t();
}
protected:static __xcodeml_template_type_0_0 max()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__xcodeml_template_type_0_0>::t();
}
protected:static __xcodeml_template_type_0_0 lowest()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__xcodeml_template_type_0_0>::t();
}
protected:constexpr static int const digits=0;
protected:constexpr static int const digits10=0;
protected:constexpr static int const max_digits10=0;
protected:constexpr static bool const is_signed=false;
protected:constexpr static bool const is_integer=false;
protected:constexpr static bool const is_exact=false;
protected:constexpr static int const radix=0;
protected:static __xcodeml_template_type_0_0 epsilon()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__xcodeml_template_type_0_0>::t();
}
protected:static __xcodeml_template_type_0_0 round_error()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__xcodeml_template_type_0_0>::t();
}
protected:constexpr static int const min_exponent=0;
protected:constexpr static int const min_exponent10=0;
protected:constexpr static int const max_exponent=0;
protected:constexpr static int const max_exponent10=0;
protected:constexpr static bool const has_infinity=false;
protected:constexpr static bool const has_quiet_NaN=false;
protected:constexpr static bool const has_signaling_NaN=false;
protected:constexpr static enum float_denorm_style const has_denorm=denorm_absent;
protected:constexpr static bool const has_denorm_loss=false;
protected:static __xcodeml_template_type_0_0 infinity()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__xcodeml_template_type_0_0>::t();
}
protected:static __xcodeml_template_type_0_0 quiet_NaN()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__xcodeml_template_type_0_0>::t();
}
protected:static __xcodeml_template_type_0_0 signaling_NaN()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__xcodeml_template_type_0_0>::t();
}
protected:static __xcodeml_template_type_0_0 denorm_min()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__xcodeml_template_type_0_0>::t();
}
protected:constexpr static bool const is_iec559=false;
protected:constexpr static bool const is_bounded=false;
protected:constexpr static bool const is_modulo=false;
protected:constexpr static bool const traps=false;
protected:constexpr static bool const tinyness_before=false;
protected:constexpr static enum float_round_style const round_style=round_toward_zero;
}
;
;
template<typename __xcodeml_template_type_0_0,int __digits,bool _IsSigned>class __libcpp_compute_min{public:constexpr static __xcodeml_template_type_0_0 const value=__xcodeml_identity<__xcodeml_template_type_0_0>::t((__xcodeml_identity<__xcodeml_template_type_0_0>::t(1)<<__digits));
}
;
;
template<typename __xcodeml_template_type_0_0,int __digits>class __libcpp_compute_min<__xcodeml_template_type_0_0,expression,0>{public:constexpr static __xcodeml_template_type_0_0 const value=__xcodeml_identity<__xcodeml_template_type_0_0>::t(0);
}
;
template<typename __xcodeml_template_type_0_0>class __libcpp_numeric_limits<__xcodeml_template_type_0_0,1>{protected:
protected:typedef __xcodeml_template_type_0_0 type;
protected:constexpr static bool const is_specialized=true;
protected:constexpr static bool const is_signed=(__xcodeml_identity<__xcodeml_template_type_0_0>::t((-1))<__xcodeml_identity<__xcodeml_template_type_0_0>::t(0));
protected:constexpr static int const digits=static_cast<>((((sizeof(__xcodeml_template_type_0_0))*8)-is_signed));
protected:constexpr static int const digits10=((digits*3)/10);
protected:constexpr static int const max_digits10=0;
protected:constexpr static __xcodeml_template_type_0_0 const __min=__libcpp_compute_min<__xcodeml_template_type_0_0,expression,expression>::value;
protected:constexpr static __xcodeml_template_type_0_0 const __max=(is_signed?__xcodeml_identity<__xcodeml_template_type_0_0>::t((__xcodeml_identity<__xcodeml_template_type_0_0>::t((~0))^__min)):__xcodeml_identity<__xcodeml_template_type_0_0>::t((~0)));
protected:static __xcodeml_template_type_0_0 min()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __min;
}
protected:static __xcodeml_template_type_0_0 max()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __max;
}
protected:static __xcodeml_template_type_0_0 lowest()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(min());
}
protected:constexpr static bool const is_integer=true;
protected:constexpr static bool const is_exact=true;
protected:constexpr static int const radix=2;
protected:static __xcodeml_template_type_0_0 epsilon()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__xcodeml_template_type_0_0>::t(0);
}
protected:static __xcodeml_template_type_0_0 round_error()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__xcodeml_template_type_0_0>::t(0);
}
protected:constexpr static int const min_exponent=0;
protected:constexpr static int const min_exponent10=0;
protected:constexpr static int const max_exponent=0;
protected:constexpr static int const max_exponent10=0;
protected:constexpr static bool const has_infinity=false;
protected:constexpr static bool const has_quiet_NaN=false;
protected:constexpr static bool const has_signaling_NaN=false;
protected:constexpr static enum float_denorm_style const has_denorm=denorm_absent;
protected:constexpr static bool const has_denorm_loss=false;
protected:static __xcodeml_template_type_0_0 infinity()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__xcodeml_template_type_0_0>::t(0);
}
protected:static __xcodeml_template_type_0_0 quiet_NaN()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__xcodeml_template_type_0_0>::t(0);
}
protected:static __xcodeml_template_type_0_0 signaling_NaN()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__xcodeml_template_type_0_0>::t(0);
}
protected:static __xcodeml_template_type_0_0 denorm_min()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__xcodeml_template_type_0_0>::t(0);
}
protected:constexpr static bool const is_iec559=false;
protected:constexpr static bool const is_bounded=true;
protected:constexpr static bool const is_modulo=(!std::__1::is_signed<__xcodeml_template_type_0_0>::value);
protected:constexpr static bool const traps=true;
protected:constexpr static bool const tinyness_before=false;
protected:constexpr static enum float_round_style const round_style=round_toward_zero;
}
;
template<>class __libcpp_numeric_limits<bool,1>{protected:
protected:typedef bool type;
protected:constexpr static bool const is_specialized=true;
protected:constexpr static bool const is_signed=false;
protected:constexpr static int const digits=1;
protected:constexpr static int const digits10=0;
protected:constexpr static int const max_digits10=0;
protected:constexpr static bool const __min=false;
protected:constexpr static bool const __max=true;
protected:static bool min()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __min;
}
protected:static bool max()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __max;
}
protected:static bool lowest()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(min());
}
protected:constexpr static bool const is_integer=true;
protected:constexpr static bool const is_exact=true;
protected:constexpr static int const radix=2;
protected:static bool epsilon()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((bool)0);
}
protected:static bool round_error()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((bool)0);
}
protected:constexpr static int const min_exponent=0;
protected:constexpr static int const min_exponent10=0;
protected:constexpr static int const max_exponent=0;
protected:constexpr static int const max_exponent10=0;
protected:constexpr static bool const has_infinity=false;
protected:constexpr static bool const has_quiet_NaN=false;
protected:constexpr static bool const has_signaling_NaN=false;
protected:constexpr static enum float_denorm_style const has_denorm=denorm_absent;
protected:constexpr static bool const has_denorm_loss=false;
protected:static bool infinity()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((bool)0);
}
protected:static bool quiet_NaN()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((bool)0);
}
protected:static bool signaling_NaN()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((bool)0);
}
protected:static bool denorm_min()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((bool)0);
}
protected:constexpr static bool const is_iec559=false;
protected:constexpr static bool const is_bounded=true;
protected:constexpr static bool const is_modulo=false;
protected:constexpr static bool const traps=false;
protected:constexpr static bool const tinyness_before=false;
protected:constexpr static enum float_round_style const round_style=round_toward_zero;
}
;
template<>class __libcpp_numeric_limits<float,1>{protected:
protected:typedef float type;
protected:constexpr static bool const is_specialized=true;
protected:constexpr static bool const is_signed=true;
protected:constexpr static int const digits=24;
protected:constexpr static int const digits10=6;
protected:constexpr static int const max_digits10=(2+((digits*30103l)/100000l));
protected:static float min()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return;
}
protected:static float max()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return;
}
protected:static float lowest()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(-(max()));
}
protected:constexpr static bool const is_integer=false;
protected:constexpr static bool const is_exact=false;
protected:constexpr static int const radix=2;
protected:static float epsilon()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return;
}
protected:static float round_error()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return 0.5F;
}
protected:constexpr static int const min_exponent=(-125);
protected:constexpr static int const min_exponent10=(-37);
protected:constexpr static int const max_exponent=128;
protected:constexpr static int const max_exponent10=38;
protected:constexpr static bool const has_infinity=true;
protected:constexpr static bool const has_quiet_NaN=true;
protected:constexpr static bool const has_signaling_NaN=true;
protected:constexpr static enum float_denorm_style const has_denorm=denorm_present;
protected:constexpr static bool const has_denorm_loss=false;
protected:static float infinity()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_huge_valf());
}
protected:static float quiet_NaN()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_nanf(""));
}
protected:static float signaling_NaN()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_nansf(""));
}
protected:static float denorm_min()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return;
}
protected:constexpr static bool const is_iec559=true;
protected:constexpr static bool const is_bounded=true;
protected:constexpr static bool const is_modulo=false;
protected:constexpr static bool const traps=false;
protected:constexpr static bool const tinyness_before=false;
protected:constexpr static enum float_round_style const round_style=round_to_nearest;
}
;
template<>class __libcpp_numeric_limits<double,1>{protected:
protected:typedef double type;
protected:constexpr static bool const is_specialized=true;
protected:constexpr static bool const is_signed=true;
protected:constexpr static int const digits=53;
protected:constexpr static int const digits10=15;
protected:constexpr static int const max_digits10=(2+((digits*30103l)/100000l));
protected:static double min()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return;
}
protected:static double max()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return;
}
protected:static double lowest()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(-(max()));
}
protected:constexpr static bool const is_integer=false;
protected:constexpr static bool const is_exact=false;
protected:constexpr static int const radix=2;
protected:static double epsilon()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return;
}
protected:static double round_error()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return 0.5;
}
protected:constexpr static int const min_exponent=(-1021);
protected:constexpr static int const min_exponent10=(-307);
protected:constexpr static int const max_exponent=1024;
protected:constexpr static int const max_exponent10=308;
protected:constexpr static bool const has_infinity=true;
protected:constexpr static bool const has_quiet_NaN=true;
protected:constexpr static bool const has_signaling_NaN=true;
protected:constexpr static enum float_denorm_style const has_denorm=denorm_present;
protected:constexpr static bool const has_denorm_loss=false;
protected:static double infinity()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_huge_val());
}
protected:static double quiet_NaN()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_nan(""));
}
protected:static double signaling_NaN()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_nans(""));
}
protected:static double denorm_min()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return;
}
protected:constexpr static bool const is_iec559=true;
protected:constexpr static bool const is_bounded=true;
protected:constexpr static bool const is_modulo=false;
protected:constexpr static bool const traps=false;
protected:constexpr static bool const tinyness_before=false;
protected:constexpr static enum float_round_style const round_style=round_to_nearest;
}
;
template<>class __libcpp_numeric_limits<long double,1>{protected:
protected:typedef long double type;
protected:constexpr static bool const is_specialized=true;
protected:constexpr static bool const is_signed=true;
protected:constexpr static int const digits=64;
protected:constexpr static int const digits10=18;
protected:constexpr static int const max_digits10=(2+((digits*30103l)/100000l));
protected:static long double min()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return;
}
protected:static long double max()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return;
}
protected:static long double lowest()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(-(max()));
}
protected:constexpr static bool const is_integer=false;
protected:constexpr static bool const is_exact=false;
protected:constexpr static int const radix=2;
protected:static long double epsilon()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return;
}
protected:static long double round_error()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return 0.5L;
}
protected:constexpr static int const min_exponent=(-16381);
protected:constexpr static int const min_exponent10=(-4931);
protected:constexpr static int const max_exponent=16384;
protected:constexpr static int const max_exponent10=4932;
protected:constexpr static bool const has_infinity=true;
protected:constexpr static bool const has_quiet_NaN=true;
protected:constexpr static bool const has_signaling_NaN=true;
protected:constexpr static enum float_denorm_style const has_denorm=denorm_present;
protected:constexpr static bool const has_denorm_loss=false;
protected:static long double infinity()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_huge_vall());
}
protected:static long double quiet_NaN()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_nanl(""));
}
protected:static long double signaling_NaN()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_nansl(""));
}
protected:static long double denorm_min()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return;
}
protected:constexpr static bool const is_iec559=true;
protected:constexpr static bool const is_bounded=true;
protected:constexpr static bool const is_modulo=false;
protected:constexpr static bool const traps=false;
protected:constexpr static bool const tinyness_before=false;
protected:constexpr static enum float_round_style const round_style=round_to_nearest;
}
;
template<typename __xcodeml_template_type_0_0>class numeric_limits:private __libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>{private:typedef __libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>__base;
private:typedef typename __libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::type type;
public:
public:constexpr static bool const is_specialized=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::is_specialized;
public:static typename __libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::type min()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::min());
}
public:static typename __libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::type max()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::max());
}
public:static typename __libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::type lowest()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::lowest());
}
public:constexpr static int const digits=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::digits;
public:constexpr static int const digits10=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::digits10;
public:constexpr static int const max_digits10=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::max_digits10;
public:constexpr static bool const is_signed=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::is_signed;
public:constexpr static bool const is_integer=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::is_integer;
public:constexpr static bool const is_exact=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::is_exact;
public:constexpr static int const radix=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::radix;
public:static typename __libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::type epsilon()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::epsilon());
}
public:static typename __libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::type round_error()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::round_error());
}
public:constexpr static int const min_exponent=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::min_exponent;
public:constexpr static int const min_exponent10=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::min_exponent10;
public:constexpr static int const max_exponent=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::max_exponent;
public:constexpr static int const max_exponent10=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::max_exponent10;
public:constexpr static bool const has_infinity=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::has_infinity;
public:constexpr static bool const has_quiet_NaN=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::has_quiet_NaN;
public:constexpr static bool const has_signaling_NaN=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::has_signaling_NaN;
public:constexpr static enum float_denorm_style const has_denorm=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::has_denorm;
public:constexpr static bool const has_denorm_loss=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::has_denorm_loss;
public:static typename __libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::type infinity()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::infinity());
}
public:static typename __libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::type quiet_NaN()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::quiet_NaN());
}
public:static typename __libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::type signaling_NaN()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::signaling_NaN());
}
public:static typename __libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::type denorm_min()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::denorm_min());
}
public:constexpr static bool const is_iec559=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::is_iec559;
public:constexpr static bool const is_bounded=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::is_bounded;
public:constexpr static bool const is_modulo=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::is_modulo;
public:constexpr static bool const traps=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::traps;
public:constexpr static bool const tinyness_before=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::tinyness_before;
public:constexpr static enum float_round_style const round_style=__libcpp_numeric_limits<typename remove_cv<__xcodeml_template_type_0_0>::type,expression>::round_style;
}
;
;
constexpr bool const numeric_limits::is_specialized;
constexpr int const numeric_limits::digits;
constexpr int const numeric_limits::digits10;
constexpr int const numeric_limits::max_digits10;
constexpr bool const numeric_limits::is_signed;
constexpr bool const numeric_limits::is_integer;
constexpr bool const numeric_limits::is_exact;
constexpr int const numeric_limits::radix;
constexpr int const numeric_limits::min_exponent;
constexpr int const numeric_limits::min_exponent10;
constexpr int const numeric_limits::max_exponent;
constexpr int const numeric_limits::max_exponent10;
constexpr bool const numeric_limits::has_infinity;
constexpr bool const numeric_limits::has_quiet_NaN;
constexpr bool const numeric_limits::has_signaling_NaN;
constexpr enum float_denorm_style const numeric_limits::has_denorm;
constexpr bool const numeric_limits::has_denorm_loss;
constexpr bool const numeric_limits::is_iec559;
constexpr bool const numeric_limits::is_bounded;
constexpr bool const numeric_limits::is_modulo;
constexpr bool const numeric_limits::traps;
constexpr bool const numeric_limits::tinyness_before;
constexpr enum float_round_style const numeric_limits::round_style;
template<typename __xcodeml_template_type_0_0>class numeric_limits<__xcodeml_template_type_0_0 const>:private numeric_limits<__xcodeml_template_type_0_0>{private:typedef numeric_limits<__xcodeml_template_type_0_0>__base;
private:typedef __xcodeml_template_type_0_0 type;
public:
public:constexpr static bool const is_specialized=numeric_limits<__xcodeml_template_type_0_0>::is_specialized;
public:static __xcodeml_template_type_0_0 min()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::min());
}
public:static __xcodeml_template_type_0_0 max()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::max());
}
public:static __xcodeml_template_type_0_0 lowest()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::lowest());
}
public:constexpr static int const digits=numeric_limits<__xcodeml_template_type_0_0>::digits;
public:constexpr static int const digits10=numeric_limits<__xcodeml_template_type_0_0>::digits10;
public:constexpr static int const max_digits10=numeric_limits<__xcodeml_template_type_0_0>::max_digits10;
public:constexpr static bool const is_signed=numeric_limits<__xcodeml_template_type_0_0>::is_signed;
public:constexpr static bool const is_integer=numeric_limits<__xcodeml_template_type_0_0>::is_integer;
public:constexpr static bool const is_exact=numeric_limits<__xcodeml_template_type_0_0>::is_exact;
public:constexpr static int const radix=numeric_limits<__xcodeml_template_type_0_0>::radix;
public:static __xcodeml_template_type_0_0 epsilon()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::epsilon());
}
public:static __xcodeml_template_type_0_0 round_error()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::round_error());
}
public:constexpr static int const min_exponent=numeric_limits<__xcodeml_template_type_0_0>::min_exponent;
public:constexpr static int const min_exponent10=numeric_limits<__xcodeml_template_type_0_0>::min_exponent10;
public:constexpr static int const max_exponent=numeric_limits<__xcodeml_template_type_0_0>::max_exponent;
public:constexpr static int const max_exponent10=numeric_limits<__xcodeml_template_type_0_0>::max_exponent10;
public:constexpr static bool const has_infinity=numeric_limits<__xcodeml_template_type_0_0>::has_infinity;
public:constexpr static bool const has_quiet_NaN=numeric_limits<__xcodeml_template_type_0_0>::has_quiet_NaN;
public:constexpr static bool const has_signaling_NaN=numeric_limits<__xcodeml_template_type_0_0>::has_signaling_NaN;
public:constexpr static enum float_denorm_style const has_denorm=numeric_limits<__xcodeml_template_type_0_0>::has_denorm;
public:constexpr static bool const has_denorm_loss=numeric_limits<__xcodeml_template_type_0_0>::has_denorm_loss;
public:static __xcodeml_template_type_0_0 infinity()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::infinity());
}
public:static __xcodeml_template_type_0_0 quiet_NaN()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::quiet_NaN());
}
public:static __xcodeml_template_type_0_0 signaling_NaN()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::signaling_NaN());
}
public:static __xcodeml_template_type_0_0 denorm_min()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::denorm_min());
}
public:constexpr static bool const is_iec559=numeric_limits<__xcodeml_template_type_0_0>::is_iec559;
public:constexpr static bool const is_bounded=numeric_limits<__xcodeml_template_type_0_0>::is_bounded;
public:constexpr static bool const is_modulo=numeric_limits<__xcodeml_template_type_0_0>::is_modulo;
public:constexpr static bool const traps=numeric_limits<__xcodeml_template_type_0_0>::traps;
public:constexpr static bool const tinyness_before=numeric_limits<__xcodeml_template_type_0_0>::tinyness_before;
public:constexpr static enum float_round_style const round_style=numeric_limits<__xcodeml_template_type_0_0>::round_style;
}
;
constexpr bool const numeric_limits::is_specialized;
constexpr int const numeric_limits::digits;
constexpr int const numeric_limits::digits10;
constexpr int const numeric_limits::max_digits10;
constexpr bool const numeric_limits::is_signed;
constexpr bool const numeric_limits::is_integer;
constexpr bool const numeric_limits::is_exact;
constexpr int const numeric_limits::radix;
constexpr int const numeric_limits::min_exponent;
constexpr int const numeric_limits::min_exponent10;
constexpr int const numeric_limits::max_exponent;
constexpr int const numeric_limits::max_exponent10;
constexpr bool const numeric_limits::has_infinity;
constexpr bool const numeric_limits::has_quiet_NaN;
constexpr bool const numeric_limits::has_signaling_NaN;
constexpr enum float_denorm_style const numeric_limits::has_denorm;
constexpr bool const numeric_limits::has_denorm_loss;
constexpr bool const numeric_limits::is_iec559;
constexpr bool const numeric_limits::is_bounded;
constexpr bool const numeric_limits::is_modulo;
constexpr bool const numeric_limits::traps;
constexpr bool const numeric_limits::tinyness_before;
constexpr enum float_round_style const numeric_limits::round_style;
template<typename __xcodeml_template_type_0_0>class numeric_limits<__xcodeml_template_type_0_0 volatile>:private numeric_limits<__xcodeml_template_type_0_0>{private:typedef numeric_limits<__xcodeml_template_type_0_0>__base;
private:typedef __xcodeml_template_type_0_0 type;
public:
public:constexpr static bool const is_specialized=numeric_limits<__xcodeml_template_type_0_0>::is_specialized;
public:static __xcodeml_template_type_0_0 min()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::min());
}
public:static __xcodeml_template_type_0_0 max()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::max());
}
public:static __xcodeml_template_type_0_0 lowest()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::lowest());
}
public:constexpr static int const digits=numeric_limits<__xcodeml_template_type_0_0>::digits;
public:constexpr static int const digits10=numeric_limits<__xcodeml_template_type_0_0>::digits10;
public:constexpr static int const max_digits10=numeric_limits<__xcodeml_template_type_0_0>::max_digits10;
public:constexpr static bool const is_signed=numeric_limits<__xcodeml_template_type_0_0>::is_signed;
public:constexpr static bool const is_integer=numeric_limits<__xcodeml_template_type_0_0>::is_integer;
public:constexpr static bool const is_exact=numeric_limits<__xcodeml_template_type_0_0>::is_exact;
public:constexpr static int const radix=numeric_limits<__xcodeml_template_type_0_0>::radix;
public:static __xcodeml_template_type_0_0 epsilon()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::epsilon());
}
public:static __xcodeml_template_type_0_0 round_error()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::round_error());
}
public:constexpr static int const min_exponent=numeric_limits<__xcodeml_template_type_0_0>::min_exponent;
public:constexpr static int const min_exponent10=numeric_limits<__xcodeml_template_type_0_0>::min_exponent10;
public:constexpr static int const max_exponent=numeric_limits<__xcodeml_template_type_0_0>::max_exponent;
public:constexpr static int const max_exponent10=numeric_limits<__xcodeml_template_type_0_0>::max_exponent10;
public:constexpr static bool const has_infinity=numeric_limits<__xcodeml_template_type_0_0>::has_infinity;
public:constexpr static bool const has_quiet_NaN=numeric_limits<__xcodeml_template_type_0_0>::has_quiet_NaN;
public:constexpr static bool const has_signaling_NaN=numeric_limits<__xcodeml_template_type_0_0>::has_signaling_NaN;
public:constexpr static enum float_denorm_style const has_denorm=numeric_limits<__xcodeml_template_type_0_0>::has_denorm;
public:constexpr static bool const has_denorm_loss=numeric_limits<__xcodeml_template_type_0_0>::has_denorm_loss;
public:static __xcodeml_template_type_0_0 infinity()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::infinity());
}
public:static __xcodeml_template_type_0_0 quiet_NaN()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::quiet_NaN());
}
public:static __xcodeml_template_type_0_0 signaling_NaN()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::signaling_NaN());
}
public:static __xcodeml_template_type_0_0 denorm_min()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::denorm_min());
}
public:constexpr static bool const is_iec559=numeric_limits<__xcodeml_template_type_0_0>::is_iec559;
public:constexpr static bool const is_bounded=numeric_limits<__xcodeml_template_type_0_0>::is_bounded;
public:constexpr static bool const is_modulo=numeric_limits<__xcodeml_template_type_0_0>::is_modulo;
public:constexpr static bool const traps=numeric_limits<__xcodeml_template_type_0_0>::traps;
public:constexpr static bool const tinyness_before=numeric_limits<__xcodeml_template_type_0_0>::tinyness_before;
public:constexpr static enum float_round_style const round_style=numeric_limits<__xcodeml_template_type_0_0>::round_style;
}
;
constexpr bool const numeric_limits::is_specialized;
constexpr int const numeric_limits::digits;
constexpr int const numeric_limits::digits10;
constexpr int const numeric_limits::max_digits10;
constexpr bool const numeric_limits::is_signed;
constexpr bool const numeric_limits::is_integer;
constexpr bool const numeric_limits::is_exact;
constexpr int const numeric_limits::radix;
constexpr int const numeric_limits::min_exponent;
constexpr int const numeric_limits::min_exponent10;
constexpr int const numeric_limits::max_exponent;
constexpr int const numeric_limits::max_exponent10;
constexpr bool const numeric_limits::has_infinity;
constexpr bool const numeric_limits::has_quiet_NaN;
constexpr bool const numeric_limits::has_signaling_NaN;
constexpr enum float_denorm_style const numeric_limits::has_denorm;
constexpr bool const numeric_limits::has_denorm_loss;
constexpr bool const numeric_limits::is_iec559;
constexpr bool const numeric_limits::is_bounded;
constexpr bool const numeric_limits::is_modulo;
constexpr bool const numeric_limits::traps;
constexpr bool const numeric_limits::tinyness_before;
constexpr enum float_round_style const numeric_limits::round_style;
template<typename __xcodeml_template_type_0_0>class numeric_limits<__xcodeml_template_type_0_0 volatile const>:private numeric_limits<__xcodeml_template_type_0_0>{private:typedef numeric_limits<__xcodeml_template_type_0_0>__base;
private:typedef __xcodeml_template_type_0_0 type;
public:
public:constexpr static bool const is_specialized=numeric_limits<__xcodeml_template_type_0_0>::is_specialized;
public:static __xcodeml_template_type_0_0 min()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::min());
}
public:static __xcodeml_template_type_0_0 max()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::max());
}
public:static __xcodeml_template_type_0_0 lowest()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::lowest());
}
public:constexpr static int const digits=numeric_limits<__xcodeml_template_type_0_0>::digits;
public:constexpr static int const digits10=numeric_limits<__xcodeml_template_type_0_0>::digits10;
public:constexpr static int const max_digits10=numeric_limits<__xcodeml_template_type_0_0>::max_digits10;
public:constexpr static bool const is_signed=numeric_limits<__xcodeml_template_type_0_0>::is_signed;
public:constexpr static bool const is_integer=numeric_limits<__xcodeml_template_type_0_0>::is_integer;
public:constexpr static bool const is_exact=numeric_limits<__xcodeml_template_type_0_0>::is_exact;
public:constexpr static int const radix=numeric_limits<__xcodeml_template_type_0_0>::radix;
public:static __xcodeml_template_type_0_0 epsilon()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::epsilon());
}
public:static __xcodeml_template_type_0_0 round_error()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::round_error());
}
public:constexpr static int const min_exponent=numeric_limits<__xcodeml_template_type_0_0>::min_exponent;
public:constexpr static int const min_exponent10=numeric_limits<__xcodeml_template_type_0_0>::min_exponent10;
public:constexpr static int const max_exponent=numeric_limits<__xcodeml_template_type_0_0>::max_exponent;
public:constexpr static int const max_exponent10=numeric_limits<__xcodeml_template_type_0_0>::max_exponent10;
public:constexpr static bool const has_infinity=numeric_limits<__xcodeml_template_type_0_0>::has_infinity;
public:constexpr static bool const has_quiet_NaN=numeric_limits<__xcodeml_template_type_0_0>::has_quiet_NaN;
public:constexpr static bool const has_signaling_NaN=numeric_limits<__xcodeml_template_type_0_0>::has_signaling_NaN;
public:constexpr static enum float_denorm_style const has_denorm=numeric_limits<__xcodeml_template_type_0_0>::has_denorm;
public:constexpr static bool const has_denorm_loss=numeric_limits<__xcodeml_template_type_0_0>::has_denorm_loss;
public:static __xcodeml_template_type_0_0 infinity()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::infinity());
}
public:static __xcodeml_template_type_0_0 quiet_NaN()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::quiet_NaN());
}
public:static __xcodeml_template_type_0_0 signaling_NaN()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::signaling_NaN());
}
public:static __xcodeml_template_type_0_0 denorm_min()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(numeric_limits<__xcodeml_template_type_0_0>::denorm_min());
}
public:constexpr static bool const is_iec559=numeric_limits<__xcodeml_template_type_0_0>::is_iec559;
public:constexpr static bool const is_bounded=numeric_limits<__xcodeml_template_type_0_0>::is_bounded;
public:constexpr static bool const is_modulo=numeric_limits<__xcodeml_template_type_0_0>::is_modulo;
public:constexpr static bool const traps=numeric_limits<__xcodeml_template_type_0_0>::traps;
public:constexpr static bool const tinyness_before=numeric_limits<__xcodeml_template_type_0_0>::tinyness_before;
public:constexpr static enum float_round_style const round_style=numeric_limits<__xcodeml_template_type_0_0>::round_style;
}
;
constexpr bool const numeric_limits::is_specialized;
constexpr int const numeric_limits::digits;
constexpr int const numeric_limits::digits10;
constexpr int const numeric_limits::max_digits10;
constexpr bool const numeric_limits::is_signed;
constexpr bool const numeric_limits::is_integer;
constexpr bool const numeric_limits::is_exact;
constexpr int const numeric_limits::radix;
constexpr int const numeric_limits::min_exponent;
constexpr int const numeric_limits::min_exponent10;
constexpr int const numeric_limits::max_exponent;
constexpr int const numeric_limits::max_exponent10;
constexpr bool const numeric_limits::has_infinity;
constexpr bool const numeric_limits::has_quiet_NaN;
constexpr bool const numeric_limits::has_signaling_NaN;
constexpr enum float_denorm_style const numeric_limits::has_denorm;
constexpr bool const numeric_limits::has_denorm_loss;
constexpr bool const numeric_limits::is_iec559;
constexpr bool const numeric_limits::is_bounded;
constexpr bool const numeric_limits::is_modulo;
constexpr bool const numeric_limits::traps;
constexpr bool const numeric_limits::tinyness_before;
constexpr enum float_round_style const numeric_limits::round_style;
constexpr int const numeric_limits::digits;
constexpr int const numeric_limits::digits;
constexpr int const numeric_limits::digits;
}
}
namespace std{namespace __1{class __libcpp_debug_info{public:__libcpp_debug_info():__file_(nullptr),__line_((-1)),__pred_(nullptr),__msg_(nullptr)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__libcpp_debug_info(char const(*__f),int __l,char const(*__p),char const(*__m)):__file_(__f),__line_(__l),__pred_(__p),__msg_(__m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:class::std::__1::basic_string<char,class::std::__1::char_traits<char>,class::std::__1::allocator<char> >what()const;
public:char const(*__file_);
public:int __line_;
public:char const(*__pred_);
public:char const(*__msg_);
}
;
typedef void(*__libcpp_debug_function_type)(class __libcpp_debug_info const&);
extern void(*__libcpp_debug_function)(class __libcpp_debug_info const&);
void __libcpp_abort_debug_function(class __libcpp_debug_info const&)/*gccattr noreturn:*//*gccattr visibility:*/;
bool __libcpp_set_debug_function(void(*__func)(class __libcpp_debug_info const&))/*gccattr visibility:*/;
}
}
namespace std{namespace __1{int __libcpp_ctz(unsigned int __x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_ctz(__x));
}
int __libcpp_ctz(unsigned long __x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_ctzl(__x));
}
int __libcpp_ctz(unsigned long long __x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_ctzll(__x));
}
int __libcpp_clz(unsigned int __x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_clz(__x));
}
int __libcpp_clz(unsigned long __x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_clzl(__x));
}
int __libcpp_clz(unsigned long long __x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_clzll(__x));
}
int __libcpp_popcount(unsigned int __x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_popcount(__x));
}
int __libcpp_popcount(unsigned long __x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_popcountl(__x));
}
int __libcpp_popcount(unsigned long long __x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_popcountll(__x));
}
template<typename __xcodeml_template_type_0_0>using __bitop_unsigned_integer=integral_constant<bool,expression>;
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __rotl(__xcodeml_template_type_0_0 __t,unsigned int __cnt)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert(integral_constant<bool,expression>::value,"__rotl requires unsigned");
unsigned int const __dig=numeric_limits<__xcodeml_template_type_0_0>::digits;
if(((__cnt%__dig)==0)){return __t;};
return((__t<<(__cnt%__dig))|(__t>>(__dig-(__cnt%__dig))));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __rotr(__xcodeml_template_type_0_0 __t,unsigned int __cnt)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert(integral_constant<bool,expression>::value,"__rotr requires unsigned");
unsigned int const __dig=numeric_limits<__xcodeml_template_type_0_0>::digits;
if(((__cnt%__dig)==0)){return __t;};
return((__t>>(__cnt%__dig))|(__t<<(__dig-(__cnt%__dig))));
}
template<typename __xcodeml_template_type_0_0>int __countr_zero(__xcodeml_template_type_0_0 __t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert(integral_constant<bool,expression>::value,"__countr_zero requires unsigned");
if((__t==0)){return numeric_limits<__xcodeml_template_type_0_0>::digits;};
if(((sizeof(__xcodeml_template_type_0_0))<=(sizeof(unsigned int)))){return(__libcpp_ctz(static_cast<unsigned int>(__t)));}else{if(((sizeof(__xcodeml_template_type_0_0))<=(sizeof(unsigned long)))){return(__libcpp_ctz(static_cast<unsigned long>(__t)));}else{if(((sizeof(__xcodeml_template_type_0_0))<=(sizeof(unsigned long long)))){return(__libcpp_ctz(static_cast<unsigned long long>(__t)));}else{{int __ret=0;
int __iter=0;
unsigned int const __ulldigits=numeric_limits::digits;
while(((__iter=(__libcpp_ctz(static_cast<unsigned long long>(__t))))==__ulldigits)){{(__ret+=__iter);
(__t>>=__ulldigits);
};};
return(__ret+__iter);
};};};};
}
template<typename __xcodeml_template_type_0_0>int __countl_zero(__xcodeml_template_type_0_0 __t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert(integral_constant<bool,expression>::value,"__countl_zero requires unsigned");
if((__t==0)){return numeric_limits<__xcodeml_template_type_0_0>::digits;};
if(((sizeof(__xcodeml_template_type_0_0))<=(sizeof(unsigned int)))){return((__libcpp_clz(static_cast<unsigned int>(__t)))-(numeric_limits::digits-numeric_limits<__xcodeml_template_type_0_0>::digits));}else{if(((sizeof(__xcodeml_template_type_0_0))<=(sizeof(unsigned long)))){return((__libcpp_clz(static_cast<unsigned long>(__t)))-(numeric_limits::digits-numeric_limits<__xcodeml_template_type_0_0>::digits));}else{if(((sizeof(__xcodeml_template_type_0_0))<=(sizeof(unsigned long long)))){return((__libcpp_clz(static_cast<unsigned long long>(__t)))-(numeric_limits::digits-numeric_limits<__xcodeml_template_type_0_0>::digits));}else{{int __ret=0;
int __iter=0;
unsigned int const __ulldigits=numeric_limits::digits;
while(true){{(__t=(__rotr(__t,__ulldigits)));
if(((__iter=(__countl_zero(static_cast<unsigned long long>(__t))))!=__ulldigits)){break;};
(__ret+=__iter);
};};
return(__ret+__iter);
};};};};
}
template<typename __xcodeml_template_type_0_0>int __countl_one(__xcodeml_template_type_0_0 __t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert(integral_constant<bool,expression>::value,"__countl_one requires unsigned");
return((__t!=(numeric_limits<__xcodeml_template_type_0_0>::max()))?(__countl_zero(static_cast<__xcodeml_template_type_0_0>((~__t)))):numeric_limits<__xcodeml_template_type_0_0>::digits);
}
template<typename __xcodeml_template_type_0_0>int __countr_one(__xcodeml_template_type_0_0 __t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert(integral_constant<bool,expression>::value,"__countr_one requires unsigned");
return((__t!=(numeric_limits<__xcodeml_template_type_0_0>::max()))?(__countr_zero(static_cast<__xcodeml_template_type_0_0>((~__t)))):numeric_limits<__xcodeml_template_type_0_0>::digits);
}
template<typename __xcodeml_template_type_0_0>int __popcount(__xcodeml_template_type_0_0 __t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert(integral_constant<bool,expression>::value,"__libcpp_popcount requires unsigned");
if(((sizeof(__xcodeml_template_type_0_0))<=(sizeof(unsigned int)))){return(__libcpp_popcount(static_cast<unsigned int>(__t)));}else{if(((sizeof(__xcodeml_template_type_0_0))<=(sizeof(unsigned long)))){return(__libcpp_popcount(static_cast<unsigned long>(__t)));}else{if(((sizeof(__xcodeml_template_type_0_0))<=(sizeof(unsigned long long)))){return(__libcpp_popcount(static_cast<unsigned long long>(__t)));}else{{int __ret=0;
while((__t!=0)){{(__ret+=(__libcpp_popcount(static_cast<unsigned long long>(__t))));
(__t>>=numeric_limits::digits);
};};
return __ret;
};};};};
}
template<typename __xcodeml_template_type_0_0>unsigned int __bit_log2(__xcodeml_template_type_0_0 __t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert(integral_constant<bool,expression>::value,"__bit_log2 requires unsigned");
return((std::numeric_limits<__xcodeml_template_type_0_0>::digits-1)-(__countl_zero(__t)));
}
template<typename __xcodeml_template_type_0_0>bool __ispow2(__xcodeml_template_type_0_0 __t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert(integral_constant<bool,expression>::value,"__ispow2 requires unsigned");
return((__t!=0)&&((__t&(__t-1))==0));
}
}
}
namespace std{template<typename __xcodeml_template_type_0_0>class initializer_list{private:__xcodeml_template_type_0_0 const(*__begin_);
private:unsigned long __size_;
private:initializer_list(__xcodeml_template_type_0_0 const(*__b),unsigned long __s):__begin_(__b),__size_(__s)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:
public:typedef __xcodeml_template_type_0_0 value_type;
public:typedef __xcodeml_template_type_0_0 const&reference;
public:typedef __xcodeml_template_type_0_0 const&const_reference;
public:typedef unsigned long size_type;
public:typedef __xcodeml_template_type_0_0 const(*iterator);
public:typedef __xcodeml_template_type_0_0 const(*const_iterator);
public:initializer_list():__begin_(nullptr),__size_(0)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:unsigned long size()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__size_;
}
public:__xcodeml_template_type_0_0 const(*begin()const)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__begin_;
}
public:__xcodeml_template_type_0_0 const(*end()const)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__begin_+this->__size_);
}
}
;
;
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 const(*begin(initializer_list<__xcodeml_template_type_0_0>__il))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__il.begin());
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 const(*end(initializer_list<__xcodeml_template_type_0_0>__il))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__il.end());
}
}
extern"C"{int bcmp(void const(*),void const(*),unsigned long)/*gccattr pure:*/;};
extern"C"{void bcopy(void const(*),void(*),unsigned long);};
extern"C"{void bzero(void(*),unsigned long);};
extern"C"{void explicit_bzero(void(*),unsigned long);};
extern"C"{int ffs(int)/*gccattr const:*/;};
extern"C"{int ffsl(long)/*gccattr const:*/;};
extern"C"{int ffsll(long long)/*gccattr const:*/;};
extern"C"{int fls(int)/*gccattr const:*/;};
extern"C"{int flsl(long)/*gccattr const:*/;};
extern"C"{int flsll(long long)/*gccattr const:*/;};
extern"C"{char(*index(char const(*),int))/*gccattr pure:*/;};
extern"C"{char(*rindex(char const(*),int))/*gccattr pure:*/;};
extern"C"{int strcasecmp(char const(*),char const(*))/*gccattr pure:*/;};
extern"C"{int strncasecmp(char const(*),char const(*),unsigned long)/*gccattr pure:*/;};
extern"C"{int strcasecmp_l(char const(*),char const(*),class::_xlocale(*));};
extern"C"{int strncasecmp_l(char const(*),char const(*),unsigned long,class::_xlocale(*));};

extern"C"{void(*memccpy(void(*),void const(*),int,unsigned long));};
extern"C"{void(*memchr(void const(*),int,unsigned long))/*gccattr pure:*/;};
extern"C"{void(*memrchr(void const(*),int,unsigned long))/*gccattr pure:*/;};
extern"C"{int memcmp(void const(*),void const(*),unsigned long)/*gccattr pure:*/;};
extern"C"{void(*memcpy(void(*),void const(*),unsigned long));};
extern"C"{void(*memmem(void const(*),unsigned long,void const(*),unsigned long))/*gccattr pure:*/;};
extern"C"{void(*memmove(void(*),void const(*),unsigned long));};
extern"C"{void(*memset(void(*),int,unsigned long));};
extern"C"{char(*stpcpy(char(*),char const(*)));};
extern"C"{char(*stpncpy(char(*),char const(*),unsigned long));};
extern"C"{char(*strcasestr(char const(*),char const(*)))/*gccattr pure:*/;};
extern"C"{char(*strcat(char(*),char const(*)));};
extern"C"{char(*strchr(char const(*),int))/*gccattr pure:*/;};
extern"C"{char(*strchrnul(char const(*),int))/*gccattr pure:*/;};
extern"C"{int strcmp(char const(*),char const(*))/*gccattr pure:*/;};
extern"C"{int strcoll(char const(*),char const(*));};
extern"C"{char(*strcpy(char(*),char const(*)));};
extern"C"{unsigned long strcspn(char const(*),char const(*))/*gccattr pure:*/;};
extern"C"{char(*strdup(char const(*)))/*gccattr malloc:*/;};
extern"C"{char(*strerror(int));};
extern"C"{int strerror_r(int,char(*),unsigned long);};
extern"C"{unsigned long strlcat(char(*),char const(*),unsigned long);};
extern"C"{unsigned long strlcpy(char(*),char const(*),unsigned long);};
extern"C"{unsigned long strlen(char const(*))/*gccattr pure:*/;};
extern"C"{void strmode(int,char(*));};
extern"C"{char(*strncat(char(*),char const(*),unsigned long));};
extern"C"{int strncmp(char const(*),char const(*),unsigned long)/*gccattr pure:*/;};
extern"C"{char(*strncpy(char(*),char const(*),unsigned long));};
extern"C"{char(*strndup(char const(*),unsigned long))/*gccattr malloc:*/;};
extern"C"{unsigned long strnlen(char const(*),unsigned long)/*gccattr pure:*/;};
extern"C"{char(*strnstr(char const(*),char const(*),unsigned long))/*gccattr pure:*/;};
extern"C"{char(*strpbrk(char const(*),char const(*)))/*gccattr pure:*/;};
extern"C"{char(*strrchr(char const(*),int))/*gccattr pure:*/;};
extern"C"{char(*strsep(char(*(*)),char const(*)));};
extern"C"{char(*strsignal(int));};
extern"C"{unsigned long strspn(char const(*),char const(*))/*gccattr pure:*/;};
extern"C"{char(*strstr(char const(*),char const(*)))/*gccattr pure:*/;};
extern"C"{char(*strtok(char(*),char const(*)));};
extern"C"{char(*strtok_r(char(*),char const(*),char(*(*))));};
extern"C"{unsigned long strxfrm(char(*),char const(*),unsigned long);};
typedef long ssize_t;
extern"C"{void swab(void const(*),void(*),long);};
extern"C"{int timingsafe_bcmp(void const(*),void const(*),unsigned long);};
extern"C"{int timingsafe_memcmp(void const(*),void const(*),unsigned long);};
extern"C"{int strcoll_l(char const(*),char const(*),class::_xlocale(*));};
extern"C"{unsigned long strxfrm_l(char(*),char const(*),unsigned long,class::_xlocale(*));};
typedef int errno_t;
extern"C"{int memset_s(void(*),unsigned long,int,unsigned long);};

char(*__libcpp_strchr(char const(*__s),int __c))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((char(*))(strchr(__s,__c)));
}
char const(*strchr(char const(*__s),int __c))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr enable_if:true*/{return(__libcpp_strchr(__s,__c));
}
char(*strchr(char(*__s),int __c))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr enable_if:true*/{return(__libcpp_strchr(__s,__c));
}
char(*__libcpp_strpbrk(char const(*__s1),char const(*__s2)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((char(*))(strpbrk(__s1,__s2)));
}
char const(*strpbrk(char const(*__s1),char const(*__s2)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr enable_if:true*/{return(__libcpp_strpbrk(__s1,__s2));
}
char(*strpbrk(char(*__s1),char const(*__s2)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr enable_if:true*/{return(__libcpp_strpbrk(__s1,__s2));
}
char(*__libcpp_strrchr(char const(*__s),int __c))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((char(*))(strrchr(__s,__c)));
}
char const(*strrchr(char const(*__s),int __c))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr enable_if:true*/{return(__libcpp_strrchr(__s,__c));
}
char(*strrchr(char(*__s),int __c))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr enable_if:true*/{return(__libcpp_strrchr(__s,__c));
}
void(*__libcpp_memchr(void const(*__s),int __c,unsigned long __n))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((void(*))(memchr(__s,__c,__n)));
}
void const(*memchr(void const(*__s),int __c,unsigned long __n))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr enable_if:true*/{return(__libcpp_memchr(__s,__c,__n));
}
void(*memchr(void(*__s),int __c,unsigned long __n))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr enable_if:true*/{return(__libcpp_memchr(__s,__c,__n));
}
char(*__libcpp_strstr(char const(*__s1),char const(*__s2)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((char(*))(strstr(__s1,__s2)));
}
char const(*strstr(char const(*__s1),char const(*__s2)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr enable_if:true*/{return(__libcpp_strstr(__s1,__s2));
}
char(*strstr(char(*__s1),char const(*__s2)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr enable_if:true*/{return(__libcpp_strstr(__s1,__s2));
}

namespace std{namespace __1{using::size_t;
using::memcpy;
using::memmove;
using::strcpy;
using::strncpy;
using::strcat;
using::strncat;
using::memcmp;
using::strcmp;
using::strncmp;
using::strcoll;
using::strxfrm;
using::memchr;
using::strchr;
using::strcspn;
using::strpbrk;
using::strrchr;
using::strspn;
using::strstr;
using::strtok;
using::memset;
using::strerror;
using::strlen;
}
}
namespace std{namespace __1{template<typename __xcodeml_template_type_0_0>class tuple_size/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>using __enable_if_tuple_size_imp=__xcodeml_template_type_0_0;
template<typename __xcodeml_template_type_0_0>class tuple_size<__xcodeml_template_type_0_0 const>:public integral_constant<unsigned long,expression>{}
;
template<typename __xcodeml_template_type_0_0>class tuple_size<__xcodeml_template_type_0_0 volatile>:public integral_constant<unsigned long,expression>{}
;
template<typename __xcodeml_template_type_0_0>class tuple_size<__xcodeml_template_type_0_0 volatile const>:public integral_constant<unsigned long,expression>{}
;
template<unsigned long _Ip,typename __xcodeml_template_type_0_1>class tuple_element/*gccattr type_visibility:*/;
;
template<unsigned long _Ip,typename __xcodeml_template_type_0_1>class tuple_element<expression,__xcodeml_template_type_0_1 const>{public:typedef typename add_const<typename tuple_element<expression,__xcodeml_template_type_0_1>::type>::type type;
}
;
template<unsigned long _Ip,typename __xcodeml_template_type_0_1>class tuple_element<expression,__xcodeml_template_type_0_1 volatile>{public:typedef typename add_volatile<typename tuple_element<expression,__xcodeml_template_type_0_1>::type>::type type;
}
;
template<unsigned long _Ip,typename __xcodeml_template_type_0_1>class tuple_element<expression,__xcodeml_template_type_0_1 volatile const>{public:typedef typename add_cv<typename tuple_element<expression,__xcodeml_template_type_0_1>::type>::type type;
}
;
template<typename __xcodeml_template_type_0_0>class __tuple_like:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class __tuple_like<__xcodeml_template_type_0_0 const>:public __tuple_like<__xcodeml_template_type_0_0>{}
;
template<typename __xcodeml_template_type_0_0>class __tuple_like<__xcodeml_template_type_0_0 volatile>:public __tuple_like<__xcodeml_template_type_0_0>{}
;
template<typename __xcodeml_template_type_0_0>class __tuple_like<__xcodeml_template_type_0_0 volatile const>:public __tuple_like<__xcodeml_template_type_0_0>{}
;
template<unsigned long...>class __tuple_indices{}
;
;
template<typename __xcodeml_template_type_0_0,__xcodeml_template_type_0_0 _Values...>class __integer_sequence{public:template<template<typename __xcodeml_template_type_2_0,__xcodeml_template_type_2_0...> class __xcodeml_template_template_1_0,typename __xcodeml_template_type_1_1>using __convert=__xcodeml_template_template_1_0<__xcodeml_template_type_1_1,expression>/*packsize1*/;
public:template<unsigned long _Sp>using __to_tuple_indices=__tuple_indices<expression>/*packsize1*/;
}
;
;
template<unsigned long _Ep,unsigned long _Sp>using __make_indices_imp=/*DTS*/__make_integer_seq<__integer_sequence,/*XXXtemplate_expansion*/,unsigned long,expression>::template __to_tuple_indices<expression>;
template<unsigned long _Ep,unsigned long _Sp=0>class __make_tuple_indices{
/* Ignored a member with no access specifier static_assert((_Sp<=_Ep),"__make_tuple_indices input error");*/

public:typedef/*DTS*/__make_integer_seq<__integer_sequence,/*XXXtemplate_expansion*/,unsigned long,expression>::template __to_tuple_indices<expression>;
}
;
;
template<typename...__xcodeml_template_type_0_0>class tuple/*gccattr type_visibility:*/;
;
template<typename...__xcodeml_template_type_0_0>class __tuple_like<tuple<__xcodeml_template_type_0_0...>/*packsize1*/>:public integral_constant<bool,1>{}
;
template<typename...__xcodeml_template_type_0_0>class tuple_size<tuple<__xcodeml_template_type_0_0...>/*packsize1*/>:public integral_constant<unsigned long,expression>{}
;
template<unsigned long _Ip,typename...__xcodeml_template_type_0_1>typename tuple_element<expression,tuple<__xcodeml_template_type_0_1...>/*packsize1*/>::type&get(tuple<__xcodeml_template_type_0_1...>/*packsize1*/&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<unsigned long _Ip,typename...__xcodeml_template_type_0_1>typename tuple_element<expression,tuple<__xcodeml_template_type_0_1...>/*packsize1*/>::type const&get(tuple<__xcodeml_template_type_0_1...>/*packsize1*/const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<unsigned long _Ip,typename...__xcodeml_template_type_0_1>typename tuple_element<expression,tuple<__xcodeml_template_type_0_1...>/*packsize1*/>::type&& get(tuple<__xcodeml_template_type_0_1...>/*packsize1*/&& )/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<unsigned long _Ip,typename...__xcodeml_template_type_0_1>typename tuple_element<expression,tuple<__xcodeml_template_type_0_1...>/*packsize1*/>::type const&& get(tuple<__xcodeml_template_type_0_1...>/*packsize1*/const&& )/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __tuple_like<pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1> >:public integral_constant<bool,1>{}
;
template<unsigned long _Ip,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>typename tuple_element<expression,pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2> >::type&get(pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<unsigned long _Ip,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>typename tuple_element<expression,pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2> >::type const&get(pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<unsigned long _Ip,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>typename tuple_element<expression,pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2> >::type&& get(pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>&& )/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<unsigned long _Ip,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>typename tuple_element<expression,pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2> >::type const&& get(pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>const&& )/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<typename __xcodeml_template_type_0_0,unsigned long _Size>class array/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0,unsigned long _Size>class __tuple_like<array<__xcodeml_template_type_0_0,expression> >:public integral_constant<bool,1>{}
;
template<unsigned long _Ip,typename __xcodeml_template_type_0_1,unsigned long _Size>__xcodeml_template_type_0_1&get(array<__xcodeml_template_type_0_1,expression>&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<unsigned long _Ip,typename __xcodeml_template_type_0_1,unsigned long _Size>__xcodeml_template_type_0_1 const&get(array<__xcodeml_template_type_0_1,expression>const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<unsigned long _Ip,typename __xcodeml_template_type_0_1,unsigned long _Size>__xcodeml_template_type_0_1&& get(array<__xcodeml_template_type_0_1,expression>&& )/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<unsigned long _Ip,typename __xcodeml_template_type_0_1,unsigned long _Size>__xcodeml_template_type_0_1 const&& get(array<__xcodeml_template_type_0_1,expression>const&& )/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<typename...__xcodeml_template_type_0_0>class __tuple_types{}
;
;
template<unsigned long _Ip,typename...__xcodeml_template_type_0_1>class tuple_element<expression,__tuple_types<__xcodeml_template_type_0_1...>/*packsize1*/>{
/* Ignored a member with no access specifier static_assert((_Ip<sizeof...(
                __xcodeml_template_type_0_1
              )),"tuple_element index out of range");*/

public:typedef __type_pack_element<expression,__xcodeml_template_type_0_1...>/*packsize1*/type;
}
;
template<typename...__xcodeml_template_type_0_0>class tuple_size<__tuple_types<__xcodeml_template_type_0_0...>/*packsize1*/>:public integral_constant<unsigned long,expression>{}
;
template<typename...__xcodeml_template_type_0_0>class __tuple_like<__tuple_types<__xcodeml_template_type_0_0...>/*packsize1*/>:public integral_constant<bool,1>{}
;
template<bool _ApplyLV,bool _ApplyConst,bool _ApplyVolatile>class __apply_cv_mf;
;
template<>class __apply_cv_mf<0,0,0>{public:template<typename __xcodeml_template_type_0_0>using __apply=__xcodeml_template_type_0_0;
}
;
template<>class __apply_cv_mf<0,1,0>{public:template<typename __xcodeml_template_type_0_0>using __apply=__xcodeml_template_type_0_0 const;
}
;
template<>class __apply_cv_mf<0,0,1>{public:template<typename __xcodeml_template_type_0_0>using __apply=__xcodeml_template_type_0_0 volatile;
}
;
template<>class __apply_cv_mf<0,1,1>{public:template<typename __xcodeml_template_type_0_0>using __apply=__xcodeml_template_type_0_0 volatile const;
}
;
template<>class __apply_cv_mf<1,0,0>{public:template<typename __xcodeml_template_type_0_0>using __apply=__xcodeml_template_type_0_0&;
}
;
template<>class __apply_cv_mf<1,1,0>{public:template<typename __xcodeml_template_type_0_0>using __apply=__xcodeml_template_type_0_0 const&;
}
;
template<>class __apply_cv_mf<1,0,1>{public:template<typename __xcodeml_template_type_0_0>using __apply=__xcodeml_template_type_0_0 volatile&;
}
;
template<>class __apply_cv_mf<1,1,1>{public:template<typename __xcodeml_template_type_0_0>using __apply=__xcodeml_template_type_0_0 volatile const&;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>using __apply_cv_t=__apply_cv_mf<expression,expression,expression>;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __make_tuple_types_flat;
;
template<template<typename...__xcodeml_template_type_1_0> class __xcodeml_template_template_0_0,typename...__xcodeml_template_type_0_1,unsigned long _Idx...>class __make_tuple_types_flat<__xcodeml_template_template_0_0<__xcodeml_template_type_0_1...>/*packsize1*/,__tuple_indices<expression>/*packsize1*/>{public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>using __apply_quals=__tuple_types</*DTS*/__xcodeml_template_type_1_1::template __apply<__type_pack_element<expression,__xcodeml_template_type_0_1...>/*packsize1*/> >/*packsize1*/;
}
;
template<typename __xcodeml_template_type_0_0,unsigned long _Np,unsigned long _Idx...>class __make_tuple_types_flat<array<__xcodeml_template_type_0_0,expression>,__tuple_indices<expression>/*packsize1*/>{public:template<unsigned long>using __value_type=__xcodeml_template_type_0_0;
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>using __apply_quals=__tuple_types</*DTS*/__xcodeml_template_type_1_1::template __apply<__xcodeml_template_type_0_0> >/*packsize1*/;
}
;
template<typename __xcodeml_template_type_0_0,unsigned long _Ep=tuple_size<typename remove_reference<__xcodeml_template_type_0_0>::type>::value,unsigned long _Sp=0,bool _SameSize=(_Ep==tuple_size<typename remove_reference<__xcodeml_template_type_0_0>::type>::value)>class __make_tuple_types{
/* Ignored a member with no access specifier static_assert((_Sp<=_Ep),"__make_tuple_types input error");*/

public:using _RawTp=typename remove_cv<typename remove_reference<__xcodeml_template_type_0_0>::type>::type;
public:using _Maker=__make_tuple_types_flat<typename remove_cv<typename remove_reference<__xcodeml_template_type_0_0>::type>::type,typename __make_tuple_indices<expression,expression>::type>;
public:using type=/*DTS*/__make_tuple_types_flat<typename remove_cv<typename remove_reference<__xcodeml_template_type_0_0>::type>::type,typename __make_tuple_indices<expression,expression>::type>::template __apply_quals<__xcodeml_template_type_0_0>;
}
;
;
template<typename...__xcodeml_template_type_0_0,unsigned long _Ep>class __make_tuple_types<tuple<__xcodeml_template_type_0_0...>/*packsize1*/,expression,0,1>{public:typedef __tuple_types<__xcodeml_template_type_0_0...>/*packsize1*/type;
}
;
template<typename...__xcodeml_template_type_0_0,unsigned long _Ep>class __make_tuple_types<__tuple_types<__xcodeml_template_type_0_0...>/*packsize1*/,expression,0,1>{public:typedef __tuple_types<__xcodeml_template_type_0_0...>/*packsize1*/type;
}
;
template<bool _Preds...>class __all_dummy;
;
template<bool _Pred...>using __all=integral_constant<bool,expression>;
class __tuple_sfinae_base{public:template<template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1> class __xcodeml_template_template_0_0,typename...__xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>static integral_constant<bool,expression>__do_test(__tuple_types<__xcodeml_template_type_0_1...>/*packsize1*/,__tuple_types<__xcodeml_template_type_0_2...>/*packsize1*/)
public:template<template<typename...__xcodeml_template_type_1_0> class __xcodeml_template_template_0_0>static class::std::__1::integral_constant<bool,0>__do_test(...)
public:template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>using __constructible=decltype ();
public:template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>using __convertible=decltype ();
public:template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>using __assignable=decltype ();
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,bool=__tuple_like<typename remove_reference<__xcodeml_template_type_0_0>::type>::value,bool=__tuple_like<__xcodeml_template_type_0_1>::value>class __tuple_convertible:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __tuple_convertible<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,1,1>:public/*Decltype*/{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,bool=__tuple_like<typename remove_reference<__xcodeml_template_type_0_0>::type>::value,bool=__tuple_like<__xcodeml_template_type_0_1>::value>class __tuple_constructible:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __tuple_constructible<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,1,1>:public/*Decltype*/{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,bool=__tuple_like<typename remove_reference<__xcodeml_template_type_0_0>::type>::value,bool=__tuple_like<__xcodeml_template_type_0_1>::value>class __tuple_assignable:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __tuple_assignable<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,1,1>:public/*Decltype*/{}
;
template<unsigned long _Ip,typename...__xcodeml_template_type_0_1>class tuple_element<expression,tuple<__xcodeml_template_type_0_1...>/*packsize1*/>{public:typedef typename tuple_element<expression,__tuple_types<__xcodeml_template_type_0_1...>/*packsize1*/>::type type;
}
;
template<bool _IsTuple,typename __xcodeml_template_type_0_1,unsigned long _Expected>class __tuple_like_with_size_imp:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0,unsigned long _Expected>class __tuple_like_with_size_imp<1,__xcodeml_template_type_0_0,expression>:public integral_constant<bool,expression>{}
;
template<typename __xcodeml_template_type_0_0,unsigned long _ExpectedSize,typename __xcodeml_template_type_0_2>using __tuple_like_with_size=__tuple_like_with_size_imp<expression,tuple_size<__xcodeml_template_type_0_2>,expression>;
class __check_tuple_constructor_fail{public:template<typename...__xcodeml_template_type_0_0>static bool __enable_default(){return false;
}
public:template<typename...__xcodeml_template_type_0_0>static bool __enable_explicit(){return false;
}
public:template<typename...__xcodeml_template_type_0_0>static bool __enable_implicit(){return false;
}
public:template<typename...__xcodeml_template_type_0_0>static bool __enable_assign(){return false;
}
}
;
}
}
typedef signed char int8_t;
typedef short int16_t;
typedef int int32_t;
typedef long int64_t;
typedef long intptr_t;
typedef unsigned long uintptr_t;
typedef long intmax_t;
typedef unsigned long uintmax_t;
typedef signed char int_least8_t;
typedef short int_least16_t;
typedef int int_least32_t;
typedef long int_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned long uint_least64_t;
typedef int int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long int_fast64_t;
typedef unsigned int uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef unsigned long uint_fast64_t;
namespace std{namespace __1{using::int8_t;
using::int16_t;
using::int32_t;
using::int64_t;
using::uint8_t;
using::uint16_t;
using::uint32_t;
using::uint64_t;
using::int_least8_t;
using::int_least16_t;
using::int_least32_t;
using::int_least64_t;
using::uint_least8_t;
using::uint_least16_t;
using::uint_least32_t;
using::uint_least64_t;
using::int_fast8_t;
using::int_fast16_t;
using::int_fast32_t;
using::int_fast64_t;
using::uint_fast8_t;
using::uint_fast16_t;
using::uint_fast32_t;
using::uint_fast64_t;
using::intptr_t;
using::uintptr_t;
using::intmax_t;
using::uintmax_t;
}
}
namespace std{namespace __1{namespace rel_ops{template<typename __xcodeml_template_type_0_0>bool operator!=(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!(__x==__y));
}
template<typename __xcodeml_template_type_0_0>bool operator>(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__y<__x);
}
template<typename __xcodeml_template_type_0_0>bool operator<=(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!(__y<__x));
}
template<typename __xcodeml_template_type_0_0>bool operator>=(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!(__x<__y));
}
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 swap_ranges(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;(__first1!=__last1);((++__first1),((void)(++__first2)))){(swap((*__first1),(*__first2)));}};
return __first2;
}
template<typename __xcodeml_template_type_0_0,unsigned long _Np>typename enable_if<expression,void>::type swap(__xcodeml_template_type_0_0&__a,__xcodeml_template_type_0_0&__b)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::swap_ranges(__a,(__a+_Np),__b));
}
template<typename __xcodeml_template_type_0_0>typename conditional<expression,__xcodeml_template_type_0_0 const&,__xcodeml_template_type_0_0&& >::type move_if_noexcept(__xcodeml_template_type_0_0&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::move(__x));
}
class piecewise_construct_t{}
;
constexpr class piecewise_construct_t const piecewise_construct=__xcodeml_identity<class::std::__1::piecewise_construct_t>::t();
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __non_trivially_copyable_base{public:__non_trivially_copyable_base()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__non_trivially_copyable_base(class __non_trivially_copyable_base const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class pair:private __non_trivially_copyable_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>{public:typedef __xcodeml_template_type_0_0 first_type;
public:typedef __xcodeml_template_type_0_1 second_type;
public:__xcodeml_template_type_0_0 first;
public:__xcodeml_template_type_0_1 second;
public:pair(class pair const&);
public:pair(class pair&& );
public:template<bool _Val>using _EnableB=typename enable_if<expression,bool>::type;
public:class _CheckArgs{public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>static bool __enable_default(){return(is_default_constructible<__xcodeml_template_type_1_0>::value&&is_default_constructible<__xcodeml_template_type_1_1>::value);
}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>static bool __enable_explicit(){return((is_constructible<__xcodeml_template_type_0_0,__xcodeml_template_type_1_0>/*packsize1*/::value&&is_constructible<__xcodeml_template_type_0_1,__xcodeml_template_type_1_1>/*packsize1*/::value)&&((!is_convertible<__xcodeml_template_type_1_0,__xcodeml_template_type_0_0>::value)||(!is_convertible<__xcodeml_template_type_1_1,__xcodeml_template_type_0_1>::value)));
}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>static bool __enable_implicit(){return(((is_constructible<__xcodeml_template_type_0_0,__xcodeml_template_type_1_0>/*packsize1*/::value&&is_constructible<__xcodeml_template_type_0_1,__xcodeml_template_type_1_1>/*packsize1*/::value)&&is_convertible<__xcodeml_template_type_1_0,__xcodeml_template_type_0_0>::value)&&is_convertible<__xcodeml_template_type_1_1,__xcodeml_template_type_0_1>::value);
}
}
;
public:template<bool _MaybeEnable>using _CheckArgsDep=typename conditional<expression,class::std::__1::pair::_CheckArgs,class::std::__1::__check_tuple_constructor_fail>::type;
public:class _CheckTupleLikeConstructor{public:template<typename __xcodeml_template_type_1_0>static bool __enable_implicit(){return __tuple_convertible<__xcodeml_template_type_1_0,class pair,expression,expression>::value;
}
public:template<typename __xcodeml_template_type_1_0>static bool __enable_explicit(){return(__tuple_constructible<__xcodeml_template_type_1_0,class pair,expression,expression>::value&&(!__tuple_convertible<__xcodeml_template_type_1_0,class pair,expression,expression>::value));
}
public:template<typename __xcodeml_template_type_1_0>static bool __enable_assign(){return __tuple_assignable<__xcodeml_template_type_1_0,class pair,expression,expression>::value;
}
}
;
public:template<typename __xcodeml_template_type_1_0>using _CheckTLC=typename conditional<expression,class::std::__1::pair::_CheckTupleLikeConstructor,class::std::__1::__check_tuple_constructor_fail>::type;
public:template<bool _Dummy=true,typename enable_if<expression,bool>::type=false>pair():first(),second()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<bool _Dummy=true,typename enable_if<expression,bool>::type=false>pair(__xcodeml_template_type_0_0 const&__t1,__xcodeml_template_type_0_1 const&__t2):first(__t1),second(__t2)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<bool _Dummy=true,typename enable_if<expression,bool>::type=false>pair(__xcodeml_template_type_0_0 const&__t1,__xcodeml_template_type_0_1 const&__t2):first(__t1),second(__t2)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename enable_if<expression,bool>::type=false>pair(__xcodeml_template_type_1_0&& __u1,__xcodeml_template_type_1_1&& __u2):first((std::__1::forward<__xcodeml_template_type_1_0>(__u1))),second((std::__1::forward<__xcodeml_template_type_1_1>(__u2)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename enable_if<expression,bool>::type=false>pair(__xcodeml_template_type_1_0&& __u1,__xcodeml_template_type_1_1&& __u2):first((std::__1::forward<__xcodeml_template_type_1_0>(__u1))),second((std::__1::forward<__xcodeml_template_type_1_1>(__u2)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename enable_if<expression,bool>::type=false>pair(pair<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>const&__p):first(__p.first),second(__p.second)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename enable_if<expression,bool>::type=false>pair(pair<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>const&__p):first(__p.first),second(__p.second)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename enable_if<expression,bool>::type=false>pair(pair<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>&& __p):first((std::__1::forward<__xcodeml_template_type_1_0>(__p.first))),second((std::__1::forward<__xcodeml_template_type_1_1>(__p.second)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename enable_if<expression,bool>::type=false>pair(pair<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>&& __p):first((std::__1::forward<__xcodeml_template_type_1_0>(__p.first))),second((std::__1::forward<__xcodeml_template_type_1_1>(__p.second)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename enable_if<expression,bool>::type=false>pair(__xcodeml_template_type_1_0&& __p):first((std::__1::get<0>((std::__1::forward<__xcodeml_template_type_1_0>(__p))))),second((std::__1::get<1>((std::__1::forward<__xcodeml_template_type_1_0>(__p)))))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename enable_if<expression,bool>::type=false>pair(__xcodeml_template_type_1_0&& __p):first((std::__1::get<0>((std::__1::forward<__xcodeml_template_type_1_0>(__p))))),second((std::__1::get<1>((std::__1::forward<__xcodeml_template_type_1_0>(__p)))))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename...__xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1>pair(class::std::__1::piecewise_construct_t __pc,tuple<__xcodeml_template_type_1_0...>/*packsize1*/__first_args,tuple<__xcodeml_template_type_1_1...>/*packsize1*/__second_args):pair(__pc __first_args __second_args __xcodeml_identity<typename __make_tuple_indices<expression,0>::type>::t()__xcodeml_identity<typename __make_tuple_indices<expression,0>::type>::t())/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:class pair&operator=(typename conditional<expression,class pair,class::std::__1::__nat>::type const&__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->first=__p.first);
(this->second=__p.second);
return(*this);
}
public:class pair&operator=(typename conditional<expression,class pair,class::std::__1::__nat>::type&& __p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->first=(std::__1::forward<__xcodeml_template_type_0_0>(__p.first)));
(this->second=(std::__1::forward<__xcodeml_template_type_0_1>(__p.second)));
return(*this);
}
public:template<typename __xcodeml_template_type_1_0,typename enable_if<expression,bool>::type=false>class pair&operator=(__xcodeml_template_type_1_0&& __p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->first=(std::__1::get<0>((std::__1::forward<__xcodeml_template_type_1_0>(__p)))));
(this->second=(std::__1::get<1>((std::__1::forward<__xcodeml_template_type_1_0>(__p)))));
return(*this);
}
public:void swap(class pair&__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{using std::__1::swap;
(swap(this->first,__p.first));
(swap(this->second,__p.second));
}
private:
private:template<typename...__xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1,unsigned long _I1...,unsigned long _I2...>pair(class::std::__1::piecewise_construct_t,tuple<__xcodeml_template_type_1_0...>/*packsize1*/&__first_args,tuple<__xcodeml_template_type_1_1...>/*packsize1*/&__second_args,__tuple_indices<expression>/*packsize1*/,__tuple_indices<expression>/*packsize1*/)
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator==(pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(operator==(__x.first,__y.first)&&operator==(__x.second,__y.second));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator!=(pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator==(__x,__y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator<(pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(operator<(__x.first,__y.first)||((!operator<(__y.first,__x.first))&&operator<(__x.second,__y.second)));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator>(pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(__y,__x);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator>=(pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(__x,__y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator<=(pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(__y,__x));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename enable_if<expression,void>::type swap(pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&__x,pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__x.swap(__y));
}
template<typename __xcodeml_template_type_0_0>class __unwrap_reference{public:typedef __xcodeml_template_type_0_0 type;
}
;
;
template<typename __xcodeml_template_type_0_0>class __unwrap_reference<reference_wrapper<__xcodeml_template_type_0_0> >{public:typedef __xcodeml_template_type_0_0&type;
}
;
template<typename __xcodeml_template_type_0_0>class __unwrap_ref_decay:public __unwrap_reference<typename decay<__xcodeml_template_type_0_0>::type>{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>pair<typename __unwrap_ref_decay<__xcodeml_template_type_0_0>::type,typename __unwrap_ref_decay<__xcodeml_template_type_0_1>::type>make_pair(__xcodeml_template_type_0_0&& __t1,__xcodeml_template_type_0_1&& __t2)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<pair<typename __unwrap_ref_decay<__xcodeml_template_type_0_0>::type,typename __unwrap_ref_decay<__xcodeml_template_type_0_1>::type> >::t((std::__1::forward<__xcodeml_template_type_0_0>(__t1)),(std::__1::forward<__xcodeml_template_type_0_1>(__t2)));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class tuple_size<pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1> >:public integral_constant<unsigned long,2>{}
;
template<unsigned long _Ip,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class tuple_element<expression,pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2> >{
/* Ignored a member with no access specifier static_assert((_Ip<2),"Index out of bounds in std::tuple_element<std::pair<T1, T2>>");*/

}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class tuple_element<0,pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1> >{public:typedef __xcodeml_template_type_0_0 type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class tuple_element<1,pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1> >{public:typedef __xcodeml_template_type_0_1 type;
}
;
template<unsigned long _Ip>class __get_pair;
;
template<>class __get_pair<0>{public:template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>static __xcodeml_template_type_0_0&get(pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __p.first;
}
public:template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>static __xcodeml_template_type_0_0 const&get(pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __p.first;
}
public:template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>static __xcodeml_template_type_0_0&& get(pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&& __p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::forward<__xcodeml_template_type_0_0>(__p.first));
}
public:template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>static __xcodeml_template_type_0_0 const&& get(pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&& __p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::forward<__xcodeml_template_type_0_0 const>(__p.first));
}
}
;
template<>class __get_pair<1>{public:template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>static __xcodeml_template_type_0_1&get(pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __p.second;
}
public:template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>static __xcodeml_template_type_0_1 const&get(pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __p.second;
}
public:template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>static __xcodeml_template_type_0_1&& get(pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&& __p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::forward<__xcodeml_template_type_0_1>(__p.second));
}
public:template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>static __xcodeml_template_type_0_1 const&& get(pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&& __p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::forward<__xcodeml_template_type_0_1 const>(__p.second));
}
}
;
template<unsigned long _Ip,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>typename tuple_element<expression,pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2> >::type&get(pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>&__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__get_pair<expression>::get(__p));
}
template<unsigned long _Ip,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>typename tuple_element<expression,pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2> >::type const&get(pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>const&__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__get_pair<expression>::get(__p));
}
template<unsigned long _Ip,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>typename tuple_element<expression,pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2> >::type&& get(pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>&& __p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__get_pair<expression>::get((std::__1::move(__p))));
}
template<unsigned long _Ip,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>typename tuple_element<expression,pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2> >::type const&& get(pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>const&& __p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__get_pair<expression>::get((std::__1::move(__p))));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class unary_function{public:typedef __xcodeml_template_type_0_0 argument_type;
public:typedef __xcodeml_template_type_0_1 result_type;
}
;
;
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __loadword(void const(*__p))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{__xcodeml_template_type_0_0 __r;
(std::memcpy((&__r),__p,(sizeof(__r))));
return __r;
}
template<typename __xcodeml_template_type_0_0,unsigned long=((sizeof(__xcodeml_template_type_0_0))*8)>class __murmur2_or_cityhash;
;
template<typename __xcodeml_template_type_0_0>class __murmur2_or_cityhash<__xcodeml_template_type_0_0,32>{public:__xcodeml_template_type_0_0 operator()(void const(*__key),__xcodeml_template_type_0_0 __len);
}
;
__xcodeml_template_type_0_0 __murmur2_or_cityhash::operator()(void const(*__key),__xcodeml_template_type_0_0 __len)/*gccattr no_sanitize:*/{__xcodeml_template_type_0_0 const __m=0x5bd1e995;
__xcodeml_template_type_0_0 const __r=24;
__xcodeml_template_type_0_0 __h=__len;
unsigned char const(*__data)=static_cast<unsigned char const(*)>(__key);
{;for(;operator>=(__len,4);((__data+=4),(__len-=4))){{__xcodeml_template_type_0_0 __k=(__loadword<__xcodeml_template_type_0_0>(__data));
(__k*=__m);
(__k^=(__k>>__r));
(__k*=__m);
(__h*=__m);
(__h^=__k);
};}};
switch(__len){case 3:(__h^=((__data)[2]<<16));
;
case 2:(__h^=((__data)[1]<<8));
;
case 1:(__h^=(__data)[0]);
(__h*=__m);
};
(__h^=(__h>>13));
(__h*=__m);
(__h^=(__h>>15));
return __h;
}
template<typename __xcodeml_template_type_0_0>class __murmur2_or_cityhash<__xcodeml_template_type_0_0,64>{public:__xcodeml_template_type_0_0 operator()(void const(*__key),__xcodeml_template_type_0_0 __len);
private:
private:static __xcodeml_template_type_0_0 const __k0=0xc3a5c85c97cb3127ULL;
private:static __xcodeml_template_type_0_0 const __k1=0xb492b66fbe98f273ULL;
private:static __xcodeml_template_type_0_0 const __k2=0x9ae16a3b2f90404fULL;
private:static __xcodeml_template_type_0_0 const __k3=0xc949d7c7509e6557ULL;
private:static __xcodeml_template_type_0_0 __rotate(__xcodeml_template_type_0_0 __val,int __shift){return((__shift==0)?__val:((__val>>__shift)|(__val<<(64-__shift))));
}
private:static __xcodeml_template_type_0_0 __rotate_by_at_least_1(__xcodeml_template_type_0_0 __val,int __shift){return((__val>>__shift)|(__val<<(64-__shift)));
}
private:static __xcodeml_template_type_0_0 __shift_mix(__xcodeml_template_type_0_0 __val){return(__val^(__val>>47));
}
private:static __xcodeml_template_type_0_0 __hash_len_16(__xcodeml_template_type_0_0 __u,__xcodeml_template_type_0_0 __v)/*gccattr no_sanitize:*/{__xcodeml_template_type_0_0 const __mul=0x9ddfea08eb382d69ULL;
__xcodeml_template_type_0_0 __a=((__u^__v)*__mul);
(__a^=(__a>>47));
__xcodeml_template_type_0_0 __b=((__v^__a)*__mul);
(__b^=(__b>>47));
(__b*=__mul);
return __b;
}
private:static __xcodeml_template_type_0_0 __hash_len_0_to_16(char const(*__s),__xcodeml_template_type_0_0 __len)/*gccattr no_sanitize:*/{if(operator>(__len,8)){{__xcodeml_template_type_0_0 const __a=(__loadword<__xcodeml_template_type_0_0>(__s));
__xcodeml_template_type_0_0 const __b=(__loadword<__xcodeml_template_type_0_0>(((__s+__len)-8)));
return((__hash_len_16(__a,(__rotate_by_at_least_1((__b+__len),__len))))^__b);
};};
if(operator>=(__len,4)){{unsigned int const __a=(__loadword<unsigned int>(__s));
unsigned int const __b=(__loadword<unsigned int>(((__s+__len)-4)));
return(__hash_len_16((__len+(__a<<3)),__b));
};};
if(operator>(__len,0)){{unsigned char const __a=(__s)[0];
unsigned char const __b=(__s)[(__len>>1)];
unsigned char const __c=(__s)[(__len-1)];
unsigned int const __y=(static_cast<unsigned int>(__a)+(static_cast<unsigned int>(__b)<<8));
unsigned int const __z=(__len+(static_cast<unsigned int>(__c)<<2));
return((__shift_mix(((__y*__k2)^(__z*__k3))))*__k2);
};};
return __k2;
}
private:static __xcodeml_template_type_0_0 __hash_len_17_to_32(char const(*__s),__xcodeml_template_type_0_0 __len)/*gccattr no_sanitize:*/{__xcodeml_template_type_0_0 const __a=((__loadword<__xcodeml_template_type_0_0>(__s))*__k1);
__xcodeml_template_type_0_0 const __b=(__loadword<__xcodeml_template_type_0_0>((__s+8)));
__xcodeml_template_type_0_0 const __c=((__loadword<__xcodeml_template_type_0_0>(((__s+__len)-8)))*__k2);
__xcodeml_template_type_0_0 const __d=((__loadword<__xcodeml_template_type_0_0>(((__s+__len)-16)))*__k0);
return(__hash_len_16((((__rotate((__a-__b),43))+(__rotate(__c,30)))+__d),(((__a+(__rotate((__b^__k3),20)))-__c)+__len)));
}
private:static pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>__weak_hash_len_32_with_seeds(__xcodeml_template_type_0_0 __w,__xcodeml_template_type_0_0 __x,__xcodeml_template_type_0_0 __y,__xcodeml_template_type_0_0 __z,__xcodeml_template_type_0_0 __a,__xcodeml_template_type_0_0 __b)/*gccattr no_sanitize:*/{(__a+=__w);
(__b=(__rotate(((__b+__a)+__z),21)));
__xcodeml_template_type_0_0 const __c=__a;
(__a+=__x);
(__a+=__y);
(__b+=(__rotate(__a,44)));
return __xcodeml_identity<pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0> >::t((__a+__z),(__b+__c));
}
private:static pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>__weak_hash_len_32_with_seeds(char const(*__s),__xcodeml_template_type_0_0 __a,__xcodeml_template_type_0_0 __b)/*gccattr no_sanitize:*/{return(__weak_hash_len_32_with_seeds((__loadword<__xcodeml_template_type_0_0>(__s)),(__loadword<__xcodeml_template_type_0_0>((__s+8))),(__loadword<__xcodeml_template_type_0_0>((__s+16))),(__loadword<__xcodeml_template_type_0_0>((__s+24))),__a,__b));
}
private:static __xcodeml_template_type_0_0 __hash_len_33_to_64(char const(*__s),unsigned long __len)/*gccattr no_sanitize:*/{__xcodeml_template_type_0_0 __z=(__loadword<__xcodeml_template_type_0_0>((__s+24)));
__xcodeml_template_type_0_0 __a=((__loadword<__xcodeml_template_type_0_0>(__s))+((__len+(__loadword<__xcodeml_template_type_0_0>(((__s+__len)-16))))*__k0));
__xcodeml_template_type_0_0 __b=(__rotate((__a+__z),52));
__xcodeml_template_type_0_0 __c=(__rotate(__a,37));
(__a+=(__loadword<__xcodeml_template_type_0_0>((__s+8))));
(__c+=(__rotate(__a,7)));
(__a+=(__loadword<__xcodeml_template_type_0_0>((__s+16))));
__xcodeml_template_type_0_0 __vf=(__a+__z);
__xcodeml_template_type_0_0 __vs=((__b+(__rotate(__a,31)))+__c);
(__a=((__loadword<__xcodeml_template_type_0_0>((__s+16)))+(__loadword<__xcodeml_template_type_0_0>(((__s+__len)-32)))));
(__z+=(__loadword<__xcodeml_template_type_0_0>(((__s+__len)-8))));
(__b=(__rotate((__a+__z),52)));
(__c=(__rotate(__a,37)));
(__a+=(__loadword<__xcodeml_template_type_0_0>(((__s+__len)-24))));
(__c+=(__rotate(__a,7)));
(__a+=(__loadword<__xcodeml_template_type_0_0>(((__s+__len)-16))));
__xcodeml_template_type_0_0 __wf=(__a+__z);
__xcodeml_template_type_0_0 __ws=((__b+(__rotate(__a,31)))+__c);
__xcodeml_template_type_0_0 __r=(__shift_mix((((__vf+__ws)*__k2)+((__wf+__vs)*__k0))));
return((__shift_mix(((__r*__k0)+__vs)))*__k2);
}
}
;
__xcodeml_template_type_0_0 __murmur2_or_cityhash::operator()(void const(*__key),__xcodeml_template_type_0_0 __len)/*gccattr no_sanitize:*/{char const(*__s)=static_cast<char const(*)>(__key);
if(operator<=(__len,32)){{if(operator<=(__len,16)){{return(__hash_len_0_to_16(__s,__len));
};}else{{return(__hash_len_17_to_32(__s,__len));
};};
};}else{if(operator<=(__len,64)){{return(__hash_len_33_to_64(__s,__len));
};};};
__xcodeml_template_type_0_0 __x=(__loadword<__xcodeml_template_type_0_0>(((__s+__len)-40)));
__xcodeml_template_type_0_0 __y=((__loadword<__xcodeml_template_type_0_0>(((__s+__len)-16)))+(__loadword<__xcodeml_template_type_0_0>(((__s+__len)-56))));
__xcodeml_template_type_0_0 __z=(__hash_len_16(((__loadword<__xcodeml_template_type_0_0>(((__s+__len)-48)))+__len),(__loadword<__xcodeml_template_type_0_0>(((__s+__len)-24)))));
pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>__v=(__weak_hash_len_32_with_seeds(((__s+__len)-64),__len,__z));
pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>__w=(__weak_hash_len_32_with_seeds(((__s+__len)-32),(__y+__k1),__x));
(__x=((__x*__k1)+(__loadword<__xcodeml_template_type_0_0>(__s))));
(__len=((__len-1)&(~static_cast<__xcodeml_template_type_0_0>(63))));
do{{(__x=((__rotate((((__x+__y)+__v.first)+(__loadword<__xcodeml_template_type_0_0>((__s+8)))),37))*__k1));
(__y=((__rotate(((__y+__v.second)+(__loadword<__xcodeml_template_type_0_0>((__s+48)))),42))*__k1));
(__x^=__w.second);
(__y+=(__v.first+(__loadword<__xcodeml_template_type_0_0>((__s+40)))));
(__z=((__rotate((__z+__w.first),33))*__k1));
(__v=(__weak_hash_len_32_with_seeds(__s,(__v.second*__k1),(__x+__w.first))));
(__w=(__weak_hash_len_32_with_seeds((__s+32),(__z+__w.second),(__y+(__loadword<__xcodeml_template_type_0_0>((__s+16)))))));
(std::swap(__z,__x));
(__s+=64);
(__len-=64);
};}while(operator!=(__len,0));
return(__hash_len_16((((__hash_len_16(__v.first,__w.first))+((__shift_mix(__y))*__k1))+__z),((__hash_len_16(__v.second,__w.second))+__x)));
}
template<typename __xcodeml_template_type_0_0,unsigned long=((sizeof(__xcodeml_template_type_0_0))/(sizeof(unsigned long)))>class __scalar_hash;
;
template<typename __xcodeml_template_type_0_0>class __scalar_hash<__xcodeml_template_type_0_0,0>:public unary_function<__xcodeml_template_type_0_0,unsigned long>{public:unsigned long operator()(__xcodeml_template_type_0_0 __v)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{union __xcodeml_6{public:__xcodeml_template_type_0_0 __t;
public:unsigned long __a;
}
;union __xcodeml_6 __u;
(__u.__a=0);
(__u.__t=__v);
return __u.__a;
}
}
;
template<typename __xcodeml_template_type_0_0>class __scalar_hash<__xcodeml_template_type_0_0,1>:public unary_function<__xcodeml_template_type_0_0,unsigned long>{public:unsigned long operator()(__xcodeml_template_type_0_0 __v)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{union __xcodeml_7{public:__xcodeml_template_type_0_0 __t;
public:unsigned long __a;
}
;union __xcodeml_7 __u;
(__u.__t=__v);
return __u.__a;
}
}
;
template<typename __xcodeml_template_type_0_0>class __scalar_hash<__xcodeml_template_type_0_0,2>:public unary_function<__xcodeml_template_type_0_0,unsigned long>{public:unsigned long operator()(__xcodeml_template_type_0_0 __v)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{union __xcodeml_8{public:__xcodeml_template_type_0_0 __t;
public:class __xcodeml_9{public:unsigned long __a;
public:unsigned long __b;
}
;
public:class __xcodeml_8::__xcodeml_9 __s;
}
;union __xcodeml_8 __u;
(__u.__t=__v);
return(__xcodeml_identity<class::std::__1::__murmur2_or_cityhash<unsigned long,64> >::t()((&__u),(sizeof(__u))));
}
}
;
template<typename __xcodeml_template_type_0_0>class __scalar_hash<__xcodeml_template_type_0_0,3>:public unary_function<__xcodeml_template_type_0_0,unsigned long>{public:unsigned long operator()(__xcodeml_template_type_0_0 __v)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{union __xcodeml_10{public:__xcodeml_template_type_0_0 __t;
public:class __xcodeml_11{public:unsigned long __a;
public:unsigned long __b;
public:unsigned long __c;
}
;
public:class __xcodeml_10::__xcodeml_11 __s;
}
;union __xcodeml_10 __u;
(__u.__t=__v);
return(__xcodeml_identity<class::std::__1::__murmur2_or_cityhash<unsigned long,64> >::t()((&__u),(sizeof(__u))));
}
}
;
template<typename __xcodeml_template_type_0_0>class __scalar_hash<__xcodeml_template_type_0_0,4>:public unary_function<__xcodeml_template_type_0_0,unsigned long>{public:unsigned long operator()(__xcodeml_template_type_0_0 __v)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{union __xcodeml_12{public:__xcodeml_template_type_0_0 __t;
public:class __xcodeml_13{public:unsigned long __a;
public:unsigned long __b;
public:unsigned long __c;
public:unsigned long __d;
}
;
public:class __xcodeml_12::__xcodeml_13 __s;
}
;union __xcodeml_12 __u;
(__u.__t=__v);
return(__xcodeml_identity<class::std::__1::__murmur2_or_cityhash<unsigned long,64> >::t()((&__u),(sizeof(__u))));
}
}
;
class _PairT{public:unsigned long first;
public:unsigned long second;
}
;
unsigned long __hash_combine(unsigned long __lhs,unsigned long __rhs)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef class::std::__1::__scalar_hash<class::std::__1::_PairT,2>_HashT;
class _PairT const __p={__lhs,__rhs};
return __xcodeml_identity<class::std::__1::__scalar_hash<class::std::__1::_PairT,2> >::t().operator()(__xcodeml_identity<class::std::__1::_PairT>::t(__p));
}
template<typename __xcodeml_template_type_0_0>class hash<__xcodeml_template_type_0_0(*)>:public unary_function<__xcodeml_template_type_0_0(*),unsigned long>{public:unsigned long operator()(__xcodeml_template_type_0_0(*__v))const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{union __xcodeml_14{public:__xcodeml_template_type_0_0(*__t);
public:unsigned long __a;
}
;union __xcodeml_14 __u;
(__u.__t=__v);
return(__xcodeml_identity<class::std::__1::__murmur2_or_cityhash<unsigned long,64> >::t()((&__u),(sizeof(__u))));
}
}
;
template<>class hash<bool>:public unary_function<bool,unsigned long>{public:unsigned long operator()(bool __v)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<unsigned long>(__v);
}
}
;
template<>class hash<char>:public unary_function<char,unsigned long>{public:unsigned long operator()(char __v)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<unsigned long>(__v);
}
}
;
template<>class hash<signed char>:public unary_function<signed char,unsigned long>{public:unsigned long operator()(signed char __v)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<unsigned long>(__v);
}
}
;
template<>class hash<unsigned char>:public unary_function<unsigned char,unsigned long>{public:unsigned long operator()(unsigned char __v)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<unsigned long>(__v);
}
}
;
template<>class hash<char16_t>:public unary_function<char16_t,unsigned long>{public:unsigned long operator()(char16_t __v)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<unsigned long>(__v);
}
}
;
template<>class hash<char32_t>:public unary_function<char32_t,unsigned long>{public:unsigned long operator()(char32_t __v)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<unsigned long>(__v);
}
}
;
template<>class hash<wchar_t>:public unary_function<wchar_t,unsigned long>{public:unsigned long operator()(wchar_t __v)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<unsigned long>(__v);
}
}
;
template<>class hash<short>:public unary_function<short,unsigned long>{public:unsigned long operator()(short __v)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<unsigned long>(__v);
}
}
;
template<>class hash<unsigned short>:public unary_function<unsigned short,unsigned long>{public:unsigned long operator()(unsigned short __v)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<unsigned long>(__v);
}
}
;
template<>class hash<int>:public unary_function<int,unsigned long>{public:unsigned long operator()(int __v)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<unsigned long>(__v);
}
}
;
template<>class hash<unsigned int>:public unary_function<unsigned int,unsigned long>{public:unsigned long operator()(unsigned int __v)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<unsigned long>(__v);
}
}
;
template<>class hash<long>:public unary_function<long,unsigned long>{public:unsigned long operator()(long __v)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<unsigned long>(__v);
}
}
;
template<>class hash<unsigned long>:public unary_function<unsigned long,unsigned long>{public:unsigned long operator()(unsigned long __v)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<unsigned long>(__v);
}
}
;
template<>class hash<long long>:public __scalar_hash<long long,1>{}
;
template<>class hash<unsigned long long>:public __scalar_hash<unsigned long long,1>{}
;
template<>class hash<__int128>:public __scalar_hash<__int128,2>{}
;
template<>class hash<unsigned __int128>:public __scalar_hash<unsigned __int128,2>{}
;
template<>class hash<float>:public __scalar_hash<float,0>{public:unsigned long operator()(float __v)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if((__v==0.0f)){return 0;};
return(this->__scalar_hash::operator()(__v));
}
}
;
template<>class hash<double>:public __scalar_hash<double,1>{public:unsigned long operator()(double __v)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if((__v==0.0)){return 0;};
return(this->__scalar_hash::operator()(__v));
}
}
;
template<>class hash<long double>:public __scalar_hash<long double,2>{public:unsigned long operator()(long double __v)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if((__v==0.0L)){return 0;};
union __xcodeml_15{public:long double __t;
public:class __xcodeml_16{public:unsigned long __a;
public:unsigned long __b;
}
;
public:class __xcodeml_15::__xcodeml_16 __s;
}
;union __xcodeml_15 __u;
(__u.__s.__a=0);
(__u.__s.__b=0);
(__u.__t=__v);
return(__u.__s.__a^__u.__s.__b);
}
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>using __check_hash_requirements=integral_constant<bool,expression>;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>using __has_enabled_hash=integral_constant<bool,expression>;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>using __enable_hash_helper=__xcodeml_template_type_0_0;
}
}
class __xcodeml_17{public:int quot;
public:int rem;
}
;
typedef class::__xcodeml_17 div_t;
class __xcodeml_18{public:long quot;
public:long rem;
}
;
typedef class::__xcodeml_18 ldiv_t;
extern int __mb_cur_max;
extern"C"{int ___mb_cur_max();};
extern"C"{void abort()/*gccattr noreturn:*/;};
extern"C"{int abs(int)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{int atexit(void(*)());};
extern"C"{double atof(char const(*));};
extern"C"{int atoi(char const(*));};
extern"C"{long atol(char const(*));};
extern"C"{void(*bsearch(void const(*),void const(*),unsigned long,unsigned long,int(*)(void const(*),void const(*))));};
extern"C"{void(*calloc(unsigned long,unsigned long))/*gccattr malloc:*//*gccattr warn_unused_result:*//*gccattr alloc_size:*/;};
extern"C"{class::__xcodeml_17 div(int,int)/*gccattr const:*/;};
extern"C"{void exit(int)/*gccattr noreturn:*/;};
extern"C"{void free(void(*));};
extern"C"{char(*getenv(char const(*)));};
extern"C"{long labs(long)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{class::__xcodeml_18 ldiv(long,long)/*gccattr const:*/;};
extern"C"{void(*malloc(unsigned long))/*gccattr malloc:*//*gccattr warn_unused_result:*//*gccattr alloc_size:*/;};
extern"C"{int mblen(char const(*),unsigned long);};
extern"C"{unsigned long mbstowcs(wchar_t(*),char const(*),unsigned long);};
extern"C"{int mbtowc(wchar_t(*),char const(*),unsigned long);};
extern"C"{void qsort(void(*),unsigned long,unsigned long,int(*)(void const(*),void const(*)));};
extern"C"{int rand();};
extern"C"{void(*realloc(void(*),unsigned long))/*gccattr warn_unused_result:*//*gccattr alloc_size:*/;};
extern"C"{void srand(unsigned int);};
extern"C"{double strtod(char const(*),char(*(*)));};
extern"C"{float strtof(char const(*),char(*(*)));};
extern"C"{long strtol(char const(*),char(*(*)),int);};
extern"C"{long double strtold(char const(*),char(*(*)));};
extern"C"{unsigned long strtoul(char const(*),char(*(*)),int);};
extern"C"{int system(char const(*));};
extern"C"{int wctomb(char(*),wchar_t);};
extern"C"{unsigned long wcstombs(char(*),wchar_t const(*),unsigned long);};
class __xcodeml_19{public:long long quot;
public:long long rem;
}
;
typedef class __xcodeml_19 lldiv_t;
extern"C"{long long atoll(char const(*));};
extern"C"{long long llabs(long long)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{class __xcodeml_19 lldiv(long long,long long)/*gccattr const:*/;};
extern"C"{long long strtoll(char const(*),char(*(*)),int);};
extern"C"{unsigned long long strtoull(char const(*),char(*(*)),int);};
extern"C"{void _Exit(int)/*gccattr noreturn:*/;};
extern"C"{void(*aligned_alloc(unsigned long,unsigned long))/*gccattr malloc:*//*gccattr alloc_align:*//*gccattr alloc_size:*/;};
extern"C"{int at_quick_exit(void(*)());};
extern"C"{void quick_exit(int)/*gccattr noreturn:*/;};
extern"C"{char(*realpath(char const(*),char(*)));};
extern"C"{int rand_r(unsigned int(*));};
extern"C"{int posix_memalign(void(*(*)),unsigned long,unsigned long);};
extern"C"{int setenv(char const(*),char const(*),int);};
extern"C"{int unsetenv(char const(*));};
extern"C"{int getsubopt(char(*(*)),char(*const(*)),char(*(*)));};
extern"C"{char(*mkdtemp(char(*)));};
extern"C"{int mkstemp(char(*));};
extern"C"{long a64l(char const(*));};
extern"C"{double drand48();};
extern"C"{double erand48(unsigned short(*));};
extern"C"{int grantpt(int);};
extern"C"{char(*initstate(unsigned int,char(*),unsigned long));};
extern"C"{long jrand48(unsigned short(*));};
extern"C"{char(*l64a(long));};
extern"C"{void lcong48(unsigned short(*));};
extern"C"{long lrand48();};
extern"C"{char(*mktemp(char(*)));};
extern"C"{long mrand48();};
extern"C"{long nrand48(unsigned short(*));};
extern"C"{int posix_openpt(int);};
extern"C"{char(*ptsname(int));};
extern"C"{int putenv(char(*));};
extern"C"{long random();};
extern"C"{unsigned short(*seed48(unsigned short(*)));};
extern"C"{char(*setstate(char(*)));};
extern"C"{void srand48(long);};
extern"C"{void srandom(unsigned int);};
extern"C"{int unlockpt(int);};
extern char const(*malloc_conf);
extern void(*malloc_message)(void(*),char const(*));
extern"C"{void abort2(char const(*),int,void(*(*)));};
extern"C"{unsigned int arc4random();};
extern"C"{void arc4random_buf(void(*),unsigned long);};
extern"C"{unsigned int arc4random_uniform(unsigned int);};
extern"C"{char(*getbsize(int(*),long(*)));};
extern"C"{char(*cgetcap(char(*),char const(*),int));};
extern"C"{int cgetclose();};
extern"C"{int cgetent(char(*(*)),char(*(*)),char const(*));};
extern"C"{int cgetfirst(char(*(*)),char(*(*)));};
extern"C"{int cgetmatch(char const(*),char const(*));};
extern"C"{int cgetnext(char(*(*)),char(*(*)));};
extern"C"{int cgetnum(char(*),char const(*),long(*));};
extern"C"{int cgetset(char const(*));};
extern"C"{int cgetstr(char(*),char const(*),char(*(*)));};
extern"C"{int cgetustr(char(*),char const(*),char(*(*)));};
extern"C"{int daemon(int,int);};
extern"C"{int daemonfd(int,int);};
extern"C"{char(*devname(unsigned long,unsigned short));};
extern"C"{char(*devname_r(unsigned long,unsigned short,char(*),int));};
extern"C"{char(*fdevname(int));};
extern"C"{char(*fdevname_r(int,char(*),int));};
extern"C"{int getloadavg(double(*),int);};
extern"C"{char const(*getprogname());};
extern"C"{int heapsort(void(*),unsigned long,unsigned long,int(*)(void const(*),void const(*)));};
extern"C"{int l64a_r(long,char(*),int);};
extern"C"{int mergesort(void(*),unsigned long,unsigned long,int(*)(void const(*),void const(*)));};
extern"C"{int mkostemp(char(*),int);};
extern"C"{int mkostemps(char(*),int,int);};
extern"C"{int mkostempsat(int,char(*),int,int);};
extern"C"{void qsort_r(void(*),unsigned long,unsigned long,void(*),int(*)(void(*),void const(*),void const(*)));};
extern"C"{int radixsort(unsigned char const(*(*)),int,unsigned char const(*),unsigned int);};
extern"C"{void(*reallocarray(void(*),unsigned long,unsigned long))/*gccattr warn_unused_result:*//*gccattr alloc_size:*/;};
extern"C"{void(*reallocf(void(*),unsigned long))/*gccattr warn_unused_result:*//*gccattr alloc_size:*/;};
extern"C"{int rpmatch(char const(*));};
extern"C"{void setprogname(char const(*));};
extern"C"{int sradixsort(unsigned char const(*(*)),int,unsigned char const(*),unsigned int);};
extern"C"{void srandomdev();};
extern"C"{long long strtonum(char const(*),long long,long long,char const(*(*)));};
extern"C"{long strtoq(char const(*),char(*(*)),int);};
extern"C"{unsigned long strtouq(char const(*),char(*(*)),int);};
extern char(*suboptarg);
typedef void(*constraint_handler_t)(char const(*),void(*),int);
extern"C"{void(*set_constraint_handler_s(void(*handler)(char const(*),void(*),int)))(char const(*),void(*),int);};
extern"C"{void abort_handler_s(char const(*),void(*),int)/*gccattr noreturn:*/;};
extern"C"{void ignore_handler_s(char const(*),void(*),int);};
extern"C"{int qsort_s(void(*),unsigned long,unsigned long,int(*)(void const(*),void const(*),void(*)),void(*));};

union __infinity_un{public:unsigned char __uc[8];
public:double __ud;
}
;
extern union __infinity_un const __infinity;
union __nan_un{public:unsigned char __uc[4];
public:float __uf;
}
;
extern union __nan_un const __nan;
typedef double double_t;
typedef float float_t;
extern int signgam;
extern"C"{int __fpclassifyd(double)/*gccattr const:*/;};
extern"C"{int __fpclassifyf(float)/*gccattr const:*/;};
extern"C"{int __fpclassifyl(long double)/*gccattr const:*/;};
extern"C"{int __isfinitef(float)/*gccattr const:*/;};
extern"C"{int __isfinite(double)/*gccattr const:*/;};
extern"C"{int __isfinitel(long double)/*gccattr const:*/;};
extern"C"{int __isinff(float)/*gccattr const:*/;};
extern"C"{int __isinf(double)/*gccattr const:*/;};
extern"C"{int __isinfl(long double)/*gccattr const:*/;};
extern"C"{int __isnormalf(float)/*gccattr const:*/;};
extern"C"{int __isnormal(double)/*gccattr const:*/;};
extern"C"{int __isnormall(long double)/*gccattr const:*/;};
extern"C"{int __signbit(double)/*gccattr const:*/;};
extern"C"{int __signbitf(float)/*gccattr const:*/;};
extern"C"{int __signbitl(long double)/*gccattr const:*/;};
int __inline_isnan(double __x){return(__x!=__x);
}
int __inline_isnanf(float __x){return(__x!=__x);
}
int __inline_isnanl(long double __x){return(__x!=__x);
}
extern"C"{double acos(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double asin(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double atan(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double atan2(double,double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double cos(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double sin(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double tan(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double cosh(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double sinh(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double tanh(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double exp(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double frexp(double,int(*))/*gccattr nothrow:*/;};
extern"C"{double ldexp(double,int)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double log(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double log10(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double modf(double,double(*))/*gccattr nothrow:*/;};
extern"C"{double pow(double,double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double sqrt(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double ceil(double)/*gccattr nothrow:*//*gccattr const:*/;};
extern"C"{double fabs(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double floor(double)/*gccattr nothrow:*//*gccattr const:*/;};
extern"C"{double fmod(double,double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double acosh(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double asinh(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double atanh(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double cbrt(double)/*gccattr nothrow:*//*gccattr const:*/;};
extern"C"{double erf(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double erfc(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double exp2(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double expm1(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double fma(double,double,double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double hypot(double,double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{int ilogb(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double lgamma(double)/*gccattr nothrow:*/;};
extern"C"{long long llrint(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long long llround(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double log1p(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double log2(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double logb(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long lrint(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long lround(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double nan(char const(*))/*gccattr const:*//*gccattr nothrow:*//*gccattr pure:*/;};
extern"C"{double nextafter(double,double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double remainder(double,double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double remquo(double,double,int(*))/*gccattr nothrow:*/;};
extern"C"{double rint(double)/*gccattr nothrow:*//*gccattr const:*/;};
extern"C"{double j0(double);};
extern"C"{double j1(double);};
extern"C"{double jn(int,double);};
extern"C"{double y0(double);};
extern"C"{double y1(double);};
extern"C"{double yn(int,double);};
extern"C"{double gamma(double);};
extern"C"{double scalb(double,double);};
extern"C"{double copysign(double,double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double fdim(double,double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double fmax(double,double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double fmin(double,double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double nearbyint(double)/*gccattr nothrow:*//*gccattr const:*/;};
extern"C"{double round(double)/*gccattr nothrow:*//*gccattr const:*/;};
extern"C"{double scalbln(double,long)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double scalbn(double,int)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double tgamma(double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double trunc(double)/*gccattr nothrow:*//*gccattr const:*/;};
extern"C"{double drem(double,double);};
extern"C"{int finite(double)/*gccattr const:*/;};
extern"C"{int isnanf(float)/*gccattr const:*/;};
extern"C"{double gamma_r(double,int(*));};
extern"C"{double lgamma_r(double,int(*));};
extern"C"{double significand(double);};
extern"C"{float acosf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float asinf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float atanf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float atan2f(float,float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float cosf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float sinf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float tanf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float coshf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float sinhf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float tanhf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float exp2f(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float expf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float expm1f(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float frexpf(float,int(*))/*gccattr nothrow:*/;};
extern"C"{int ilogbf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float ldexpf(float,int)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float log10f(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float log1pf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float log2f(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float logf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float modff(float,float(*))/*gccattr nothrow:*/;};
extern"C"{float powf(float,float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float sqrtf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float ceilf(float)/*gccattr nothrow:*//*gccattr const:*/;};
extern"C"{float fabsf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float floorf(float)/*gccattr nothrow:*//*gccattr const:*/;};
extern"C"{float fmodf(float,float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float roundf(float)/*gccattr nothrow:*//*gccattr const:*/;};
extern"C"{float erff(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float erfcf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float hypotf(float,float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float lgammaf(float)/*gccattr nothrow:*/;};
extern"C"{float tgammaf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float acoshf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float asinhf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float atanhf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float cbrtf(float)/*gccattr nothrow:*//*gccattr const:*/;};
extern"C"{float logbf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float copysignf(float,float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long long llrintf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long long llroundf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long lrintf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long lroundf(float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float nanf(char const(*))/*gccattr const:*//*gccattr nothrow:*//*gccattr pure:*/;};
extern"C"{float nearbyintf(float)/*gccattr nothrow:*//*gccattr const:*/;};
extern"C"{float nextafterf(float,float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float remainderf(float,float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float remquof(float,float,int(*))/*gccattr nothrow:*/;};
extern"C"{float rintf(float)/*gccattr nothrow:*//*gccattr const:*/;};
extern"C"{float scalblnf(float,long)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float scalbnf(float,int)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float truncf(float)/*gccattr nothrow:*//*gccattr const:*/;};
extern"C"{float fdimf(float,float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float fmaf(float,float,float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float fmaxf(float,float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float fminf(float,float)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float dremf(float,float);};
extern"C"{int finitef(float)/*gccattr const:*/;};
extern"C"{float gammaf(float);};
extern"C"{float j0f(float);};
extern"C"{float j1f(float);};
extern"C"{float jnf(int,float);};
extern"C"{float scalbf(float,float);};
extern"C"{float y0f(float);};
extern"C"{float y1f(float);};
extern"C"{float ynf(int,float);};
extern"C"{float gammaf_r(float,int(*));};
extern"C"{float lgammaf_r(float,int(*));};
extern"C"{float significandf(float);};
extern"C"{long double acoshl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double acosl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double asinhl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double asinl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double atan2l(long double,long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double atanhl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double atanl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double cbrtl(long double)/*gccattr nothrow:*//*gccattr const:*/;};
extern"C"{long double ceill(long double)/*gccattr nothrow:*//*gccattr const:*/;};
extern"C"{long double copysignl(long double,long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double coshl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double cosl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double erfcl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double erfl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double exp2l(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double expl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double expm1l(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double fabsl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double fdiml(long double,long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double floorl(long double)/*gccattr nothrow:*//*gccattr const:*/;};
extern"C"{long double fmal(long double,long double,long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double fmaxl(long double,long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double fminl(long double,long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double fmodl(long double,long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double frexpl(long double,int(*))/*gccattr nothrow:*/;};
extern"C"{long double hypotl(long double,long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{int ilogbl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double ldexpl(long double,int)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double lgammal(long double)/*gccattr nothrow:*/;};
extern"C"{long long llrintl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long long llroundl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double log10l(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double log1pl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double log2l(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double logbl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double logl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long lrintl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long lroundl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double modfl(long double,long double(*))/*gccattr nothrow:*/;};
extern"C"{long double nanl(char const(*))/*gccattr const:*//*gccattr nothrow:*//*gccattr pure:*/;};
extern"C"{long double nearbyintl(long double)/*gccattr nothrow:*//*gccattr const:*/;};
extern"C"{long double nextafterl(long double,long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{double nexttoward(double,long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{float nexttowardf(float,long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double nexttowardl(long double,long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double powl(long double,long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double remainderl(long double,long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double remquol(long double,long double,int(*))/*gccattr nothrow:*/;};
extern"C"{long double rintl(long double)/*gccattr nothrow:*//*gccattr const:*/;};
extern"C"{long double roundl(long double)/*gccattr nothrow:*//*gccattr const:*/;};
extern"C"{long double scalblnl(long double,long)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double scalbnl(long double,int)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double sinhl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double sinl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double sqrtl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double tanhl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double tanl(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double tgammal(long double)/*gccattr const:*//*gccattr nothrow:*/;};
extern"C"{long double truncl(long double)/*gccattr nothrow:*//*gccattr const:*/;};
extern"C"{long double lgammal_r(long double,int(*));};
extern"C"{void sincos(double,double(*),double(*));};
extern"C"{void sincosf(float,float(*),float(*));};
extern"C"{void sincosl(long double,long double(*),long double(*));};

template<typename __xcodeml_template_type_0_0>bool __libcpp_signbit(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return _Generic(__lcpp_x){float: (__signbitf(__lcpp_x)),
double: (__signbit(__lcpp_x)),
long double: (__signbitl(__lcpp_x)),
float volatile: (__signbitf(__lcpp_x)),
double volatile: (__signbit(__lcpp_x)),
long double volatile: (__signbitl(__lcpp_x)),
float volatile const: (__signbitf(__lcpp_x)),
double volatile const: (__signbit(__lcpp_x)),
long double volatile const: (__signbitl(__lcpp_x)),
float const: (__signbitf(__lcpp_x)),
double const: (__signbit(__lcpp_x)),
long double const: (__signbitl(__lcpp_x)),
};
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,bool>::type signbit(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__libcpp_signbit(((typename __promote<__xcodeml_template_type_0_0,void,void>::type)__lcpp_x)));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,bool>::type signbit(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__lcpp_x<0);
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,bool>::type signbit(__xcodeml_template_type_0_0)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return false;
}
template<typename __xcodeml_template_type_0_0>int __libcpp_fpclassify(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return _Generic(__lcpp_x){float: (__fpclassifyf(__lcpp_x)),
double: (__fpclassifyd(__lcpp_x)),
long double: (__fpclassifyl(__lcpp_x)),
float volatile: (__fpclassifyf(__lcpp_x)),
double volatile: (__fpclassifyd(__lcpp_x)),
long double volatile: (__fpclassifyl(__lcpp_x)),
float volatile const: (__fpclassifyf(__lcpp_x)),
double volatile const: (__fpclassifyd(__lcpp_x)),
long double volatile const: (__fpclassifyl(__lcpp_x)),
float const: (__fpclassifyf(__lcpp_x)),
double const: (__fpclassifyd(__lcpp_x)),
long double const: (__fpclassifyl(__lcpp_x)),
};
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,int>::type fpclassify(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__libcpp_fpclassify(((typename __promote<__xcodeml_template_type_0_0,void,void>::type)__lcpp_x)));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,int>::type fpclassify(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((__lcpp_x==0)?0x10:0x04);
}
template<typename __xcodeml_template_type_0_0>bool __libcpp_isfinite(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return _Generic(__lcpp_x){float: (__isfinitef(__lcpp_x)),
double: (__isfinite(__lcpp_x)),
long double: (__isfinitel(__lcpp_x)),
float volatile: (__isfinitef(__lcpp_x)),
double volatile: (__isfinite(__lcpp_x)),
long double volatile: (__isfinitel(__lcpp_x)),
float volatile const: (__isfinitef(__lcpp_x)),
double volatile const: (__isfinite(__lcpp_x)),
long double volatile const: (__isfinitel(__lcpp_x)),
float const: (__isfinitef(__lcpp_x)),
double const: (__isfinite(__lcpp_x)),
long double const: (__isfinitel(__lcpp_x)),
};
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,bool>::type isfinite(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__libcpp_isfinite(((typename __promote<__xcodeml_template_type_0_0,void,void>::type)__lcpp_x)));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,bool>::type isfinite(__xcodeml_template_type_0_0)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return true;
}
template<typename __xcodeml_template_type_0_0>bool __libcpp_isinf(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return _Generic(__lcpp_x){float: (__isinff(__lcpp_x)),
double: (__isinf(__lcpp_x)),
long double: (__isinfl(__lcpp_x)),
float volatile: (__isinff(__lcpp_x)),
double volatile: (__isinf(__lcpp_x)),
long double volatile: (__isinfl(__lcpp_x)),
float volatile const: (__isinff(__lcpp_x)),
double volatile const: (__isinf(__lcpp_x)),
long double volatile const: (__isinfl(__lcpp_x)),
float const: (__isinff(__lcpp_x)),
double const: (__isinf(__lcpp_x)),
long double const: (__isinfl(__lcpp_x)),
};
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,bool>::type isinf(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__libcpp_isinf(((typename __promote<__xcodeml_template_type_0_0,void,void>::type)__lcpp_x)));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,bool>::type isinf(__xcodeml_template_type_0_0)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return false;
}
bool isinf(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__libcpp_isinf(__lcpp_x));
}
bool isinf(double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr enable_if:true*/{return(__libcpp_isinf(__lcpp_x));
}
bool isinf(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__libcpp_isinf(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>bool __libcpp_isnan(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return _Generic(__lcpp_x){float: (__inline_isnanf(__lcpp_x)),
double: (__inline_isnan(__lcpp_x)),
long double: (__inline_isnanl(__lcpp_x)),
float volatile: (__inline_isnanf(__lcpp_x)),
double volatile: (__inline_isnan(__lcpp_x)),
long double volatile: (__inline_isnanl(__lcpp_x)),
float volatile const: (__inline_isnanf(__lcpp_x)),
double volatile const: (__inline_isnan(__lcpp_x)),
long double volatile const: (__inline_isnanl(__lcpp_x)),
float const: (__inline_isnanf(__lcpp_x)),
double const: (__inline_isnan(__lcpp_x)),
long double const: (__inline_isnanl(__lcpp_x)),
};
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,bool>::type isnan(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__libcpp_isnan(((typename __promote<__xcodeml_template_type_0_0,void,void>::type)__lcpp_x)));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,bool>::type isnan(__xcodeml_template_type_0_0)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return false;
}
bool isnan(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__libcpp_isnan(__lcpp_x));
}
bool isnan(double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr enable_if:true*/{return(__libcpp_isnan(__lcpp_x));
}
bool isnan(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__libcpp_isnan(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>bool __libcpp_isnormal(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return _Generic(__lcpp_x){float: (__isnormalf(__lcpp_x)),
double: (__isnormal(__lcpp_x)),
long double: (__isnormall(__lcpp_x)),
float volatile: (__isnormalf(__lcpp_x)),
double volatile: (__isnormal(__lcpp_x)),
long double volatile: (__isnormall(__lcpp_x)),
float volatile const: (__isnormalf(__lcpp_x)),
double volatile const: (__isnormal(__lcpp_x)),
long double volatile const: (__isnormall(__lcpp_x)),
float const: (__isnormalf(__lcpp_x)),
double const: (__isnormal(__lcpp_x)),
long double const: (__isnormall(__lcpp_x)),
};
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,bool>::type isnormal(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__libcpp_isnormal(((typename __promote<__xcodeml_template_type_0_0,void,void>::type)__lcpp_x)));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,bool>::type isnormal(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__lcpp_x!=0);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool __libcpp_isgreater(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_isgreater(__lcpp_x,__lcpp_y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename enable_if<expression,bool>::type isgreater(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type type;
return(__libcpp_isgreater(((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_x),((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_y)));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool __libcpp_isgreaterequal(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_isgreaterequal(__lcpp_x,__lcpp_y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename enable_if<expression,bool>::type isgreaterequal(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type type;
return(__libcpp_isgreaterequal(((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_x),((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_y)));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool __libcpp_isless(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_isless(__lcpp_x,__lcpp_y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename enable_if<expression,bool>::type isless(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type type;
return(__libcpp_isless(((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_x),((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_y)));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool __libcpp_islessequal(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_islessequal(__lcpp_x,__lcpp_y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename enable_if<expression,bool>::type islessequal(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type type;
return(__libcpp_islessequal(((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_x),((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_y)));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool __libcpp_islessgreater(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_islessgreater(__lcpp_x,__lcpp_y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename enable_if<expression,bool>::type islessgreater(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type type;
return(__libcpp_islessgreater(((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_x),((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_y)));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool __libcpp_isunordered(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__builtin_isunordered(__lcpp_x,__lcpp_y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename enable_if<expression,bool>::type isunordered(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type type;
return(__libcpp_isunordered(((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_x),((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_y)));
}
long abs(long __x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::labs(__x));
}
long long abs(long long __x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::llabs(__x));
}
float abs(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::fabsf(__lcpp_x));
}
double abs(double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::fabs(__lcpp_x));
}
long double abs(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::fabsl(__lcpp_x));
}
class::__xcodeml_18 div(long __x,long __y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::ldiv(__x,__y));
}
class __xcodeml_19 div(long long __x,long long __y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::lldiv(__x,__y));
}
float acos(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::acosf(__lcpp_x));
}
long double acos(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::acosl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type acos(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::acos(((double)__lcpp_x)));
}
float asin(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::asinf(__lcpp_x));
}
long double asin(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::asinl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type asin(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::asin(((double)__lcpp_x)));
}
float atan(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::atanf(__lcpp_x));
}
long double atan(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::atanl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type atan(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::atan(((double)__lcpp_x)));
}
float atan2(float __lcpp_y,float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::atan2f(__lcpp_y,__lcpp_x));
}
long double atan2(long double __lcpp_y,long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::atan2l(__lcpp_y,__lcpp_x));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename /*DTS*/_MetaBase<expression>::template _EnableIfImpl<__promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void> >::type atan2(__xcodeml_template_type_0_0 __lcpp_y,__xcodeml_template_type_0_1 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type __result_type;
static_assert((!(std::integral_constant<bool,expression>::value&&std::integral_constant<bool,expression>::value)),"");
return(::atan2(((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_y),((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_x)));
}
float ceil(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::ceilf(__lcpp_x));
}
long double ceil(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::ceill(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type ceil(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::ceil(((double)__lcpp_x)));
}
float cos(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::cosf(__lcpp_x));
}
long double cos(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::cosl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type cos(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::cos(((double)__lcpp_x)));
}
float cosh(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::coshf(__lcpp_x));
}
long double cosh(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::coshl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type cosh(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::cosh(((double)__lcpp_x)));
}
float exp(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::expf(__lcpp_x));
}
long double exp(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::expl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type exp(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::exp(((double)__lcpp_x)));
}
float fabs(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::fabsf(__lcpp_x));
}
long double fabs(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::fabsl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type fabs(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::fabs(((double)__lcpp_x)));
}
float floor(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::floorf(__lcpp_x));
}
long double floor(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::floorl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type floor(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::floor(((double)__lcpp_x)));
}
float fmod(float __lcpp_x,float __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::fmodf(__lcpp_x,__lcpp_y));
}
long double fmod(long double __lcpp_x,long double __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::fmodl(__lcpp_x,__lcpp_y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename /*DTS*/_MetaBase<expression>::template _EnableIfImpl<__promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void> >::type fmod(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type __result_type;
static_assert((!(std::integral_constant<bool,expression>::value&&std::integral_constant<bool,expression>::value)),"");
return(::fmod(((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_x),((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_y)));
}
float frexp(float __lcpp_x,int(*__lcpp_e))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::frexpf(__lcpp_x,__lcpp_e));
}
long double frexp(long double __lcpp_x,int(*__lcpp_e))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::frexpl(__lcpp_x,__lcpp_e));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type frexp(__xcodeml_template_type_0_0 __lcpp_x,int(*__lcpp_e))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::frexp(((double)__lcpp_x),__lcpp_e));
}
float ldexp(float __lcpp_x,int __lcpp_e)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::ldexpf(__lcpp_x,__lcpp_e));
}
long double ldexp(long double __lcpp_x,int __lcpp_e)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::ldexpl(__lcpp_x,__lcpp_e));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type ldexp(__xcodeml_template_type_0_0 __lcpp_x,int __lcpp_e)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::ldexp(((double)__lcpp_x),__lcpp_e));
}
float log(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::logf(__lcpp_x));
}
long double log(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::logl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type log(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::log(((double)__lcpp_x)));
}
float log10(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::log10f(__lcpp_x));
}
long double log10(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::log10l(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type log10(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::log10(((double)__lcpp_x)));
}
float modf(float __lcpp_x,float(*__lcpp_y))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::modff(__lcpp_x,__lcpp_y));
}
long double modf(long double __lcpp_x,long double(*__lcpp_y))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::modfl(__lcpp_x,__lcpp_y));
}
float pow(float __lcpp_x,float __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::powf(__lcpp_x,__lcpp_y));
}
long double pow(long double __lcpp_x,long double __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::powl(__lcpp_x,__lcpp_y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename /*DTS*/_MetaBase<expression>::template _EnableIfImpl<__promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void> >::type pow(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type __result_type;
static_assert((!(std::integral_constant<bool,expression>::value&&std::integral_constant<bool,expression>::value)),"");
return(::pow(((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_x),((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_y)));
}
float sin(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::sinf(__lcpp_x));
}
long double sin(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::sinl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type sin(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::sin(((double)__lcpp_x)));
}
float sinh(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::sinhf(__lcpp_x));
}
long double sinh(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::sinhl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type sinh(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::sinh(((double)__lcpp_x)));
}
float sqrt(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::sqrtf(__lcpp_x));
}
long double sqrt(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::sqrtl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type sqrt(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::sqrt(((double)__lcpp_x)));
}
float tan(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::tanf(__lcpp_x));
}
long double tan(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::tanl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type tan(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::tan(((double)__lcpp_x)));
}
float tanh(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::tanhf(__lcpp_x));
}
long double tanh(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::tanhl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type tanh(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::tanh(((double)__lcpp_x)));
}
float acosh(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::acoshf(__lcpp_x));
}
long double acosh(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::acoshl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type acosh(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::acosh(((double)__lcpp_x)));
}
float asinh(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::asinhf(__lcpp_x));
}
long double asinh(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::asinhl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type asinh(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::asinh(((double)__lcpp_x)));
}
float atanh(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::atanhf(__lcpp_x));
}
long double atanh(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::atanhl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type atanh(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::atanh(((double)__lcpp_x)));
}
float cbrt(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::cbrtf(__lcpp_x));
}
long double cbrt(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::cbrtl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type cbrt(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::cbrt(((double)__lcpp_x)));
}
float copysign(float __lcpp_x,float __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::copysignf(__lcpp_x,__lcpp_y));
}
long double copysign(long double __lcpp_x,long double __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::copysignl(__lcpp_x,__lcpp_y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename /*DTS*/_MetaBase<expression>::template _EnableIfImpl<__promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void> >::type copysign(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type __result_type;
static_assert((!(std::integral_constant<bool,expression>::value&&std::integral_constant<bool,expression>::value)),"");
return(::copysign(((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_x),((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_y)));
}
float erf(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::erff(__lcpp_x));
}
long double erf(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::erfl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type erf(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::erf(((double)__lcpp_x)));
}
float erfc(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::erfcf(__lcpp_x));
}
long double erfc(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::erfcl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type erfc(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::erfc(((double)__lcpp_x)));
}
float exp2(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::exp2f(__lcpp_x));
}
long double exp2(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::exp2l(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type exp2(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::exp2(((double)__lcpp_x)));
}
float expm1(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::expm1f(__lcpp_x));
}
long double expm1(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::expm1l(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type expm1(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::expm1(((double)__lcpp_x)));
}
float fdim(float __lcpp_x,float __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::fdimf(__lcpp_x,__lcpp_y));
}
long double fdim(long double __lcpp_x,long double __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::fdiml(__lcpp_x,__lcpp_y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename /*DTS*/_MetaBase<expression>::template _EnableIfImpl<__promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void> >::type fdim(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type __result_type;
static_assert((!(std::integral_constant<bool,expression>::value&&std::integral_constant<bool,expression>::value)),"");
return(::fdim(((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_x),((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_y)));
}
float fma(float __lcpp_x,float __lcpp_y,float __lcpp_z)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::fmaf(__lcpp_x,__lcpp_y,__lcpp_z));
}
long double fma(long double __lcpp_x,long double __lcpp_y,long double __lcpp_z)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::fmal(__lcpp_x,__lcpp_y,__lcpp_z));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>typename /*DTS*/_MetaBase<expression>::template _EnableIfImpl<__promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2> >::type fma(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y,__xcodeml_template_type_0_2 __lcpp_z)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>::type __result_type;
static_assert((!((std::integral_constant<bool,expression>::value&&std::integral_constant<bool,expression>::value)&&std::integral_constant<bool,expression>::value)),"");
return(::fma(((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>::type)__lcpp_x),((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>::type)__lcpp_y),((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>::type)__lcpp_z)));
}
float fmax(float __lcpp_x,float __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::fmaxf(__lcpp_x,__lcpp_y));
}
long double fmax(long double __lcpp_x,long double __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::fmaxl(__lcpp_x,__lcpp_y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename /*DTS*/_MetaBase<expression>::template _EnableIfImpl<__promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void> >::type fmax(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type __result_type;
static_assert((!(std::integral_constant<bool,expression>::value&&std::integral_constant<bool,expression>::value)),"");
return(::fmax(((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_x),((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_y)));
}
float fmin(float __lcpp_x,float __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::fminf(__lcpp_x,__lcpp_y));
}
long double fmin(long double __lcpp_x,long double __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::fminl(__lcpp_x,__lcpp_y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename /*DTS*/_MetaBase<expression>::template _EnableIfImpl<__promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void> >::type fmin(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type __result_type;
static_assert((!(std::integral_constant<bool,expression>::value&&std::integral_constant<bool,expression>::value)),"");
return(::fmin(((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_x),((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_y)));
}
float hypot(float __lcpp_x,float __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::hypotf(__lcpp_x,__lcpp_y));
}
long double hypot(long double __lcpp_x,long double __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::hypotl(__lcpp_x,__lcpp_y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename /*DTS*/_MetaBase<expression>::template _EnableIfImpl<__promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void> >::type hypot(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type __result_type;
static_assert((!(std::integral_constant<bool,expression>::value&&std::integral_constant<bool,expression>::value)),"");
return(::hypot(((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_x),((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_y)));
}
int ilogb(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::ilogbf(__lcpp_x));
}
int ilogb(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::ilogbl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,int>::type ilogb(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::ilogb(((double)__lcpp_x)));
}
float lgamma(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::lgammaf(__lcpp_x));
}
long double lgamma(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::lgammal(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type lgamma(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::lgamma(((double)__lcpp_x)));
}
long long llrint(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::llrintf(__lcpp_x));
}
long long llrint(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::llrintl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,long long>::type llrint(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::llrint(((double)__lcpp_x)));
}
long long llround(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::llroundf(__lcpp_x));
}
long long llround(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::llroundl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,long long>::type llround(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::llround(((double)__lcpp_x)));
}
float log1p(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::log1pf(__lcpp_x));
}
long double log1p(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::log1pl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type log1p(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::log1p(((double)__lcpp_x)));
}
float log2(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::log2f(__lcpp_x));
}
long double log2(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::log2l(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type log2(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::log2(((double)__lcpp_x)));
}
float logb(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::logbf(__lcpp_x));
}
long double logb(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::logbl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type logb(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::logb(((double)__lcpp_x)));
}
long lrint(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::lrintf(__lcpp_x));
}
long lrint(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::lrintl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,long>::type lrint(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::lrint(((double)__lcpp_x)));
}
long lround(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::lroundf(__lcpp_x));
}
long lround(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::lroundl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,long>::type lround(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::lround(((double)__lcpp_x)));
}
float nearbyint(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::nearbyintf(__lcpp_x));
}
long double nearbyint(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::nearbyintl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type nearbyint(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::nearbyint(((double)__lcpp_x)));
}
float nextafter(float __lcpp_x,float __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::nextafterf(__lcpp_x,__lcpp_y));
}
long double nextafter(long double __lcpp_x,long double __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::nextafterl(__lcpp_x,__lcpp_y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename /*DTS*/_MetaBase<expression>::template _EnableIfImpl<__promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void> >::type nextafter(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type __result_type;
static_assert((!(std::integral_constant<bool,expression>::value&&std::integral_constant<bool,expression>::value)),"");
return(::nextafter(((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_x),((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_y)));
}
float nexttoward(float __lcpp_x,long double __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::nexttowardf(__lcpp_x,__lcpp_y));
}
long double nexttoward(long double __lcpp_x,long double __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::nexttowardl(__lcpp_x,__lcpp_y));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type nexttoward(__xcodeml_template_type_0_0 __lcpp_x,long double __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::nexttoward(((double)__lcpp_x),__lcpp_y));
}
float remainder(float __lcpp_x,float __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::remainderf(__lcpp_x,__lcpp_y));
}
long double remainder(long double __lcpp_x,long double __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::remainderl(__lcpp_x,__lcpp_y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename /*DTS*/_MetaBase<expression>::template _EnableIfImpl<__promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void> >::type remainder(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type __result_type;
static_assert((!(std::integral_constant<bool,expression>::value&&std::integral_constant<bool,expression>::value)),"");
return(::remainder(((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_x),((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_y)));
}
float remquo(float __lcpp_x,float __lcpp_y,int(*__lcpp_z))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::remquof(__lcpp_x,__lcpp_y,__lcpp_z));
}
long double remquo(long double __lcpp_x,long double __lcpp_y,int(*__lcpp_z))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::remquol(__lcpp_x,__lcpp_y,__lcpp_z));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename /*DTS*/_MetaBase<expression>::template _EnableIfImpl<__promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void> >::type remquo(__xcodeml_template_type_0_0 __lcpp_x,__xcodeml_template_type_0_1 __lcpp_y,int(*__lcpp_z))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type __result_type;
static_assert((!(std::integral_constant<bool,expression>::value&&std::integral_constant<bool,expression>::value)),"");
return(::remquo(((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_x),((typename __promote<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,void>::type)__lcpp_y),__lcpp_z));
}
float rint(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::rintf(__lcpp_x));
}
long double rint(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::rintl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type rint(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::rint(((double)__lcpp_x)));
}
float round(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::roundf(__lcpp_x));
}
long double round(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::roundl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type round(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::round(((double)__lcpp_x)));
}
float scalbln(float __lcpp_x,long __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::scalblnf(__lcpp_x,__lcpp_y));
}
long double scalbln(long double __lcpp_x,long __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::scalblnl(__lcpp_x,__lcpp_y));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type scalbln(__xcodeml_template_type_0_0 __lcpp_x,long __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::scalbln(((double)__lcpp_x),__lcpp_y));
}
float scalbn(float __lcpp_x,int __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::scalbnf(__lcpp_x,__lcpp_y));
}
long double scalbn(long double __lcpp_x,int __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::scalbnl(__lcpp_x,__lcpp_y));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type scalbn(__xcodeml_template_type_0_0 __lcpp_x,int __lcpp_y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::scalbn(((double)__lcpp_x),__lcpp_y));
}
float tgamma(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::tgammaf(__lcpp_x));
}
long double tgamma(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::tgammal(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type tgamma(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::tgamma(((double)__lcpp_x)));
}
float trunc(float __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::truncf(__lcpp_x));
}
long double trunc(long double __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::truncl(__lcpp_x));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,double>::type trunc(__xcodeml_template_type_0_0 __lcpp_x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(::trunc(((double)__lcpp_x)));
}

namespace std{namespace __1{using::size_t;
using::div_t;
using::ldiv_t;
using::lldiv_t;
using::atof;
using::atoi;
using::atol;
using::atoll;
using::strtod;
using::strtof;
using::strtold;
using::strtol;
using::strtoll;
using::strtoul;
using::strtoull;
using::rand;
using::srand;
using::calloc;
using::free;
using::malloc;
using::realloc;
using::abort;
using::atexit;
using::exit;
using::_Exit;
using::getenv;
using::system;
using::bsearch;
using::qsort;
using::abs;
using::labs;
using::llabs;
using::div;
using::ldiv;
using::lldiv;
using::mblen;
using::mbtowc;
using::wctomb;
using::mbstowcs;
using::wcstombs;
using::at_quick_exit;
using::quick_exit;
}
}
namespace std{class exception{public:
public:exception()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:virtual~exception();
public:virtual char const(*what()const);
}
;
class bad_exception:public exception{public:
public:bad_exception():exception()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:virtual~bad_exception();
public:virtual char const(*what()const);
}
;
typedef void(*unexpected_handler)();
void(*set_unexpected(void(*)()))()/*gccattr visibility:*/;
void(*get_unexpected())()/*gccattr visibility:*/;
void unexpected()/*gccattr noreturn:*//*gccattr visibility:*/;
typedef void(*terminate_handler)();
void(*set_terminate(void(*)()))()/*gccattr visibility:*/;
void(*get_terminate())()/*gccattr visibility:*/;
void terminate()/*gccattr noreturn:*//*gccattr visibility:*/;
bool uncaught_exception()/*gccattr visibility:*/;
int uncaught_exceptions()/*gccattr visibility:*/;
class exception_ptr/*gccattr visibility:*/;
class::std::exception_ptr current_exception()/*gccattr visibility:*/;
void rethrow_exception(class::std::exception_ptr)/*gccattr noreturn:*//*gccattr visibility:*/;
class exception_ptr{private:void(*__ptr_);
public:
public:exception_ptr():__ptr_()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:exception_ptr(nullptr_t):__ptr_()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:exception_ptr(class exception_ptr const&);
public:class::std::exception_ptr&operator=(class exception_ptr const&);
public:~exception_ptr();
public:operator bool()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__ptr_!=nullptr);
}
public:friend bool operator==(class exception_ptr const&__x,class exception_ptr const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__x.__ptr_==__y.__ptr_);
};
public:friend bool operator!=(class exception_ptr const&__x,class exception_ptr const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator==(__x,__y));
};
public:friend class::std::exception_ptr current_exception()/*gccattr visibility:*/;
public:friend void rethrow_exception(class::std::exception_ptr)/*gccattr noreturn:*//*gccattr visibility:*/;
}
;
template<typename __xcodeml_template_type_0_0>class::std::exception_ptr make_exception_ptr(__xcodeml_template_type_0_0 __e)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{try{throw __e;
}catch(...){return(current_exception());
}
;
}
class nested_exception{private:class::std::exception_ptr __ptr_;
public:
public:nested_exception();
public:virtual~nested_exception();
public:void rethrow_nested()const;
public:class::std::exception_ptr nested_ptr()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<class::std::exception_ptr>::t(this->__ptr_);
}
}
;
template<typename __xcodeml_template_type_0_0>class __nested:public __xcodeml_template_type_0_0,public nested_exception{public:__nested(__xcodeml_template_type_0_0 const&__t):(__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,bool>class __throw_with_nested;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __throw_with_nested<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,1>{public:static void __do_throw(__xcodeml_template_type_0_0&& __t)/*gccattr noreturn:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{throw __xcodeml_identity<__nested<__xcodeml_template_type_0_1> >::t((std::__1::forward<__xcodeml_template_type_0_0>(__t)));
}
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __throw_with_nested<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,0>{public:static void __do_throw(__xcodeml_template_type_0_0&& __t)/*gccattr noreturn:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{throw(std::__1::forward<__xcodeml_template_type_0_0>(__t));
}
}
;
template<typename __xcodeml_template_type_0_0>void throw_with_nested(__xcodeml_template_type_0_0&& __t)/*gccattr noreturn:*/{typedef typename decay<__xcodeml_template_type_0_0>::type _Up;
static_assert(is_copy_constructible<typename decay<__xcodeml_template_type_0_0>::type>::value,"type thrown must be CopyConstructible");
(__throw_with_nested<__xcodeml_template_type_0_0,typename decay<__xcodeml_template_type_0_0>::type,expression>::__do_throw((std::__1::forward<__xcodeml_template_type_0_0>(__t))));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __can_dynamic_cast:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>void rethrow_if_nested(__xcodeml_template_type_0_0 const&__e,typename enable_if<expression,void>::type(*))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{class nested_exception const(*__nep)=dynamic_cast<class nested_exception const(*)>((std::__1::addressof(__e)));
if(__nep){(__nep->rethrow_nested());};
}
template<typename __xcodeml_template_type_0_0>void rethrow_if_nested(__xcodeml_template_type_0_0 const&,typename enable_if<expression,void>::type(*))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
}
namespace std{class __type_info_implementations{public:class __string_impl_base{public:typedef char const(*__type_name_t);
public:static char const(*__type_name_to_string(char const(*__v)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr always_inline:*/{return __v;
}
public:static char const(*__string_to_type_name(char const(*__v)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr always_inline:*/{return __v;
}
}
;
public:class __unique_impl:public __string_impl_base{public:static unsigned long __hash(char const(*__v))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr always_inline:*/{return reinterpret_cast<unsigned long>(__v);
}
public:static bool __eq(char const(*__lhs),char const(*__rhs))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr always_inline:*/{return(__lhs==__rhs);
}
public:static bool __lt(char const(*__lhs),char const(*__rhs))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr always_inline:*/{return(__lhs<__rhs);
}
}
;
public:class __non_unique_impl:public __string_impl_base{public:static unsigned long __hash(char const(*__ptr))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr always_inline:*/{unsigned long __hash=5381;
while(unsigned char __c=static_cast<unsigned char>((*(__ptr++)))){__c;};
return __hash;
}
public:static bool __eq(char const(*__lhs),char const(*__rhs))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr always_inline:*/{return((__lhs==__rhs)||((__builtin_strcmp(__lhs,__rhs))==0));
}
public:static bool __lt(char const(*__lhs),char const(*__rhs))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr always_inline:*/{return((__builtin_strcmp(__lhs,__rhs))<0);
}
}
;
public:class __non_unique_arm_rtti_bit_impl{public:typedef unsigned long __type_name_t;
public:static char const(*__type_name_to_string(unsigned long __v))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr always_inline:*/{return reinterpret_cast<char const(*)>((__v&(~integral_constant::value)));
}
public:static unsigned long __string_to_type_name(char const(*__v))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr always_inline:*/{return reinterpret_cast<unsigned long>(__v);
}
public:static unsigned long __hash(unsigned long __v)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr always_inline:*/{if((__is_type_name_unique(__v))){return reinterpret_cast<unsigned long>(__v);};
return(__non_unique_impl::__hash((__type_name_to_string(__v))));
}
public:static bool __eq(unsigned long __lhs,unsigned long __rhs)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr always_inline:*/{if((__lhs==__rhs)){return true;};
if((__is_type_name_unique(__lhs,__rhs))){return false;};
return((__builtin_strcmp((__type_name_to_string(__lhs)),(__type_name_to_string(__rhs))))==0);
}
public:static bool __lt(unsigned long __lhs,unsigned long __rhs)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr always_inline:*/{if((__is_type_name_unique(__lhs,__rhs))){return(__lhs<__rhs);};
return((__builtin_strcmp((__type_name_to_string(__lhs)),(__type_name_to_string(__rhs))))<0);
}
private:
private:typedef class::std::__1::integral_constant<unsigned long,9223372036854775808>__non_unique_rtti_bit;
private:static bool __is_type_name_unique(unsigned long __lhs)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!(__lhs&integral_constant::value));
}
private:static bool __is_type_name_unique(unsigned long __lhs,unsigned long __rhs)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!((__lhs&__rhs)&integral_constant::value));
}
}
;
public:typedef class::std::__type_info_implementations::__unique_impl __impl;
}
;
class type_info{private:class::std::type_info&operator=(class type_info const&);
private:type_info(class type_info const&);
protected:
protected:typedef class::std::__type_info_implementations::__unique_impl __impl;
protected:char const(*__type_name);
protected:type_info(char const(*__n)):__type_name((__unique_impl::__string_to_type_name(__n)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:
public:virtual~type_info();
public:char const(*name()const)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__unique_impl::__type_name_to_string(this->__type_name));
}
public:bool before(class type_info const&__arg)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__unique_impl::__lt(this->__type_name,__arg.__type_name));
}
public:unsigned long hash_code()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__unique_impl::__hash(this->__type_name));
}
public:bool operator==(class type_info const&__arg)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__unique_impl::__eq(this->__type_name,__arg.__type_name));
}
public:bool operator!=(class type_info const&__arg)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!(this->operator==(__arg)));
}
}
;
class bad_cast:public exception{public:
public:bad_cast();
public:virtual~bad_cast();
public:virtual char const(*what()const);
}
;
class bad_typeid:public exception{public:
public:bad_typeid();
public:virtual~bad_typeid();
public:virtual char const(*what()const);
}
;
}
namespace std{namespace __1{void __throw_bad_cast()/*gccattr noreturn:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{throw __xcodeml_identity<class::std::bad_cast>::t();
}
}
}
namespace std{class nothrow_t{}
;
extern class nothrow_t const nothrow;
class bad_alloc:public exception{public:
public:bad_alloc();
public:virtual~bad_alloc();
public:virtual char const(*what()const);
}
;
class bad_array_new_length:public bad_alloc{public:
public:bad_array_new_length();
public:virtual~bad_array_new_length();
public:virtual char const(*what()const);
}
;
typedef void(*new_handler)();
void(*set_new_handler(void(*)()))()/*gccattr visibility:*/;
void(*get_new_handler())()/*gccattr visibility:*/;
void __throw_bad_alloc()/*gccattr noreturn:*//*gccattr visibility:*/;
enum align_val_t{};
}
void(*operator new(unsigned long __sz))/*gccattr visibility:*/;
void(*operator new(unsigned long __sz,class nothrow_t const&))/*gccattr visibility:*//*gccattr malloc:*/;
void operator delete(void(*__p))/*gccattr visibility:*/;
void operator delete(void(*__p),class nothrow_t const&)/*gccattr visibility:*/;
void(*operator new[](unsigned long __sz))/*gccattr visibility:*/;
void(*operator new[](unsigned long __sz,class nothrow_t const&))/*gccattr visibility:*//*gccattr malloc:*/;
void operator delete[](void(*__p))/*gccattr visibility:*/;
void operator delete[](void(*__p),class nothrow_t const&)/*gccattr visibility:*/;
void(*operator new(unsigned long __sz,enum align_val_t))/*gccattr visibility:*/;
void(*operator new(unsigned long __sz,enum align_val_t,class nothrow_t const&))/*gccattr visibility:*//*gccattr malloc:*/;
void operator delete(void(*__p),enum align_val_t)/*gccattr visibility:*/;
void operator delete(void(*__p),enum align_val_t,class nothrow_t const&)/*gccattr visibility:*/;
void(*operator new[](unsigned long __sz,enum align_val_t))/*gccattr visibility:*/;
void(*operator new[](unsigned long __sz,enum align_val_t,class nothrow_t const&))/*gccattr visibility:*//*gccattr malloc:*/;
void operator delete[](void(*__p),enum align_val_t)/*gccattr visibility:*/;
void operator delete[](void(*__p),enum align_val_t,class nothrow_t const&)/*gccattr visibility:*/;
void(*operator new(unsigned long,void(*__p)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __p;
}
void(*operator new[](unsigned long,void(*__p)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __p;
}
void operator delete(void(*),void(*))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
void operator delete[](void(*),void(*))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
namespace std{namespace __1{bool __is_overaligned_for_new(unsigned long __align)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__align>16UL);
}
void(*__libcpp_allocate(unsigned long __size,unsigned long __align))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((void)__align);
return(__builtin_operator_new(__size));
}
class _DeallocateCaller{public:static void __do_deallocate_handle_size_align(void(*__ptr),unsigned long __size,unsigned long __align)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((void)__align);
return(__do_deallocate_handle_size(__ptr,__size));
}
public:static void __do_deallocate_handle_align(void(*__ptr),unsigned long __align)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((void)__align);
return(__do_call(__ptr));
}
private:
private:static void __do_deallocate_handle_size(void(*__ptr),unsigned long __size){((void)__size);
return(__do_call(__ptr));
}
private:
private:template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>static void __do_call(void(*__ptr),__xcodeml_template_type_0_0 __a1,__xcodeml_template_type_0_1 __a2){return(__builtin_operator_delete(__ptr,__a1,__a2));
}
private:template<typename __xcodeml_template_type_0_0>static void __do_call(void(*__ptr),__xcodeml_template_type_0_0 __a1){return(__builtin_operator_delete(__ptr,__a1));
}
private:static void __do_call(void(*__ptr)){return(__builtin_operator_delete(__ptr));
}
}
;
void __libcpp_deallocate(void(*__ptr),unsigned long __size,unsigned long __align)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(_DeallocateCaller::__do_deallocate_handle_size_align(__ptr,__size,__align));
}
void __libcpp_deallocate_unsized(void(*__ptr),unsigned long __align)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(_DeallocateCaller::__do_deallocate_handle_align(__ptr,__align));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0(*__launder(__xcodeml_template_type_0_0(*__p))){static_assert((!is_function<__xcodeml_template_type_0_0>::value),"can't launder functions");
static_assert((!is_same<void,typename remove_cv<__xcodeml_template_type_0_0>::type>::value),"can't launder cv-void");
return(__builtin_launder(__p));
}
}
}
namespace std{namespace __1{template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class binary_function{public:typedef __xcodeml_template_type_0_0 first_argument_type;
public:typedef __xcodeml_template_type_0_1 second_argument_type;
public:typedef __xcodeml_template_type_0_2 result_type;
}
;
;
template<typename __xcodeml_template_type_0_0>class __has_result_type{private:
private:class __two{public:char __lx;
public:char __lxx;
}
;
private:template<typename __xcodeml_template_type_1_0>static class::std::__1::__has_result_type::__two __test(...)
private:template<typename __xcodeml_template_type_1_0>static char __test(typename __xcodeml_template_type_1_0::result_type(*))
public:
public:static bool const value=((sizeof((__test<__xcodeml_template_type_0_0>(0))))==1);
}
;
;
template<typename __xcodeml_template_type_0_0>class less:public binary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0,bool>{public:bool operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(__x,__y);
}
}
;
;
template<typename __xcodeml_template_type_0_0>class __derives_from_unary_function{private:
private:class __two{public:char __lx;
public:char __lxx;
}
;
private:static class::std::__1::__derives_from_unary_function::__two __test(...);
private:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>static unary_function<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>__test(unary_function<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>volatile const(*))
public:
public:static bool const value=(!is_same<decltype (),class::std::__1::__derives_from_unary_function::__two>::value);
public:typedef decltype ()type;
}
;
;
template<typename __xcodeml_template_type_0_0>class __derives_from_binary_function{private:
private:class __two{public:char __lx;
public:char __lxx;
}
;
private:static class::std::__1::__derives_from_binary_function::__two __test(...);
private:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename __xcodeml_template_type_1_2>static binary_function<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_1_2>__test(binary_function<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_1_2>volatile const(*))
public:
public:static bool const value=(!is_same<decltype (),class::std::__1::__derives_from_binary_function::__two>::value);
public:typedef decltype ()type;
}
;
;
template<typename __xcodeml_template_type_0_0,bool=__derives_from_unary_function<__xcodeml_template_type_0_0>::value>class __maybe_derive_from_unary_function:public typename __derives_from_unary_function<__xcodeml_template_type_0_0>::type{}
;
;
template<typename __xcodeml_template_type_0_0>class __maybe_derive_from_unary_function<__xcodeml_template_type_0_0,0>{}
;
template<typename __xcodeml_template_type_0_0,bool=__derives_from_binary_function<__xcodeml_template_type_0_0>::value>class __maybe_derive_from_binary_function:public typename __derives_from_binary_function<__xcodeml_template_type_0_0>::type{}
;
;
template<typename __xcodeml_template_type_0_0>class __maybe_derive_from_binary_function<__xcodeml_template_type_0_0,0>{}
;
template<typename __xcodeml_template_type_0_0,bool=__has_result_type<__xcodeml_template_type_0_0>::value>class __weak_result_type_imp:public __maybe_derive_from_unary_function<__xcodeml_template_type_0_0,expression>,public __maybe_derive_from_binary_function<__xcodeml_template_type_0_0,expression>{public:typedef typename __xcodeml_template_type_0_0::result_type result_type;
}
;
;
template<typename __xcodeml_template_type_0_0>class __weak_result_type_imp<__xcodeml_template_type_0_0,0>:public __maybe_derive_from_unary_function<__xcodeml_template_type_0_0,expression>,public __maybe_derive_from_binary_function<__xcodeml_template_type_0_0,expression>{}
;
template<typename __xcodeml_template_type_0_0>class __weak_result_type:public __weak_result_type_imp<__xcodeml_template_type_0_0,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class __weak_result_type<__xcodeml_template_type_0_0()>{public:typedef __xcodeml_template_type_0_0 result_type;
}
;
template<typename __xcodeml_template_type_0_0>class __weak_result_type<__xcodeml_template_type_0_0&()>{public:typedef __xcodeml_template_type_0_0 result_type;
}
;
template<typename __xcodeml_template_type_0_0>class __weak_result_type<__xcodeml_template_type_0_0(*)()>{public:typedef __xcodeml_template_type_0_0 result_type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __weak_result_type<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1)>:public unary_function<__xcodeml_template_type_0_1,__xcodeml_template_type_0_0>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __weak_result_type<__xcodeml_template_type_0_0&(__xcodeml_template_type_0_1)>:public unary_function<__xcodeml_template_type_0_1,__xcodeml_template_type_0_0>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __weak_result_type<__xcodeml_template_type_0_0(*)(__xcodeml_template_type_0_1)>:public unary_function<__xcodeml_template_type_0_1,__xcodeml_template_type_0_0>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __weak_result_type<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)()>:public unary_function<__xcodeml_template_type_0_1(*),__xcodeml_template_type_0_0>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __weak_result_type<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)()const>:public unary_function<__xcodeml_template_type_0_1 const(*),__xcodeml_template_type_0_0>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __weak_result_type<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)()volatile>:public unary_function<__xcodeml_template_type_0_1 volatile(*),__xcodeml_template_type_0_0>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __weak_result_type<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)()const volatile>:public unary_function<__xcodeml_template_type_0_1 volatile const(*),__xcodeml_template_type_0_0>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __weak_result_type<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1,__xcodeml_template_type_0_2)>:public binary_function<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2,__xcodeml_template_type_0_0>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __weak_result_type<__xcodeml_template_type_0_0(*)(__xcodeml_template_type_0_1,__xcodeml_template_type_0_2)>:public binary_function<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2,__xcodeml_template_type_0_0>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __weak_result_type<__xcodeml_template_type_0_0&(__xcodeml_template_type_0_1,__xcodeml_template_type_0_2)>:public binary_function<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2,__xcodeml_template_type_0_0>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __weak_result_type<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2)>:public binary_function<__xcodeml_template_type_0_1(*),__xcodeml_template_type_0_2,__xcodeml_template_type_0_0>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __weak_result_type<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2)const>:public binary_function<__xcodeml_template_type_0_1 const(*),__xcodeml_template_type_0_2,__xcodeml_template_type_0_0>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __weak_result_type<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2)volatile>:public binary_function<__xcodeml_template_type_0_1 volatile(*),__xcodeml_template_type_0_2,__xcodeml_template_type_0_0>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __weak_result_type<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2)const volatile>:public binary_function<__xcodeml_template_type_0_1 volatile const(*),__xcodeml_template_type_0_2,__xcodeml_template_type_0_0>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3,typename...__xcodeml_template_type_0_4>class __weak_result_type<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1,__xcodeml_template_type_0_2,__xcodeml_template_type_0_3,__xcodeml_template_type_0_4...)>{public:typedef __xcodeml_template_type_0_0 result_type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3,typename...__xcodeml_template_type_0_4>class __weak_result_type<__xcodeml_template_type_0_0&(__xcodeml_template_type_0_1,__xcodeml_template_type_0_2,__xcodeml_template_type_0_3,__xcodeml_template_type_0_4...)>{public:typedef __xcodeml_template_type_0_0 result_type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3,typename...__xcodeml_template_type_0_4>class __weak_result_type<__xcodeml_template_type_0_0(*)(__xcodeml_template_type_0_1,__xcodeml_template_type_0_2,__xcodeml_template_type_0_3,__xcodeml_template_type_0_4...)>{public:typedef __xcodeml_template_type_0_0 result_type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3,typename...__xcodeml_template_type_0_4>class __weak_result_type<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2,__xcodeml_template_type_0_3,__xcodeml_template_type_0_4...)>{public:typedef __xcodeml_template_type_0_0 result_type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3,typename...__xcodeml_template_type_0_4>class __weak_result_type<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2,__xcodeml_template_type_0_3,__xcodeml_template_type_0_4...)const>{public:typedef __xcodeml_template_type_0_0 result_type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3,typename...__xcodeml_template_type_0_4>class __weak_result_type<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2,__xcodeml_template_type_0_3,__xcodeml_template_type_0_4...)volatile>{public:typedef __xcodeml_template_type_0_0 result_type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3,typename...__xcodeml_template_type_0_4>class __weak_result_type<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)(__xcodeml_template_type_0_2,__xcodeml_template_type_0_3,__xcodeml_template_type_0_4...)const volatile>{public:typedef __xcodeml_template_type_0_0 result_type;
}
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>class __invoke_return{public:typedef decltype ()type;
}
;
;
template<typename __xcodeml_template_type_0_0>class __invoke_void_return_wrapper{public:template<typename...__xcodeml_template_type_1_0>static __xcodeml_template_type_0_0 __call(__xcodeml_template_type_1_0&& ...__args){return(__invoke((std::__1::forward<__xcodeml_template_type_1_0...>(__args))...));
}
}
;
;
template<>class __invoke_void_return_wrapper<void>{public:template<typename...__xcodeml_template_type_0_0>static void __call(__xcodeml_template_type_0_0&& ...__args){(__invoke((std::__1::forward<__xcodeml_template_type_0_0...>(__args))...));
}
}
;
template<typename __xcodeml_template_type_0_0>class reference_wrapper:public __weak_result_type<__xcodeml_template_type_0_0>{public:
public:typedef __xcodeml_template_type_0_0 type;
private:
private:__xcodeml_template_type_0_0(*__f_);
public:
public:reference_wrapper(__xcodeml_template_type_0_0&__f):__f_((std::__1::addressof(__f)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
private:
private:reference_wrapper(__xcodeml_template_type_0_0&& );
public:
public:operator __xcodeml_template_type_0_0&()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this->__f_);
}
public:__xcodeml_template_type_0_0&get()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this->__f_);
}
public:template<typename...__xcodeml_template_type_1_0>typename __invoke_of<__xcodeml_template_type_0_0&,__xcodeml_template_type_1_0...>/*packsize1*/::type operator()(__xcodeml_template_type_1_0&& ...__args)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__invoke((this->get()),(std::__1::forward<__xcodeml_template_type_1_0...>(__args))...));
}
}
;
;
template<typename __xcodeml_template_type_0_0>reference_wrapper<__xcodeml_template_type_0_0>ref(__xcodeml_template_type_0_0&__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<reference_wrapper<__xcodeml_template_type_0_0> >::t(__t);
}
template<typename __xcodeml_template_type_0_0>reference_wrapper<__xcodeml_template_type_0_0>ref(reference_wrapper<__xcodeml_template_type_0_0>__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(ref((__t.get())));
}
template<typename __xcodeml_template_type_0_0>reference_wrapper<__xcodeml_template_type_0_0 const>cref(__xcodeml_template_type_0_0 const&__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<reference_wrapper<__xcodeml_template_type_0_0 const> >::t(__t);
}
template<typename __xcodeml_template_type_0_0>reference_wrapper<__xcodeml_template_type_0_0 const>cref(reference_wrapper<__xcodeml_template_type_0_0>__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(cref((__t.get())));
}
template<typename __xcodeml_template_type_0_0>void ref(__xcodeml_template_type_0_0 const&& )
template<typename __xcodeml_template_type_0_0>void cref(__xcodeml_template_type_0_0 const&& )
class allocator_arg_t{}
;
constexpr class allocator_arg_t const allocator_arg=__xcodeml_identity<class::std::__1::allocator_arg_t>::t();
template<typename __xcodeml_template_type_0_0>class __has_allocator_type{private:
private:class __two{public:char __lx;
public:char __lxx;
}
;
private:template<typename __xcodeml_template_type_1_0>static class::std::__1::__has_allocator_type::__two __test(...)
private:template<typename __xcodeml_template_type_1_0>static char __test(typename __xcodeml_template_type_1_0::allocator_type(*))
public:
public:static bool const value=((sizeof((__test<__xcodeml_template_type_0_0>(0))))==1);
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,bool=__has_allocator_type<__xcodeml_template_type_0_0>::value>class __uses_allocator:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __uses_allocator<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,0>:public integral_constant<bool,0>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class uses_allocator:public __uses_allocator<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,expression>{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __uses_alloc_ctor_imp{public:typedef typename __uncvref<__xcodeml_template_type_0_1>::type _RawAlloc;
public:static bool const __ua=uses_allocator<__xcodeml_template_type_0_0,typename __uncvref<__xcodeml_template_type_0_1>::type>::value;
public:static bool const __ic=is_constructible<__xcodeml_template_type_0_0,class::std::__1::allocator_arg_t,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize3*/::value;
public:static int const value=(__ua?(2-__ic):0);
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __uses_alloc_ctor:public integral_constant<int,expression>{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>void __user_alloc_construct_impl(class::std::__1::integral_constant<int,0>,__xcodeml_template_type_0_0(*__storage),__xcodeml_template_type_0_1 const&,__xcodeml_template_type_0_2&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{new(__storage)__xcodeml_identity<__xcodeml_template_type_0_0>::t((std::__1::forward<__xcodeml_template_type_0_2...>(__args))...);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>void __user_alloc_construct_impl(class::std::__1::integral_constant<int,1>,__xcodeml_template_type_0_0(*__storage),__xcodeml_template_type_0_1 const&__a,__xcodeml_template_type_0_2&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{new(__storage)__xcodeml_identity<__xcodeml_template_type_0_0>::t(allocator_arg,__a,(std::__1::forward<__xcodeml_template_type_0_2...>(__args))...);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>void __user_alloc_construct_impl(class::std::__1::integral_constant<int,2>,__xcodeml_template_type_0_0(*__storage),__xcodeml_template_type_0_1 const&__a,__xcodeml_template_type_0_2&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{new(__storage)__xcodeml_identity<__xcodeml_template_type_0_0>::t((std::__1::forward<__xcodeml_template_type_0_2...>(__args))...,__a);
}
}
}
namespace std{namespace __1{class input_iterator_tag{}
;
class output_iterator_tag{}
;
class forward_iterator_tag:public input_iterator_tag{}
;
class bidirectional_iterator_tag:public forward_iterator_tag{}
;
class random_access_iterator_tag:public bidirectional_iterator_tag{}
;
template<typename __xcodeml_template_type_0_0>class __has_iterator_typedefs{private:
private:class __two{public:char __lx;
public:char __lxx;
}
;
private:template<typename __xcodeml_template_type_1_0>static class::std::__1::__has_iterator_typedefs::__two __test(...)
private:template<typename __xcodeml_template_type_1_0>static char __test(typename __void_t<typename __xcodeml_template_type_1_0::iterator_category>::type(*),typename __void_t<typename __xcodeml_template_type_1_0::difference_type>::type(*),typename __void_t<typename __xcodeml_template_type_1_0::value_type>::type(*),typename __void_t<typename __xcodeml_template_type_1_0::reference>::type(*),typename __void_t<typename __xcodeml_template_type_1_0::pointer>::type(*))
public:
public:static bool const value=((sizeof((__test<__xcodeml_template_type_0_0>(0,0,0,0,0))))==1);
}
;
;
template<typename __xcodeml_template_type_0_0>class __has_iterator_category{private:
private:class __two{public:char __lx;
public:char __lxx;
}
;
private:template<typename __xcodeml_template_type_1_0>static class::std::__1::__has_iterator_category::__two __test(...)
private:template<typename __xcodeml_template_type_1_0>static char __test(typename __xcodeml_template_type_1_0::iterator_category(*))
public:
public:static bool const value=((sizeof((__test<__xcodeml_template_type_0_0>(0))))==1);
}
;
;
template<typename __xcodeml_template_type_0_0,bool>class __iterator_traits_impl{}
;
;
template<typename __xcodeml_template_type_0_0>class __iterator_traits_impl<__xcodeml_template_type_0_0,1>{public:typedef typename __xcodeml_template_type_0_0::difference_type difference_type;
public:typedef typename __xcodeml_template_type_0_0::value_type value_type;
public:typedef typename __xcodeml_template_type_0_0::pointer pointer;
public:typedef typename __xcodeml_template_type_0_0::reference reference;
public:typedef typename __xcodeml_template_type_0_0::iterator_category iterator_category;
}
;
template<typename __xcodeml_template_type_0_0,bool>class __iterator_traits{}
;
;
template<typename __xcodeml_template_type_0_0>class __iterator_traits<__xcodeml_template_type_0_0,1>:public __iterator_traits_impl<__xcodeml_template_type_0_0,expression>{}
;
template<typename __xcodeml_template_type_0_0>class iterator_traits:public __iterator_traits<__xcodeml_template_type_0_0,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class iterator_traits<__xcodeml_template_type_0_0(*)>{public:typedef long difference_type;
public:typedef typename remove_cv<__xcodeml_template_type_0_0>::type value_type;
public:typedef __xcodeml_template_type_0_0(*pointer);
public:typedef __xcodeml_template_type_0_0&reference;
public:typedef class::std::__1::random_access_iterator_tag iterator_category;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,bool=__has_iterator_category<iterator_traits<__xcodeml_template_type_0_0> >::value>class __has_iterator_category_convertible_to:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __has_iterator_category_convertible_to<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,0>:public integral_constant<bool,0>{}
;
template<typename __xcodeml_template_type_0_0>class __is_input_iterator:public __has_iterator_category_convertible_to<__xcodeml_template_type_0_0,class::std::__1::input_iterator_tag,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class __is_forward_iterator:public __has_iterator_category_convertible_to<__xcodeml_template_type_0_0,class::std::__1::forward_iterator_tag,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class __is_bidirectional_iterator:public __has_iterator_category_convertible_to<__xcodeml_template_type_0_0,class::std::__1::bidirectional_iterator_tag,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class __is_random_access_iterator:public __has_iterator_category_convertible_to<__xcodeml_template_type_0_0,class::std::__1::random_access_iterator_tag,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class __is_exactly_input_iterator:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3,typename __xcodeml_template_type_0_4>class iterator{public:typedef __xcodeml_template_type_0_1 value_type;
public:typedef __xcodeml_template_type_0_2 difference_type;
public:typedef __xcodeml_template_type_0_3 pointer;
public:typedef __xcodeml_template_type_0_4 reference;
public:typedef __xcodeml_template_type_0_0 iterator_category;
}
;
;
template<typename __xcodeml_template_type_0_0>void __advance(__xcodeml_template_type_0_0&__i,typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __n,class::std::__1::input_iterator_tag)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator>(__n,0);(--__n)){(++__i);}};
}
template<typename __xcodeml_template_type_0_0>void __advance(__xcodeml_template_type_0_0&__i,typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __n,class::std::__1::bidirectional_iterator_tag)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator>=(__n,0)){{;for(;operator>(__n,0);(--__n)){(++__i);}};}else{{;for(;operator<(__n,0);(++__n)){(--__i);}};};
}
template<typename __xcodeml_template_type_0_0>void __advance(__xcodeml_template_type_0_0&__i,typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __n,class::std::__1::random_access_iterator_tag)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__i+=__n);
}
template<typename __xcodeml_template_type_0_0>void advance(__xcodeml_template_type_0_0&__i,typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __n)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((void)0);
(__advance(__i,__n,__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_0>::iterator_category>::t()));
}
template<typename __xcodeml_template_type_0_0>typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __distance(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,class::std::__1::input_iterator_tag)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __r=0;
{;for(;operator!=(__first,__last);(++__first)){(++__r);}};
return __r;
}
template<typename __xcodeml_template_type_0_0>typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __distance(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,class::std::__1::random_access_iterator_tag)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__last-__first);
}
template<typename __xcodeml_template_type_0_0>typename iterator_traits<__xcodeml_template_type_0_0>::difference_type distance(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__distance(__first,__last,__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_0>::iterator_category>::t()));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type next(__xcodeml_template_type_0_0 __x,typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __n)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((void)0);
(std::__1::advance(__x,__n));
return __x;
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type prev(__xcodeml_template_type_0_0 __x,typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __n)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((void)0);
(std::__1::advance(__x,(-__n)));
return __x;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __is_stashing_iterator:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class __is_stashing_iterator<__xcodeml_template_type_0_0,typename __void_t<typename __xcodeml_template_type_0_0::__stashing_iterator_tag>::type>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0>class reverse_iterator:public iterator<typename iterator_traits<__xcodeml_template_type_0_0>::iterator_category,typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::difference_type,typename iterator_traits<__xcodeml_template_type_0_0>::pointer,typename iterator_traits<__xcodeml_template_type_0_0>::reference>{private:
private:__xcodeml_template_type_0_0 __t;

/* Ignored a member with no access specifier static_assert((!__is_stashing_iterator<__xcodeml_template_type_0_0,void>::value),"The specified iterator type cannot be used with reverse_iterator; Using stashing iterators with reverse_iterator causes undefined behavior");*/

protected:
protected:__xcodeml_template_type_0_0 current;
public:
public:typedef __xcodeml_template_type_0_0 iterator_type;
public:typedef typename iterator_traits<__xcodeml_template_type_0_0>::difference_type difference_type;
public:typedef typename iterator_traits<__xcodeml_template_type_0_0>::reference reference;
public:typedef typename iterator_traits<__xcodeml_template_type_0_0>::pointer pointer;
public:reverse_iterator():__t(),current()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:reverse_iterator(__xcodeml_template_type_0_0 __x):__t(__x),current(__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0>reverse_iterator(reverse_iterator<__xcodeml_template_type_1_0>const&__u):__t((__u.base())),current((__u.base()))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0>class reverse_iterator&operator=(reverse_iterator<__xcodeml_template_type_1_0>const&__u)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__t=(this->current=(__u.base())));
return(*this);
}
public:__xcodeml_template_type_0_0 base()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->current;
}
public:typename iterator_traits<__xcodeml_template_type_0_0>::reference operator*()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{__xcodeml_template_type_0_0 __tmp=this->current;
return(*(--__tmp));
}
public:typename iterator_traits<__xcodeml_template_type_0_0>::pointer operator->()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::addressof((this->operator*())));
}
public:class reverse_iterator&operator++()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(--this->current);
return(*this);
}
public:class reverse_iterator operator++(int)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{class reverse_iterator __tmp=(*this);
(--this->current);
return __tmp;
}
public:class reverse_iterator&operator--()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(++this->current);
return(*this);
}
public:class reverse_iterator operator--(int)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{class reverse_iterator __tmp=(*this);
(++this->current);
return __tmp;
}
public:class reverse_iterator operator+(typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __n)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<class reverse_iterator>::t((this->current-__n));
}
public:class reverse_iterator&operator+=(typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __n)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->current-=__n);
return(*this);
}
public:class reverse_iterator operator-(typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __n)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<class reverse_iterator>::t((this->current+__n));
}
public:class reverse_iterator&operator-=(typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __n)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->current+=__n);
return(*this);
}
public:typename iterator_traits<__xcodeml_template_type_0_0>::reference operator[](typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __n)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*((*this)+__n));
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator==(reverse_iterator<__xcodeml_template_type_0_0>const&__x,reverse_iterator<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==((__x.base()),(__y.base()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator<(reverse_iterator<__xcodeml_template_type_0_0>const&__x,reverse_iterator<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator>((__x.base()),(__y.base()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator!=(reverse_iterator<__xcodeml_template_type_0_0>const&__x,reverse_iterator<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator!=((__x.base()),(__y.base()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator>(reverse_iterator<__xcodeml_template_type_0_0>const&__x,reverse_iterator<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<((__x.base()),(__y.base()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator>=(reverse_iterator<__xcodeml_template_type_0_0>const&__x,reverse_iterator<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<=((__x.base()),(__y.base()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator<=(reverse_iterator<__xcodeml_template_type_0_0>const&__x,reverse_iterator<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator>=((__x.base()),(__y.base()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>decltype ()operator-(reverse_iterator<__xcodeml_template_type_0_0>const&__x,reverse_iterator<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator-((__y.base()),(__x.base()));
}
template<typename __xcodeml_template_type_0_0>reverse_iterator<__xcodeml_template_type_0_0>operator+(typename reverse_iterator<__xcodeml_template_type_0_0>::difference_type __n,reverse_iterator<__xcodeml_template_type_0_0>const&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<reverse_iterator<__xcodeml_template_type_0_0> >::t(operator-((__x.base()),__n));
}
template<typename __xcodeml_template_type_0_0>class back_insert_iterator:public iterator<class::std::__1::output_iterator_tag,void,void,void,void>{protected:
protected:__xcodeml_template_type_0_0(*container);
public:
public:typedef __xcodeml_template_type_0_0 container_type;
public:back_insert_iterator(__xcodeml_template_type_0_0&__x):container((std::__1::addressof(__x)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:class back_insert_iterator&operator=(typename __xcodeml_template_type_0_0::value_type const&__value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->container.push_back(__value_));
return(*this);
}
public:class back_insert_iterator&operator=(typename __xcodeml_template_type_0_0::value_type&& __value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->container.push_back((std::__1::move(__value_))));
return(*this);
}
public:class back_insert_iterator&operator*()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this);
}
public:class back_insert_iterator&operator++()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this);
}
public:class back_insert_iterator operator++(int)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this);
}
}
;
;
template<typename __xcodeml_template_type_0_0>back_insert_iterator<__xcodeml_template_type_0_0>back_inserter(__xcodeml_template_type_0_0&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<back_insert_iterator<__xcodeml_template_type_0_0> >::t(__x);
}
template<typename __xcodeml_template_type_0_0>class front_insert_iterator:public iterator<class::std::__1::output_iterator_tag,void,void,void,void>{protected:
protected:__xcodeml_template_type_0_0(*container);
public:
public:typedef __xcodeml_template_type_0_0 container_type;
public:front_insert_iterator(__xcodeml_template_type_0_0&__x):container((std::__1::addressof(__x)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:class front_insert_iterator&operator=(typename __xcodeml_template_type_0_0::value_type const&__value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->container.push_front(__value_));
return(*this);
}
public:class front_insert_iterator&operator=(typename __xcodeml_template_type_0_0::value_type&& __value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->container.push_front((std::__1::move(__value_))));
return(*this);
}
public:class front_insert_iterator&operator*()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this);
}
public:class front_insert_iterator&operator++()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this);
}
public:class front_insert_iterator operator++(int)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this);
}
}
;
;
template<typename __xcodeml_template_type_0_0>front_insert_iterator<__xcodeml_template_type_0_0>front_inserter(__xcodeml_template_type_0_0&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<front_insert_iterator<__xcodeml_template_type_0_0> >::t(__x);
}
template<typename __xcodeml_template_type_0_0>class insert_iterator:public iterator<class::std::__1::output_iterator_tag,void,void,void,void>{protected:
protected:__xcodeml_template_type_0_0(*container);
protected:typename __xcodeml_template_type_0_0::iterator iter;
public:
public:typedef __xcodeml_template_type_0_0 container_type;
public:insert_iterator(__xcodeml_template_type_0_0&__x,typename __xcodeml_template_type_0_0::iterator __i):container((std::__1::addressof(__x))),iter(__i)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:class insert_iterator&operator=(typename __xcodeml_template_type_0_0::value_type const&__value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->iter=(this->container.insert(this->iter,__value_)));
(++this->iter);
return(*this);
}
public:class insert_iterator&operator=(typename __xcodeml_template_type_0_0::value_type&& __value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->iter=(this->container.insert(this->iter,(std::__1::move(__value_)))));
(++this->iter);
return(*this);
}
public:class insert_iterator&operator*()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this);
}
public:class insert_iterator&operator++()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this);
}
public:class insert_iterator&operator++(int)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this);
}
}
;
;
template<typename __xcodeml_template_type_0_0>insert_iterator<__xcodeml_template_type_0_0>inserter(__xcodeml_template_type_0_0&__x,typename __xcodeml_template_type_0_0::iterator __i)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<insert_iterator<__xcodeml_template_type_0_0> >::t(__x,__i);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>class istream_iterator:public iterator<class::std::__1::input_iterator_tag,__xcodeml_template_type_0_0,__xcodeml_template_type_0_3,__xcodeml_template_type_0_0 const(*),__xcodeml_template_type_0_0 const&>{public:
public:typedef __xcodeml_template_type_0_1 char_type;
public:typedef __xcodeml_template_type_0_2 traits_type;
public:typedef basic_istream<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>istream_type;
private:
private:basic_istream<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>(*__in_stream_);
private:__xcodeml_template_type_0_0 __value_;
public:
public:istream_iterator():__in_stream_(0),__value_()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:istream_iterator(basic_istream<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>&__s):__in_stream_((std::__1::addressof(__s)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if((!((*this->__in_stream_)>>this->__value_))){(this->__in_stream_=0);};
}
public:__xcodeml_template_type_0_0 const&operator*()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__value_;
}
public:__xcodeml_template_type_0_0 const(*operator->()const)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::addressof((this->operator*())));
}
public:class istream_iterator&operator++()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if((!((*this->__in_stream_)>>this->__value_))){(this->__in_stream_=0);};
return(*this);
}
public:class istream_iterator operator++(int)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{class istream_iterator __t=(*this);
(++(*this));
return __t;
}
public:friend template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename __xcodeml_template_type_1_2,typename __xcodeml_template_type_1_3>bool operator==(istream_iterator<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_1_2,__xcodeml_template_type_1_3>const&__x,istream_iterator<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_1_2,__xcodeml_template_type_1_3>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/;
public:friend template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename __xcodeml_template_type_1_2,typename __xcodeml_template_type_1_3>bool operator==(istream_iterator<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_1_2,__xcodeml_template_type_1_3>const&__x,istream_iterator<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_1_2,__xcodeml_template_type_1_3>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/;
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>bool operator==(istream_iterator<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2,__xcodeml_template_type_0_3>const&__x,istream_iterator<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2,__xcodeml_template_type_0_3>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==(__x.__in_stream_,__y.__in_stream_);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>bool operator!=(istream_iterator<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2,__xcodeml_template_type_0_3>const&__x,istream_iterator<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2,__xcodeml_template_type_0_3>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator==(__x,__y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class ostream_iterator:public iterator<class::std::__1::output_iterator_tag,void,void,void,void>{public:
public:typedef __xcodeml_template_type_0_1 char_type;
public:typedef __xcodeml_template_type_0_2 traits_type;
public:typedef basic_ostream<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>ostream_type;
private:
private:basic_ostream<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>(*__out_stream_);
private:__xcodeml_template_type_0_1 const(*__delim_);
public:
public:ostream_iterator(basic_ostream<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>&__s):__out_stream_((std::__1::addressof(__s))),__delim_(0)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:ostream_iterator(basic_ostream<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>&__s,__xcodeml_template_type_0_1 const(*__delimiter)):__out_stream_((std::__1::addressof(__s))),__delim_(__delimiter)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:class ostream_iterator&operator=(__xcodeml_template_type_0_0 const&__value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((*this->__out_stream_)<<__value_);
if(this->__delim_){((*this->__out_stream_)<<this->__delim_);};
return(*this);
}
public:class ostream_iterator&operator*()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this);
}
public:class ostream_iterator&operator++()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this);
}
public:class ostream_iterator&operator++(int)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this);
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class istreambuf_iterator:public iterator<class::std::__1::input_iterator_tag,__xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1::off_type,__xcodeml_template_type_0_0(*),__xcodeml_template_type_0_0>{public:
public:typedef __xcodeml_template_type_0_0 char_type;
public:typedef __xcodeml_template_type_0_1 traits_type;
public:typedef typename __xcodeml_template_type_0_1::int_type int_type;
public:typedef basic_streambuf<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>streambuf_type;
public:typedef basic_istream<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>istream_type;
private:
private:basic_streambuf<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>(*__sbuf_);
private:class __proxy{private:__xcodeml_template_type_0_0 __keep_;
private:basic_streambuf<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>(*__sbuf_);
private:__proxy(__xcodeml_template_type_0_0 __c,basic_streambuf<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>(*__s)):__keep_(__c),__sbuf_(__s)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:friend class istreambuf_iterator;
public:
public:__xcodeml_template_type_0_0 operator*()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__keep_;
}
}
;
private:bool __test_for_eof()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if((this->__sbuf_&&(__xcodeml_template_type_0_1::.eq_int_type((this->__sbuf_.sgetc()),(__xcodeml_template_type_0_1::.eof()))))){(this->__sbuf_=0);};
return operator==(this->__sbuf_,0);
}
public:
public:istreambuf_iterator():__sbuf_(0)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:istreambuf_iterator(basic_istream<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&__s):__sbuf_((__s.rdbuf()))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:istreambuf_iterator(basic_streambuf<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>(*__s)):__sbuf_(__s)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:istreambuf_iterator(class __proxy const&__p):__sbuf_(__p.__sbuf_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__xcodeml_template_type_0_0 operator*()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<__xcodeml_template_type_0_0>((this->__sbuf_.sgetc()));
}
public:class istreambuf_iterator&operator++()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__sbuf_.sbumpc());
return(*this);
}
public:class::std::__1::istreambuf_iterator::__proxy operator++(int)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<class::std::__1::istreambuf_iterator::__proxy>::t((this->__sbuf_.sbumpc()),this->__sbuf_);
}
public:bool equal(class istreambuf_iterator const&__b)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==((this->__test_for_eof()),(__b.__test_for_eof()));
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator==(istreambuf_iterator<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__a,istreambuf_iterator<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__b)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__a.equal(__b));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator!=(istreambuf_iterator<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__a,istreambuf_iterator<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__b)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!(__a.equal(__b)));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class ostreambuf_iterator:public iterator<class::std::__1::output_iterator_tag,void,void,void,void>{public:
public:typedef __xcodeml_template_type_0_0 char_type;
public:typedef __xcodeml_template_type_0_1 traits_type;
public:typedef basic_streambuf<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>streambuf_type;
public:typedef basic_ostream<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>ostream_type;
private:
private:basic_streambuf<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>(*__sbuf_);
public:
public:ostreambuf_iterator(basic_ostream<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&__s):__sbuf_((__s.rdbuf()))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:ostreambuf_iterator(basic_streambuf<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>(*__s)):__sbuf_(__s)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:class ostreambuf_iterator&operator=(__xcodeml_template_type_0_0 __c)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if((this->__sbuf_&&(__xcodeml_template_type_0_1::.eq_int_type((this->__sbuf_.sputc(__c)),(__xcodeml_template_type_0_1::.eof()))))){(this->__sbuf_=0);};
return(*this);
}
public:class ostreambuf_iterator&operator*()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this);
}
public:class ostreambuf_iterator&operator++()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this);
}
public:class ostreambuf_iterator&operator++(int)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this);
}
public:bool failed()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==(this->__sbuf_,0);
}
public:friend template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>ostreambuf_iterator<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>__pad_and_output(ostreambuf_iterator<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>__s,__xcodeml_template_type_1_0 const(*__ob),__xcodeml_template_type_1_0 const(*__op),__xcodeml_template_type_1_0 const(*__oe),class::std::__1::ios_base&__iob,__xcodeml_template_type_1_0 __fl)/*gccattr visibility:*/;
}
;
;
template<typename __xcodeml_template_type_0_0>class move_iterator{private:
private:__xcodeml_template_type_0_0 __i;
public:
public:typedef __xcodeml_template_type_0_0 iterator_type;
public:typedef typename iterator_traits<__xcodeml_template_type_0_0>::iterator_category iterator_category;
public:typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type value_type;
public:typedef typename iterator_traits<__xcodeml_template_type_0_0>::difference_type difference_type;
public:typedef __xcodeml_template_type_0_0 pointer;
public:typedef typename iterator_traits<__xcodeml_template_type_0_0>::reference __reference;
public:typedef typename conditional<expression,typename remove_reference<typename iterator_traits<__xcodeml_template_type_0_0>::reference>::type&& ,typename iterator_traits<__xcodeml_template_type_0_0>::reference>::type reference;
public:move_iterator():__i()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:move_iterator(__xcodeml_template_type_0_0 __x):__i(__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0>move_iterator(move_iterator<__xcodeml_template_type_1_0>const&__u):__i((__u.base()))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__xcodeml_template_type_0_0 base()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__i;
}
public:typename conditional<expression,typename remove_reference<typename iterator_traits<__xcodeml_template_type_0_0>::reference>::type&& ,typename iterator_traits<__xcodeml_template_type_0_0>::reference>::type operator*()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<typename conditional<expression,typename remove_reference<typename iterator_traits<__xcodeml_template_type_0_0>::reference>::type&& ,typename iterator_traits<__xcodeml_template_type_0_0>::reference>::type>((*this->__i));
}
public:__xcodeml_template_type_0_0 operator->()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__i;
}
public:class move_iterator&operator++()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(++this->__i);
return(*this);
}
public:class move_iterator operator++(int)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{class move_iterator __tmp=(*this);
(++this->__i);
return __tmp;
}
public:class move_iterator&operator--()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(--this->__i);
return(*this);
}
public:class move_iterator operator--(int)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{class move_iterator __tmp=(*this);
(--this->__i);
return __tmp;
}
public:class move_iterator operator+(typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __n)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<class move_iterator>::t(operator+(this->__i,__n));
}
public:class move_iterator&operator+=(typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __n)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__i+=__n);
return(*this);
}
public:class move_iterator operator-(typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __n)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<class move_iterator>::t(operator-(this->__i,__n));
}
public:class move_iterator&operator-=(typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __n)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__i-=__n);
return(*this);
}
public:typename conditional<expression,typename remove_reference<typename iterator_traits<__xcodeml_template_type_0_0>::reference>::type&& ,typename iterator_traits<__xcodeml_template_type_0_0>::reference>::type operator[](typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __n)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<typename conditional<expression,typename remove_reference<typename iterator_traits<__xcodeml_template_type_0_0>::reference>::type&& ,typename iterator_traits<__xcodeml_template_type_0_0>::reference>::type>((this->__i)[__n]);
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator==(move_iterator<__xcodeml_template_type_0_0>const&__x,move_iterator<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==((__x.base()),(__y.base()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator<(move_iterator<__xcodeml_template_type_0_0>const&__x,move_iterator<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<((__x.base()),(__y.base()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator!=(move_iterator<__xcodeml_template_type_0_0>const&__x,move_iterator<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator!=((__x.base()),(__y.base()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator>(move_iterator<__xcodeml_template_type_0_0>const&__x,move_iterator<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator>((__x.base()),(__y.base()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator>=(move_iterator<__xcodeml_template_type_0_0>const&__x,move_iterator<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator>=((__x.base()),(__y.base()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator<=(move_iterator<__xcodeml_template_type_0_0>const&__x,move_iterator<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<=((__x.base()),(__y.base()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>decltype ()operator-(move_iterator<__xcodeml_template_type_0_0>const&__x,move_iterator<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator-((__x.base()),(__y.base()));
}
template<typename __xcodeml_template_type_0_0>move_iterator<__xcodeml_template_type_0_0>operator+(typename move_iterator<__xcodeml_template_type_0_0>::difference_type __n,move_iterator<__xcodeml_template_type_0_0>const&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<move_iterator<__xcodeml_template_type_0_0> >::t(operator+((__x.base()),__n));
}
template<typename __xcodeml_template_type_0_0>move_iterator<__xcodeml_template_type_0_0>make_move_iterator(__xcodeml_template_type_0_0 __i)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<move_iterator<__xcodeml_template_type_0_0> >::t(__i);
}
template<typename __xcodeml_template_type_0_0>class __wrap_iter;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator==(__wrap_iter<__xcodeml_template_type_0_0>const&,__wrap_iter<__xcodeml_template_type_0_1>const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator<(__wrap_iter<__xcodeml_template_type_0_0>const&,__wrap_iter<__xcodeml_template_type_0_1>const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator!=(__wrap_iter<__xcodeml_template_type_0_0>const&,__wrap_iter<__xcodeml_template_type_0_1>const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator>(__wrap_iter<__xcodeml_template_type_0_0>const&,__wrap_iter<__xcodeml_template_type_0_1>const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator>=(__wrap_iter<__xcodeml_template_type_0_0>const&,__wrap_iter<__xcodeml_template_type_0_1>const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator<=(__wrap_iter<__xcodeml_template_type_0_0>const&,__wrap_iter<__xcodeml_template_type_0_1>const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>decltype ()operator-(__wrap_iter<__xcodeml_template_type_0_0>const&__x,__wrap_iter<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<typename __xcodeml_template_type_0_0>__wrap_iter<__xcodeml_template_type_0_0>operator+(typename __wrap_iter<__xcodeml_template_type_0_0>::difference_type,__wrap_iter<__xcodeml_template_type_0_0>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 copy(__xcodeml_template_type_0_0,__xcodeml_template_type_0_0,__xcodeml_template_type_0_1)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 copy_backward(__xcodeml_template_type_0_0,__xcodeml_template_type_0_0,__xcodeml_template_type_0_1)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 move(__xcodeml_template_type_0_0,__xcodeml_template_type_0_0,__xcodeml_template_type_0_1)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 move_backward(__xcodeml_template_type_0_0,__xcodeml_template_type_0_0,__xcodeml_template_type_0_1)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0(*)>::type __unwrap_iter(__wrap_iter<__xcodeml_template_type_0_0(*)>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
template<typename __xcodeml_template_type_0_0>class __wrap_iter{public:
public:typedef __xcodeml_template_type_0_0 iterator_type;
public:typedef typename iterator_traits<__xcodeml_template_type_0_0>::iterator_category iterator_category;
public:typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type value_type;
public:typedef typename iterator_traits<__xcodeml_template_type_0_0>::difference_type difference_type;
public:typedef typename iterator_traits<__xcodeml_template_type_0_0>::pointer pointer;
public:typedef typename iterator_traits<__xcodeml_template_type_0_0>::reference reference;
private:
private:__xcodeml_template_type_0_0 __i;
public:
public:__wrap_iter()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0>__wrap_iter(__wrap_iter<__xcodeml_template_type_1_0>const&__u,typename enable_if<expression,void>::type(*)):__i((__u.base()))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:typename iterator_traits<__xcodeml_template_type_0_0>::reference operator*()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this->__i);
}
public:typename iterator_traits<__xcodeml_template_type_0_0>::pointer operator->()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((typename iterator_traits<__xcodeml_template_type_0_0>::pointer)(std::__1::addressof((*this->__i))));
}
public:class __wrap_iter&operator++()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(++this->__i);
return(*this);
}
public:class __wrap_iter operator++(int)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{class __wrap_iter __tmp=(*this);
(++(*this));
return __tmp;
}
public:class __wrap_iter&operator--()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(--this->__i);
return(*this);
}
public:class __wrap_iter operator--(int)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{class __wrap_iter __tmp=(*this);
(--(*this));
return __tmp;
}
public:class __wrap_iter operator+(typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __n)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{class __wrap_iter __w=(*this);
(__w+=__n);
return __w;
}
public:class __wrap_iter&operator+=(typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __n)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__i+=__n);
return(*this);
}
public:class __wrap_iter operator-(typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __n)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator+((*this),operator-(__n));
}
public:class __wrap_iter&operator-=(typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __n)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((*this)+=operator-(__n));
return(*this);
}
public:typename iterator_traits<__xcodeml_template_type_0_0>::reference operator[](typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __n)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__i)[__n];
}
public:__xcodeml_template_type_0_0 base()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__i;
}
private:
private:__wrap_iter(__xcodeml_template_type_0_0 __x):__i(__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:friend template<typename __xcodeml_template_type_1_0>class __wrap_iter;
;
public:friend template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename __xcodeml_template_type_1_2>class basic_string/*gccattr type_visibility:*/;
;
public:friend template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>class vector/*gccattr type_visibility:*/;
;
public:friend template<typename __xcodeml_template_type_1_0,unsigned long>class span/*gccattr type_visibility:*/;
;
public:friend template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>bool operator==(__wrap_iter<__xcodeml_template_type_1_0>const&,__wrap_iter<__xcodeml_template_type_1_1>const&);
public:friend template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>bool operator<(__wrap_iter<__xcodeml_template_type_1_0>const&,__wrap_iter<__xcodeml_template_type_1_1>const&);
public:friend template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>bool operator!=(__wrap_iter<__xcodeml_template_type_1_0>const&,__wrap_iter<__xcodeml_template_type_1_1>const&);
public:friend template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>bool operator>(__wrap_iter<__xcodeml_template_type_1_0>const&,__wrap_iter<__xcodeml_template_type_1_1>const&);
public:friend template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>bool operator>=(__wrap_iter<__xcodeml_template_type_1_0>const&,__wrap_iter<__xcodeml_template_type_1_1>const&);
public:friend template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>bool operator<=(__wrap_iter<__xcodeml_template_type_1_0>const&,__wrap_iter<__xcodeml_template_type_1_1>const&);
public:friend template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>decltype ()operator-(__wrap_iter<__xcodeml_template_type_1_0>const&__x,__wrap_iter<__xcodeml_template_type_1_1>const&__y);
public:friend template<typename __xcodeml_template_type_1_0>__wrap_iter<__xcodeml_template_type_1_0>operator+(typename __wrap_iter<__xcodeml_template_type_1_0>::difference_type,__wrap_iter<__xcodeml_template_type_1_0>);
public:friend template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__xcodeml_template_type_1_1 copy(__xcodeml_template_type_1_0,__xcodeml_template_type_1_0,__xcodeml_template_type_1_1);
public:friend template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__xcodeml_template_type_1_1 copy_backward(__xcodeml_template_type_1_0,__xcodeml_template_type_1_0,__xcodeml_template_type_1_1);
public:friend template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__xcodeml_template_type_1_1 move(__xcodeml_template_type_1_0,__xcodeml_template_type_1_0,__xcodeml_template_type_1_1);
public:friend template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__xcodeml_template_type_1_1 move_backward(__xcodeml_template_type_1_0,__xcodeml_template_type_1_0,__xcodeml_template_type_1_1);
public:friend template<typename __xcodeml_template_type_1_0>typename enable_if<expression,__xcodeml_template_type_1_0(*)>::type __unwrap_iter(__wrap_iter<__xcodeml_template_type_1_0(*)>);
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator==(__wrap_iter<__xcodeml_template_type_0_0>const&__x,__wrap_iter<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==((__x.base()),(__y.base()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator<(__wrap_iter<__xcodeml_template_type_0_0>const&__x,__wrap_iter<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<((__x.base()),(__y.base()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator!=(__wrap_iter<__xcodeml_template_type_0_0>const&__x,__wrap_iter<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator==(__x,__y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator>(__wrap_iter<__xcodeml_template_type_0_0>const&__x,__wrap_iter<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(__y,__x);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator>=(__wrap_iter<__xcodeml_template_type_0_0>const&__x,__wrap_iter<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(__x,__y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator<=(__wrap_iter<__xcodeml_template_type_0_0>const&__x,__wrap_iter<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(__y,__x));
}
template<typename __xcodeml_template_type_0_0>bool operator!=(__wrap_iter<__xcodeml_template_type_0_0>const&__x,__wrap_iter<__xcodeml_template_type_0_0>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator==(__x,__y));
}
template<typename __xcodeml_template_type_0_0>bool operator>(__wrap_iter<__xcodeml_template_type_0_0>const&__x,__wrap_iter<__xcodeml_template_type_0_0>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(__y,__x);
}
template<typename __xcodeml_template_type_0_0>bool operator>=(__wrap_iter<__xcodeml_template_type_0_0>const&__x,__wrap_iter<__xcodeml_template_type_0_0>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(__x,__y));
}
template<typename __xcodeml_template_type_0_0>bool operator<=(__wrap_iter<__xcodeml_template_type_0_0>const&__x,__wrap_iter<__xcodeml_template_type_0_0>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(__y,__x));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>decltype ()operator-(__wrap_iter<__xcodeml_template_type_0_0>const&__x,__wrap_iter<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator-((__x.base()),(__y.base()));
}
template<typename __xcodeml_template_type_0_0>__wrap_iter<__xcodeml_template_type_0_0>operator+(typename __wrap_iter<__xcodeml_template_type_0_0>::difference_type __n,__wrap_iter<__xcodeml_template_type_0_0>__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__x+=__n);
return __x;
}
template<typename __xcodeml_template_type_0_0>class __libcpp_is_trivial_iterator:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>class __libcpp_is_trivial_iterator<move_iterator<__xcodeml_template_type_0_0> >:public integral_constant<bool,expression>{}
;
template<typename __xcodeml_template_type_0_0>class __libcpp_is_trivial_iterator<reverse_iterator<__xcodeml_template_type_0_0> >:public integral_constant<bool,expression>{}
;
template<typename __xcodeml_template_type_0_0>class __libcpp_is_trivial_iterator<__wrap_iter<__xcodeml_template_type_0_0> >:public integral_constant<bool,expression>{}
;
template<typename __xcodeml_template_type_0_0,unsigned long _Np>__xcodeml_template_type_0_0(*begin(__xcodeml_template_type_0_0&__array))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __array;
}
template<typename __xcodeml_template_type_0_0,unsigned long _Np>__xcodeml_template_type_0_0(*end(__xcodeml_template_type_0_0&__array))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator+(__array,_Np);
}
template<typename __xcodeml_template_type_0_0>decltype ()begin(__xcodeml_template_type_0_0&__c)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c.begin());
}
template<typename __xcodeml_template_type_0_0>decltype ()begin(__xcodeml_template_type_0_0 const&__c)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c.begin());
}
template<typename __xcodeml_template_type_0_0>decltype ()end(__xcodeml_template_type_0_0&__c)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c.end());
}
template<typename __xcodeml_template_type_0_0>decltype ()end(__xcodeml_template_type_0_0 const&__c)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c.end());
}
}
}
namespace std{namespace __1{template<unsigned long _Ip,typename __xcodeml_template_type_0_1,bool=(is_empty<__xcodeml_template_type_0_1>::value&&(!__libcpp_is_final<__xcodeml_template_type_0_1>::value))>class __tuple_leaf;
;
template<unsigned long _Ip,typename __xcodeml_template_type_0_1,bool _Ep>void swap(__tuple_leaf<expression,__xcodeml_template_type_0_1,expression>&__x,__tuple_leaf<expression,__xcodeml_template_type_0_1,expression>&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(swap((__x.get()),(__y.get())));
}
template<unsigned long _Ip,typename __xcodeml_template_type_0_1,bool>class __tuple_leaf{private:__xcodeml_template_type_0_1 __value_;
private:template<typename __xcodeml_template_type_1_0>static bool __can_bind_reference(){return(!/*TTE*/__reference_binds_to_temporary(__xcodeml_template_type_0_1,__xcodeml_template_type_1_0));
}
private:class __tuple_leaf&operator=(class __tuple_leaf const&);
public:
public:__tuple_leaf():__value_()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert((!is_reference<__xcodeml_template_type_0_1>::.value),"Attempted to default construct a reference element in a tuple");
}
public:template<typename __xcodeml_template_type_1_0>__tuple_leaf(class::std::__1::integral_constant<int,0>,__xcodeml_template_type_1_0 const&):__value_()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert((!is_reference<__xcodeml_template_type_0_1>::.value),"Attempted to default construct a reference element in a tuple");
}
public:template<typename __xcodeml_template_type_1_0>__tuple_leaf(class::std::__1::integral_constant<int,1>,__xcodeml_template_type_1_0 const&__a):__value_(__xcodeml_identity<class::std::__1::allocator_arg_t>::t()__a)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert((!is_reference<__xcodeml_template_type_0_1>::.value),"Attempted to default construct a reference element in a tuple");
}
public:template<typename __xcodeml_template_type_1_0>__tuple_leaf(class::std::__1::integral_constant<int,2>,__xcodeml_template_type_1_0 const&__a):__value_(__a)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert((!is_reference<__xcodeml_template_type_0_1>::.value),"Attempted to default construct a reference element in a tuple");
}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__tuple_leaf(__xcodeml_template_type_1_0&& __t):__value_((std::__1::forward<__xcodeml_template_type_1_0>(__t)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert((__can_bind_reference<__xcodeml_template_type_1_0&& >()),"Attempted construction of reference element binds to a temporary whose lifetime has ended");
}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__tuple_leaf(class::std::__1::integral_constant<int,0>,__xcodeml_template_type_1_1 const&,__xcodeml_template_type_1_0&& __t):__value_((std::__1::forward<__xcodeml_template_type_1_0>(__t)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert((__can_bind_reference<__xcodeml_template_type_1_0&& >()),"Attempted construction of reference element binds to a temporary whose lifetime has ended");
}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__tuple_leaf(class::std::__1::integral_constant<int,1>,__xcodeml_template_type_1_1 const&__a,__xcodeml_template_type_1_0&& __t):__value_(__xcodeml_identity<class::std::__1::allocator_arg_t>::t()__a(std::__1::forward<__xcodeml_template_type_1_0>(__t)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert((!is_reference<__xcodeml_template_type_0_1>::.value),"Attempted to uses-allocator construct a reference element in a tuple");
}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__tuple_leaf(class::std::__1::integral_constant<int,2>,__xcodeml_template_type_1_1 const&__a,__xcodeml_template_type_1_0&& __t):__value_((std::__1::forward<__xcodeml_template_type_1_0>(__t))__a)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert((!is_reference<__xcodeml_template_type_0_1>::.value),"Attempted to uses-allocator construct a reference element in a tuple");
}
public:__tuple_leaf(class __tuple_leaf const&__t);
public:__tuple_leaf(class __tuple_leaf&& __t);
public:template<typename __xcodeml_template_type_1_0>class __tuple_leaf&operator=(__xcodeml_template_type_1_0&& __t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__value_=(std::__1::forward<__xcodeml_template_type_1_0>(__t)));
return(*this);
}
public:int swap(class __tuple_leaf&__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::swap((*this),__t));
return 0;
}
public:__xcodeml_template_type_0_1&get()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__value_;
}
public:__xcodeml_template_type_0_1 const&get()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__value_;
}
}
;
;
template<unsigned long _Ip,typename __xcodeml_template_type_0_1>class __tuple_leaf<expression,__xcodeml_template_type_0_1,1>:private __xcodeml_template_type_0_1{private:class __tuple_leaf<expression,__xcodeml_template_type_0_1,1>&operator=(class __tuple_leaf const&);
public:
public:__tuple_leaf()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0>__tuple_leaf(class::std::__1::integral_constant<int,0>,__xcodeml_template_type_1_0 const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0>__tuple_leaf(class::std::__1::integral_constant<int,1>,__xcodeml_template_type_1_0 const&__a):(__xcodeml_identity<class::std::__1::allocator_arg_t>::t()__a)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0>__tuple_leaf(class::std::__1::integral_constant<int,2>,__xcodeml_template_type_1_0 const&__a):(__a)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__tuple_leaf(__xcodeml_template_type_1_0&& __t):((std::__1::forward<__xcodeml_template_type_1_0>(__t)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__tuple_leaf(class::std::__1::integral_constant<int,0>,__xcodeml_template_type_1_1 const&,__xcodeml_template_type_1_0&& __t):((std::__1::forward<__xcodeml_template_type_1_0>(__t)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__tuple_leaf(class::std::__1::integral_constant<int,1>,__xcodeml_template_type_1_1 const&__a,__xcodeml_template_type_1_0&& __t):(__xcodeml_identity<class::std::__1::allocator_arg_t>::t()__a(std::__1::forward<__xcodeml_template_type_1_0>(__t)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__tuple_leaf(class::std::__1::integral_constant<int,2>,__xcodeml_template_type_1_1 const&__a,__xcodeml_template_type_1_0&& __t):((std::__1::forward<__xcodeml_template_type_1_0>(__t))__a)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__tuple_leaf(class __tuple_leaf const&);
public:__tuple_leaf(class __tuple_leaf<expression,__xcodeml_template_type_0_1,1>&& );
public:template<typename __xcodeml_template_type_1_0>class __tuple_leaf<expression,__xcodeml_template_type_0_1,1>&operator=(__xcodeml_template_type_1_0&& __t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__xcodeml_template_type_0_1::.operator=((std::__1::forward<__xcodeml_template_type_1_0>(__t))));
return(*this);
}
public:int swap(class __tuple_leaf<expression,__xcodeml_template_type_0_1,1>&__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::swap((*this),__t));
return 0;
}
public:__xcodeml_template_type_0_1&get()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<__xcodeml_template_type_0_1&>((*this));
}
public:__xcodeml_template_type_0_1 const&get()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<__xcodeml_template_type_0_1 const&>((*this));
}
}
;
template<typename...__xcodeml_template_type_0_0>void __swallow(__xcodeml_template_type_0_0&& ...)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
template<typename __xcodeml_template_type_0_0>class __all_default_constructible;
;
template<typename...__xcodeml_template_type_0_0>class __all_default_constructible<__tuple_types<__xcodeml_template_type_0_0...>/*packsize1*/>:public integral_constant<bool,expression>{}
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>class __tuple_impl;
;
template<unsigned long _Indx...,typename...__xcodeml_template_type_0_1>class __tuple_impl<__tuple_indices<expression>/*packsize1*/,__xcodeml_template_type_0_1...>/*packsize1*/:public __tuple_leaf<expression,__xcodeml_template_type_0_1...,expression>{public:__tuple_impl()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<unsigned long _Uf...,typename...__xcodeml_template_type_1_1,unsigned long _Ul...,typename...__xcodeml_template_type_1_3,typename...__xcodeml_template_type_1_4>__tuple_impl(__tuple_indices<expression>/*packsize1*/,__tuple_types<__xcodeml_template_type_1_1...>/*packsize1*/,__tuple_indices<expression>/*packsize1*/,__tuple_types<__xcodeml_template_type_1_3...>/*packsize1*/,__xcodeml_template_type_1_4&& ...__u):((std::__1::forward<__xcodeml_template_type_1_4...>(__u))),()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,unsigned long _Uf...,typename...__xcodeml_template_type_1_2,unsigned long _Ul...,typename...__xcodeml_template_type_1_4,typename...__xcodeml_template_type_1_5>__tuple_impl(class::std::__1::allocator_arg_t,__xcodeml_template_type_1_0 const&__a,__tuple_indices<expression>/*packsize1*/,__tuple_types<__xcodeml_template_type_1_2...>/*packsize1*/,__tuple_indices<expression>/*packsize1*/,__tuple_types<__xcodeml_template_type_1_4...>/*packsize1*/,__xcodeml_template_type_1_5&& ...__u):(__xcodeml_identity<__uses_alloc_ctor<__xcodeml_template_type_1_2...,__xcodeml_template_type_1_0,__xcodeml_template_type_1_5...>/*packsize1*/>::t()__a(std::__1::forward<__xcodeml_template_type_1_5...>(__u))),(__xcodeml_identity<__uses_alloc_ctor<__xcodeml_template_type_1_4...,__xcodeml_template_type_1_0>/*packsize0*/>::t()__a)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__tuple_impl(__xcodeml_template_type_1_0&& __t):((std::__1::forward<typename tuple_element<expression,typename __make_tuple_types<__xcodeml_template_type_1_0,expression,0,expression>::type>::type>((std::__1::get<_Indx>(__t)))))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename __xcodeml_template_type_1_2>__tuple_impl(class::std::__1::allocator_arg_t,__xcodeml_template_type_1_0 const&__a,__xcodeml_template_type_1_1&& __t):(__xcodeml_identity<__uses_alloc_ctor<__xcodeml_template_type_0_1...,__xcodeml_template_type_1_0,typename tuple_element<expression,typename __make_tuple_types<__xcodeml_template_type_1_1,expression,0,expression>::type>::type>/*packsize1*/>::t()__a(std::__1::forward<typename tuple_element<expression,typename __make_tuple_types<__xcodeml_template_type_1_1,expression,0,expression>::type>::type>((std::__1::get<_Indx>(__t)))))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,class __tuple_impl<__tuple_indices<expression>/*packsize1*/,__xcodeml_template_type_0_1...>/*packsize1*/&>::type operator=(__xcodeml_template_type_1_0&& __t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__swallow((__tuple_leaf<expression,__xcodeml_template_type_0_1...,expression>::.operator=((std::__1::forward<typename tuple_element<expression,typename __make_tuple_types<__xcodeml_template_type_1_0,expression,0,expression>::type>::type>((std::__1::get<_Indx>(__t))))))...));
return(*this);
}
public:__tuple_impl(class __tuple_impl const&);
public:__tuple_impl(class __tuple_impl<__tuple_indices<expression>/*packsize1*/,__xcodeml_template_type_0_1...>/*packsize1*/&& );
public:class __tuple_impl<__tuple_indices<expression>/*packsize1*/,__xcodeml_template_type_0_1...>/*packsize1*/&operator=(class __tuple_impl const&__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__swallow((__tuple_leaf<expression,__xcodeml_template_type_0_1...,expression>::.operator=((static_cast<__tuple_leaf<expression,__xcodeml_template_type_0_1...,expression>const&>(__t).get())))...));
return(*this);
}
public:class __tuple_impl<__tuple_indices<expression>/*packsize1*/,__xcodeml_template_type_0_1...>/*packsize1*/&operator=(class __tuple_impl<__tuple_indices<expression>/*packsize1*/,__xcodeml_template_type_0_1...>/*packsize1*/&& __t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__swallow((__tuple_leaf<expression,__xcodeml_template_type_0_1...,expression>::.operator=((std::__1::forward<__xcodeml_template_type_0_1...>((static_cast<__tuple_leaf<expression,__xcodeml_template_type_0_1...,expression>&>(__t).get())))))...));
return(*this);
}
public:void swap(class __tuple_impl<__tuple_indices<expression>/*packsize1*/,__xcodeml_template_type_0_1...>/*packsize1*/&__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__swallow((__tuple_leaf<expression,__xcodeml_template_type_0_1...,expression>::.swap(static_cast<__tuple_leaf<expression,__xcodeml_template_type_0_1...,expression>&>(__t)))...));
}
}
;
template<typename...__xcodeml_template_type_0_0>class tuple{private:typedef __tuple_impl<typename __make_tuple_indices<expression,0>::type,__xcodeml_template_type_0_0...>/*packsize1*/_BaseT;
private:__tuple_impl<typename __make_tuple_indices<expression,0>::type,__xcodeml_template_type_0_0...>/*packsize1*/__base_;
private:constexpr static bool const _EnableImplicitReducedArityExtension=false;
private:template<typename...__xcodeml_template_type_1_0>class _PackExpandsToThisTuple:public integral_constant<bool,0>{}
;
;

/* Ignored a member with no access specifier template<typename __xcodeml_template_type_1_0>class _PackExpandsToThisTuple<__xcodeml_template_type_1_0>/*packsize1*/:public is_same<typename __uncvref<__xcodeml_template_type_1_0>::type,class tuple>{}
;*/

private:template<bool _MaybeEnable,typename __xcodeml_template_type_1_1>class _CheckArgsConstructor:public __check_tuple_constructor_fail{}
;
;

/* Ignored a member with no access specifier template<typename __xcodeml_template_type_1_0>class _CheckArgsConstructor<1,__xcodeml_template_type_1_0>{public:template<typename...__xcodeml_template_type_2_0>static bool __enable_default(){return integral_constant<bool,expression>::value;
}
public:template<typename...__xcodeml_template_type_2_0>static bool __enable_explicit(){return((__tuple_constructible<tuple<__xcodeml_template_type_2_0...>/*packsize1*/,typename __make_tuple_types<class tuple,expression,0,expression>::type,expression,expression>::value&&(!__tuple_convertible<tuple<__xcodeml_template_type_2_0...>/*packsize1*/,typename __make_tuple_types<class tuple,expression,0,expression>::type,expression,expression>::value))&&__all_default_constructible<typename __make_tuple_types<class tuple,expression,expression,expression>::type>::value);
}
public:template<typename...__xcodeml_template_type_2_0>static bool __enable_implicit(){return((__tuple_constructible<tuple<__xcodeml_template_type_2_0...>/*packsize1*/,typename __make_tuple_types<class tuple,expression,0,expression>::type,expression,expression>::value&&__tuple_convertible<tuple<__xcodeml_template_type_2_0...>/*packsize1*/,typename __make_tuple_types<class tuple,expression,0,expression>::type,expression,expression>::value)&&__all_default_constructible<typename __make_tuple_types<class tuple,expression,expression,expression>::type>::value);
}
}
;*/

private:template<bool _MaybeEnable,bool=(sizeof...(
                    __xcodeml_template_type_0_0
                  )==1),typename __xcodeml_template_type_1_2>class _CheckTupleLikeConstructor:public __check_tuple_constructor_fail{}
;
;

/* Ignored a member with no access specifier template<typename __xcodeml_template_type_1_0>class _CheckTupleLikeConstructor<1,0,__xcodeml_template_type_1_0>{public:template<typename __xcodeml_template_type_2_0>static bool __enable_implicit(){return(__tuple_constructible<__xcodeml_template_type_2_0,class tuple,expression,expression>::value&&__tuple_convertible<__xcodeml_template_type_2_0,class tuple,expression,expression>::value);
}
public:template<typename __xcodeml_template_type_2_0>static bool __enable_explicit(){return(__tuple_constructible<__xcodeml_template_type_2_0,class tuple,expression,expression>::value&&(!__tuple_convertible<__xcodeml_template_type_2_0,class tuple,expression,expression>::value));
}
}
;*/


/* Ignored a member with no access specifier template<typename __xcodeml_template_type_1_0>class _CheckTupleLikeConstructor<1,1,__xcodeml_template_type_1_0>{public:template<typename __xcodeml_template_type_2_0>using _PreferTupleLikeConstructor=/*DTS*/_MetaBase<expression>::template _OrImpl<integral_constant<bool,expression>,_Lazy<_And,/*XXXtemplate_expansion*/,_Not<is_constructible<__xcodeml_template_type_0_0...,__xcodeml_template_type_2_0> >,_Not<is_convertible<__xcodeml_template_type_2_0,__xcodeml_template_type_0_0...> > >/*packsize2*/>;
public:template<typename __xcodeml_template_type_2_0>static bool __enable_implicit(){return/*DTS*/_MetaBase<expression>::template _AndImpl<__tuple_constructible<__xcodeml_template_type_2_0,class tuple,expression,expression>,__tuple_convertible<__xcodeml_template_type_2_0,class tuple,expression,expression>,/*DTS*/_MetaBase<expression>::template _OrImpl<integral_constant<bool,expression>,_Lazy<_And,/*XXXtemplate_expansion*/,_Not<is_constructible<__xcodeml_template_type_0_0...,__xcodeml_template_type_2_0> >,_Not<is_convertible<__xcodeml_template_type_2_0,__xcodeml_template_type_0_0...> > >/*packsize2*/> >::value;
}
public:template<typename __xcodeml_template_type_2_0>static bool __enable_explicit(){return/*DTS*/_MetaBase<expression>::template _AndImpl<__tuple_constructible<__xcodeml_template_type_2_0,class tuple,expression,expression>,/*DTS*/_MetaBase<expression>::template _OrImpl<integral_constant<bool,expression>,_Lazy<_And,/*XXXtemplate_expansion*/,_Not<is_constructible<__xcodeml_template_type_0_0...,__xcodeml_template_type_2_0> >,_Not<is_convertible<__xcodeml_template_type_2_0,__xcodeml_template_type_0_0...> > >/*packsize2*/>,_Not<__tuple_convertible<__xcodeml_template_type_2_0,class tuple,expression,expression> > >::value;
}
}
;*/

private:template<typename __xcodeml_template_type_1_0,bool _DisableIfLValue>using _EnableImplicitTupleLikeConstructor=/*DTS*/_MetaBase<expression>::template _EnableIfImpl<bool>;
private:template<typename __xcodeml_template_type_1_0,bool _DisableIfLValue>using _EnableExplicitTupleLikeConstructor=/*DTS*/_MetaBase<expression>::template _EnableIfImpl<bool>;
public:friend template<unsigned long _Jp,typename...__xcodeml_template_type_1_1>typename tuple_element<expression,tuple<__xcodeml_template_type_1_1...>/*packsize1*/>::type&get(tuple<__xcodeml_template_type_1_1...>/*packsize1*/&);
public:friend template<unsigned long _Jp,typename...__xcodeml_template_type_1_1>typename tuple_element<expression,tuple<__xcodeml_template_type_1_1...>/*packsize1*/>::type const&get(tuple<__xcodeml_template_type_1_1...>/*packsize1*/const&);
public:friend template<unsigned long _Jp,typename...__xcodeml_template_type_1_1>typename tuple_element<expression,tuple<__xcodeml_template_type_1_1...>/*packsize1*/>::type&& get(tuple<__xcodeml_template_type_1_1...>/*packsize1*/&& );
public:friend template<unsigned long _Jp,typename...__xcodeml_template_type_1_1>typename tuple_element<expression,tuple<__xcodeml_template_type_1_1...>/*packsize1*/>::type const&& get(tuple<__xcodeml_template_type_1_1...>/*packsize1*/const&& );
public:
public:template<bool _Dummy=true,typename __xcodeml_template_type_1_1>tuple()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:tuple(class tuple const&);
public:tuple(class tuple&& );
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,bool _Dummy=true,typename __xcodeml_template_type_1_3>tuple(__xcodeml_template_type_1_0,__xcodeml_template_type_1_1 const&__a):__base_(__xcodeml_identity<class::std::__1::allocator_arg_t>::t()__a __xcodeml_identity<class::std::__1::__tuple_indices<>/*packsize0*/>::t()__xcodeml_identity<class::std::__1::__tuple_types<>/*packsize0*/>::t()__xcodeml_identity<typename __make_tuple_indices<expression,0>::type>::t()__xcodeml_identity<__tuple_types<__xcodeml_template_type_0_0...>/*packsize1*/>::t())/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<bool _Dummy=true,typename enable_if<expression,bool>::type=false>tuple(__xcodeml_template_type_0_0 const&...__t):__base_(__xcodeml_identity<typename __make_tuple_indices<expression,0>::type>::t()__xcodeml_identity<typename __make_tuple_types<class tuple,expression,0,expression>::type>::t()__xcodeml_identity<class::std::__1::__tuple_indices<>/*packsize0*/>::t()__xcodeml_identity<typename __make_tuple_types<class tuple,0,0,expression>::type>::t()__t...)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<bool _Dummy=true,typename enable_if<expression,bool>::type=false>tuple(__xcodeml_template_type_0_0 const&...__t):__base_(__xcodeml_identity<typename __make_tuple_indices<expression,0>::type>::t()__xcodeml_identity<typename __make_tuple_types<class tuple,expression,0,expression>::type>::t()__xcodeml_identity<class::std::__1::__tuple_indices<>/*packsize0*/>::t()__xcodeml_identity<typename __make_tuple_types<class tuple,0,0,expression>::type>::t()__t...)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,bool _Dummy=true,typename enable_if<expression,bool>::type=false>tuple(class::std::__1::allocator_arg_t,__xcodeml_template_type_1_0 const&__a,__xcodeml_template_type_0_0 const&...__t):__base_(__xcodeml_identity<class::std::__1::allocator_arg_t>::t()__a __xcodeml_identity<typename __make_tuple_indices<expression,0>::type>::t()__xcodeml_identity<typename __make_tuple_types<class tuple,expression,0,expression>::type>::t()__xcodeml_identity<class::std::__1::__tuple_indices<>/*packsize0*/>::t()__xcodeml_identity<typename __make_tuple_types<class tuple,0,0,expression>::type>::t()__t...)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,bool _Dummy=true,typename enable_if<expression,bool>::type=false>tuple(class::std::__1::allocator_arg_t,__xcodeml_template_type_1_0 const&__a,__xcodeml_template_type_0_0 const&...__t):__base_(__xcodeml_identity<class::std::__1::allocator_arg_t>::t()__a __xcodeml_identity<typename __make_tuple_indices<expression,0>::type>::t()__xcodeml_identity<typename __make_tuple_types<class tuple,expression,0,expression>::type>::t()__xcodeml_identity<class::std::__1::__tuple_indices<>/*packsize0*/>::t()__xcodeml_identity<typename __make_tuple_types<class tuple,0,0,expression>::type>::t()__t...)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename...__xcodeml_template_type_1_0,bool _PackIsTuple=_PackExpandsToThisTuple<__xcodeml_template_type_1_0...>/*packsize1*/::value,typename enable_if<expression,bool>::type=false>tuple(__xcodeml_template_type_1_0&& ...__u):__base_(__xcodeml_identity<typename __make_tuple_indices<expression,0>::type>::t()__xcodeml_identity<typename __make_tuple_types<class tuple,expression,0,expression>::type>::t()__xcodeml_identity<typename __make_tuple_indices<expression,expression>::type>::t()__xcodeml_identity<typename __make_tuple_types<class tuple,expression,expression,expression>::type>::t()(std::__1::forward<__xcodeml_template_type_1_0...>(__u))...)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename...__xcodeml_template_type_1_0,typename enable_if<expression,bool>::type=false>tuple(__xcodeml_template_type_1_0&& ...__u):__base_(__xcodeml_identity<typename __make_tuple_indices<expression,0>::type>::t()__xcodeml_identity<typename __make_tuple_types<class tuple,expression,0,expression>::type>::t()__xcodeml_identity<typename __make_tuple_indices<expression,expression>::type>::t()__xcodeml_identity<typename __make_tuple_types<class tuple,expression,expression,expression>::type>::t()(std::__1::forward<__xcodeml_template_type_1_0...>(__u))...)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1,typename enable_if<expression,bool>::type=false>tuple(class::std::__1::allocator_arg_t,__xcodeml_template_type_1_0 const&__a,__xcodeml_template_type_1_1&& ...__u):__base_(__xcodeml_identity<class::std::__1::allocator_arg_t>::t()__a __xcodeml_identity<typename __make_tuple_indices<expression,0>::type>::t()__xcodeml_identity<typename __make_tuple_types<class tuple,expression,0,expression>::type>::t()__xcodeml_identity<typename __make_tuple_indices<expression,expression>::type>::t()__xcodeml_identity<typename __make_tuple_types<class tuple,expression,expression,expression>::type>::t()(std::__1::forward<__xcodeml_template_type_1_1...>(__u))...)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1,typename enable_if<expression,bool>::type=false>tuple(class::std::__1::allocator_arg_t,__xcodeml_template_type_1_0 const&__a,__xcodeml_template_type_1_1&& ...__u):__base_(__xcodeml_identity<class::std::__1::allocator_arg_t>::t()__a __xcodeml_identity<typename __make_tuple_indices<expression,0>::type>::t()__xcodeml_identity<typename __make_tuple_types<class tuple,expression,0,expression>::type>::t()__xcodeml_identity<typename __make_tuple_indices<expression,expression>::type>::t()__xcodeml_identity<typename __make_tuple_types<class tuple,expression,expression,expression>::type>::t()(std::__1::forward<__xcodeml_template_type_1_1...>(__u))...)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,/*DTS*/_MetaBase<expression>::template _EnableIfImpl<bool> =false>tuple(__xcodeml_template_type_1_0&& __t):__base_((std::__1::forward<__xcodeml_template_type_1_0>(__t)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,/*DTS*/_MetaBase<expression>::template _EnableIfImpl<bool> =false>tuple(__xcodeml_template_type_1_0 const&__t):__base_(__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,/*DTS*/_MetaBase<expression>::template _EnableIfImpl<bool> =false>tuple(__xcodeml_template_type_1_0&& __t):__base_((std::__1::forward<__xcodeml_template_type_1_0>(__t)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,/*DTS*/_MetaBase<expression>::template _EnableIfImpl<bool> =false>tuple(__xcodeml_template_type_1_0 const&__t):__base_(__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename enable_if<expression,bool>::type=false>tuple(class::std::__1::allocator_arg_t,__xcodeml_template_type_1_0 const&__a,__xcodeml_template_type_1_1&& __t):__base_(__xcodeml_identity<class::std::__1::allocator_arg_t>::t()__a(std::__1::forward<__xcodeml_template_type_1_1>(__t)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename enable_if<expression,bool>::type=false>tuple(class::std::__1::allocator_arg_t,__xcodeml_template_type_1_0 const&__a,__xcodeml_template_type_1_1&& __t):__base_(__xcodeml_identity<class::std::__1::allocator_arg_t>::t()__a(std::__1::forward<__xcodeml_template_type_1_1>(__t)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:using _CanCopyAssign=integral_constant<bool,expression>;
public:using _CanMoveAssign=integral_constant<bool,expression>;
public:class tuple&operator=(typename conditional<expression,class tuple,class::std::__1::__nat>::type const&__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__base_.operator=(__t.__base_));
return(*this);
}
public:class tuple&operator=(typename conditional<expression,class tuple,class::std::__1::__nat>::type&& __t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__base_.operator=(static_cast<__tuple_impl<typename __make_tuple_indices<expression,0>::type,__xcodeml_template_type_0_0...>/*packsize1*/&& >(__t.__base_)));
return(*this);
}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>class tuple&operator=(__xcodeml_template_type_1_0&& __t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__base_.operator=((std::__1::forward<__xcodeml_template_type_1_0>(__t))));
return(*this);
}
public:void swap(class tuple&__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__base_.swap(__t.__base_));
}
}
;
;
template<>class tuple<>/*packsize0*/{public:
public:tuple();
public:template<typename __xcodeml_template_type_0_0>tuple(class::std::__1::allocator_arg_t,__xcodeml_template_type_0_0 const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_0_0>tuple(class::std::__1::allocator_arg_t,__xcodeml_template_type_0_0 const&,class tuple const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_0_0>tuple(array<__xcodeml_template_type_0_0,0>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>tuple(class::std::__1::allocator_arg_t,__xcodeml_template_type_0_0 const&,array<__xcodeml_template_type_0_1,0>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:void swap(class::std::__1::tuple<>/*packsize0*/&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
}
;
template<typename...__xcodeml_template_type_0_0>typename enable_if<expression,void>::type swap(tuple<__xcodeml_template_type_0_0...>/*packsize1*/&__t,tuple<__xcodeml_template_type_0_0...>/*packsize1*/&__u)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__t.swap(__u));
}
template<unsigned long _Ip,typename...__xcodeml_template_type_0_1>typename tuple_element<expression,tuple<__xcodeml_template_type_0_1...>/*packsize1*/>::type&get(tuple<__xcodeml_template_type_0_1...>/*packsize1*/&__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename tuple_element<expression,tuple<__xcodeml_template_type_0_1...>/*packsize1*/>::type type;
return(static_cast<__tuple_leaf<expression,typename tuple_element<expression,tuple<__xcodeml_template_type_0_1...>/*packsize1*/>::type,expression>&>(__t.__base_).get());
}
template<unsigned long _Ip,typename...__xcodeml_template_type_0_1>typename tuple_element<expression,tuple<__xcodeml_template_type_0_1...>/*packsize1*/>::type const&get(tuple<__xcodeml_template_type_0_1...>/*packsize1*/const&__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename tuple_element<expression,tuple<__xcodeml_template_type_0_1...>/*packsize1*/>::type type;
return(static_cast<__tuple_leaf<expression,typename tuple_element<expression,tuple<__xcodeml_template_type_0_1...>/*packsize1*/>::type,expression>const&>(__t.__base_).get());
}
template<unsigned long _Ip,typename...__xcodeml_template_type_0_1>typename tuple_element<expression,tuple<__xcodeml_template_type_0_1...>/*packsize1*/>::type&& get(tuple<__xcodeml_template_type_0_1...>/*packsize1*/&& __t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename tuple_element<expression,tuple<__xcodeml_template_type_0_1...>/*packsize1*/>::type type;
return static_cast<typename tuple_element<expression,tuple<__xcodeml_template_type_0_1...>/*packsize1*/>::type&& >((static_cast<__tuple_leaf<expression,typename tuple_element<expression,tuple<__xcodeml_template_type_0_1...>/*packsize1*/>::type,expression>&& >(__t.__base_).get()));
}
template<unsigned long _Ip,typename...__xcodeml_template_type_0_1>typename tuple_element<expression,tuple<__xcodeml_template_type_0_1...>/*packsize1*/>::type const&& get(tuple<__xcodeml_template_type_0_1...>/*packsize1*/const&& __t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename tuple_element<expression,tuple<__xcodeml_template_type_0_1...>/*packsize1*/>::type type;
return static_cast<typename tuple_element<expression,tuple<__xcodeml_template_type_0_1...>/*packsize1*/>::type const&& >((static_cast<__tuple_leaf<expression,typename tuple_element<expression,tuple<__xcodeml_template_type_0_1...>/*packsize1*/>::type,expression>const&& >(__t.__base_).get()));
}
template<typename...__xcodeml_template_type_0_0>tuple<__xcodeml_template_type_0_0&...>/*packsize1*/tie(__xcodeml_template_type_0_0&...__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<tuple<__xcodeml_template_type_0_0&...>/*packsize1*/>::t(__t...);
}
template<typename __xcodeml_template_type_0_0>class __ignore_t{public:template<typename __xcodeml_template_type_1_0>class __ignore_t const&operator=(__xcodeml_template_type_1_0&& )const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this);
}
}
;
;
namespace{constexpr class __ignore_t const ignore=__xcodeml_identity<class::std::__1::__ignore_t<unsigned char> >::t();
}
template<typename...__xcodeml_template_type_0_0>tuple<typename __unwrap_ref_decay<__xcodeml_template_type_0_0...>::type>/*packsize1*/make_tuple(__xcodeml_template_type_0_0&& ...__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<tuple<typename __unwrap_ref_decay<__xcodeml_template_type_0_0...>::type>/*packsize1*/>::t((std::__1::forward<__xcodeml_template_type_0_0...>(__t))...);
}
template<typename...__xcodeml_template_type_0_0>tuple<__xcodeml_template_type_0_0&& ...>/*packsize1*/forward_as_tuple(__xcodeml_template_type_0_0&& ...__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<tuple<__xcodeml_template_type_0_0&& ...>/*packsize1*/>::t((std::__1::forward<__xcodeml_template_type_0_0...>(__t))...);
}
template<unsigned long _Ip>class __tuple_equal{public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>bool operator()(__xcodeml_template_type_1_0 const&__x,__xcodeml_template_type_1_1 const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((__xcodeml_identity<__tuple_equal<expression> >::t()(__x,__y))&&operator==((std::__1::get<(_Ip-1)>(__x)),(std::__1::get<(_Ip-1)>(__y))));
}
}
;
;
template<>class __tuple_equal<0>{public:template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator()(__xcodeml_template_type_0_0 const&,__xcodeml_template_type_0_1 const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return true;
}
}
;
template<typename...__xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>bool operator==(tuple<__xcodeml_template_type_0_0...>/*packsize1*/const&__x,tuple<__xcodeml_template_type_0_1...>/*packsize1*/const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert((sizeof...(
                      __xcodeml_template_type_0_0
                    )==sizeof...(
                      __xcodeml_template_type_0_1
                    )),"Can't compare tuples of different sizes");
return(__xcodeml_identity<__tuple_equal<expression> >::t()(__x,__y));
}
template<typename...__xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>bool operator!=(tuple<__xcodeml_template_type_0_0...>/*packsize1*/const&__x,tuple<__xcodeml_template_type_0_1...>/*packsize1*/const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator==(__x,__y));
}
template<unsigned long _Ip>class __tuple_less{public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>bool operator()(__xcodeml_template_type_1_0 const&__x,__xcodeml_template_type_1_1 const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{unsigned long const __idx=operator-(tuple_size<__xcodeml_template_type_1_0>::.value,_Ip);
if(operator<((std::__1::get<__idx>(__x)),(std::__1::get<__idx>(__y)))){return true;};
if(operator<((std::__1::get<__idx>(__y)),(std::__1::get<__idx>(__x)))){return false;};
return(__xcodeml_identity<__tuple_less<expression> >::t()(__x,__y));
}
}
;
;
template<>class __tuple_less<0>{public:template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator()(__xcodeml_template_type_0_0 const&,__xcodeml_template_type_0_1 const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return false;
}
}
;
template<typename...__xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>bool operator<(tuple<__xcodeml_template_type_0_0...>/*packsize1*/const&__x,tuple<__xcodeml_template_type_0_1...>/*packsize1*/const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert((sizeof...(
                      __xcodeml_template_type_0_0
                    )==sizeof...(
                      __xcodeml_template_type_0_1
                    )),"Can't compare tuples of different sizes");
return(__xcodeml_identity<__tuple_less<expression> >::t()(__x,__y));
}
template<typename...__xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>bool operator>(tuple<__xcodeml_template_type_0_0...>/*packsize1*/const&__x,tuple<__xcodeml_template_type_0_1...>/*packsize1*/const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(__y,__x);
}
template<typename...__xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>bool operator>=(tuple<__xcodeml_template_type_0_0...>/*packsize1*/const&__x,tuple<__xcodeml_template_type_0_1...>/*packsize1*/const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(__x,__y));
}
template<typename...__xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>bool operator<=(tuple<__xcodeml_template_type_0_0...>/*packsize1*/const&__x,tuple<__xcodeml_template_type_0_1...>/*packsize1*/const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(__y,__x));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __tuple_cat_type;
;
template<typename...__xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>class __tuple_cat_type<tuple<__xcodeml_template_type_0_0...>/*packsize1*/,__tuple_types<__xcodeml_template_type_0_1...>/*packsize1*/>{public:typedef tuple<__xcodeml_template_type_0_0...,__xcodeml_template_type_0_1...>/*packsize2*/type;
}
;
template<typename __xcodeml_template_type_0_0,bool _Is_Tuple0TupleLike,typename...__xcodeml_template_type_0_2>class __tuple_cat_return_1{}
;
;
template<typename...__xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __tuple_cat_return_1<tuple<__xcodeml_template_type_0_0...>/*packsize1*/,1,__xcodeml_template_type_0_1>/*packsize1*/{public:typedef typename __tuple_cat_type<tuple<__xcodeml_template_type_0_0...>/*packsize1*/,typename __make_tuple_types<typename __uncvref<__xcodeml_template_type_0_1>::type,expression,0,expression>::type>::type type;
}
;
template<typename...__xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename...__xcodeml_template_type_0_3>class __tuple_cat_return_1<tuple<__xcodeml_template_type_0_0...>/*packsize1*/,1,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2,__xcodeml_template_type_0_3...>/*packsize3*/:public __tuple_cat_return_1<typename __tuple_cat_type<tuple<__xcodeml_template_type_0_0...>/*packsize1*/,typename __make_tuple_types<typename __uncvref<__xcodeml_template_type_0_1>::type,expression,0,expression>::type>::type,expression,__xcodeml_template_type_0_2,__xcodeml_template_type_0_3...>/*packsize2*/{}
;
template<typename...__xcodeml_template_type_0_0>class __tuple_cat_return;
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>class __tuple_cat_return<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1...>/*packsize2*/:public __tuple_cat_return_1<class::std::__1::tuple<>/*packsize0*/,expression,__xcodeml_template_type_0_0,__xcodeml_template_type_0_1...>/*packsize2*/{}
;
template<>class __tuple_cat_return<>/*packsize0*/{public:typedef class::std::__1::tuple<>/*packsize0*/type;
}
;
class::std::__1::tuple<>/*packsize0*/tuple_cat()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<class::std::__1::tuple<>/*packsize0*/>::t();
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename...__xcodeml_template_type_0_3>class __tuple_cat_return_ref_imp;
;
template<typename...__xcodeml_template_type_0_0,unsigned long _I0...,typename __xcodeml_template_type_0_2>class __tuple_cat_return_ref_imp<tuple<__xcodeml_template_type_0_0...>/*packsize1*/,__tuple_indices<expression>/*packsize1*/,__xcodeml_template_type_0_2>/*packsize0*/{public:typedef typename remove_reference<__xcodeml_template_type_0_2>::type _T0;
public:typedef tuple<__xcodeml_template_type_0_0...,typename __apply_cv<__xcodeml_template_type_0_2,typename tuple_element<expression,typename remove_reference<__xcodeml_template_type_0_2>::type>::type,expression,expression>::type&& >/*packsize2*/type;
}
;
template<typename...__xcodeml_template_type_0_0,unsigned long _I0...,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3,typename...__xcodeml_template_type_0_4>class __tuple_cat_return_ref_imp<tuple<__xcodeml_template_type_0_0...>/*packsize1*/,__tuple_indices<expression>/*packsize1*/,__xcodeml_template_type_0_2,__xcodeml_template_type_0_3,__xcodeml_template_type_0_4...>/*packsize2*/:public __tuple_cat_return_ref_imp<tuple<__xcodeml_template_type_0_0...,typename __apply_cv<__xcodeml_template_type_0_2,typename tuple_element<expression,typename remove_reference<__xcodeml_template_type_0_2>::type>::type,expression,expression>::type&& >/*packsize2*/,typename __make_tuple_indices<expression,0>::type,__xcodeml_template_type_0_3,__xcodeml_template_type_0_4...>/*packsize1*/{}
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>class __tuple_cat_return_ref:public __tuple_cat_return_ref_imp<class::std::__1::tuple<>/*packsize0*/,typename __make_tuple_indices<expression,0>::type,__xcodeml_template_type_0_0,__xcodeml_template_type_0_1...>/*packsize1*/{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __tuple_cat;
;
template<typename...__xcodeml_template_type_0_0,unsigned long _I0...,unsigned long _J0...>class __tuple_cat<tuple<__xcodeml_template_type_0_0...>/*packsize1*/,__tuple_indices<expression>/*packsize1*/,__tuple_indices<expression>/*packsize1*/>{public:template<typename __xcodeml_template_type_1_0>typename __tuple_cat_return_ref<tuple<__xcodeml_template_type_0_0...>/*packsize1*/&& ,__xcodeml_template_type_1_0&& >/*packsize1*/::type operator()(tuple<__xcodeml_template_type_0_0...>/*packsize1*/__t,__xcodeml_template_type_1_0&& __t0)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(forward_as_tuple((std::__1::forward<__xcodeml_template_type_0_0...>((std::__1::get<_I0>(__t))))...,(std::__1::get<_J0>((std::__1::forward<__xcodeml_template_type_1_0>(__t0))))...));
}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename...__xcodeml_template_type_1_2>typename __tuple_cat_return_ref<tuple<__xcodeml_template_type_0_0...>/*packsize1*/&& ,__xcodeml_template_type_1_0&& ,__xcodeml_template_type_1_1&& ,__xcodeml_template_type_1_2&& ...>/*packsize3*/::type operator()(tuple<__xcodeml_template_type_0_0...>/*packsize1*/__t,__xcodeml_template_type_1_0&& __t0,__xcodeml_template_type_1_1&& __t1,__xcodeml_template_type_1_2&& ...__tpls)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename remove_reference<__xcodeml_template_type_1_0>::type _T0;
typedef typename remove_reference<__xcodeml_template_type_1_1>::type _T1;
return(__xcodeml_identity<__tuple_cat<tuple<__xcodeml_template_type_0_0...,typename __apply_cv<__xcodeml_template_type_1_0,typename tuple_element<expression,typename remove_reference<__xcodeml_template_type_1_0>::type>::type,expression,expression>::type&& >/*packsize2*/,typename __make_tuple_indices<expression,0>::type,typename __make_tuple_indices<expression,0>::type> >::t()((forward_as_tuple((std::__1::forward<__xcodeml_template_type_0_0...>((std::__1::get<_I0>(__t))))...,(std::__1::get<_J0>((std::__1::forward<__xcodeml_template_type_1_0>(__t0))))...)),(std::__1::forward<__xcodeml_template_type_1_1>(__t1)),(std::__1::forward<__xcodeml_template_type_1_2...>(__tpls))...));
}
}
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>typename __tuple_cat_return<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1...>/*packsize2*/::type tuple_cat(__xcodeml_template_type_0_0&& __t0,__xcodeml_template_type_0_1&& ...__tpls)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename remove_reference<__xcodeml_template_type_0_0>::type _T0;
return(__xcodeml_identity<__tuple_cat<class::std::__1::tuple<>/*packsize0*/,class::std::__1::__tuple_indices<>/*packsize0*/,typename __make_tuple_indices<expression,0>::type> >::t()(__xcodeml_identity<class::std::__1::tuple<>/*packsize0*/>::t(),(std::__1::forward<__xcodeml_template_type_0_0>(__t0)),(std::__1::forward<__xcodeml_template_type_0_1...>(__tpls))...));
}
template<typename...__xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class uses_allocator<tuple<__xcodeml_template_type_0_0...>/*packsize1*/,__xcodeml_template_type_0_1>:public integral_constant<bool,1>{}
;
template<typename...__xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1,unsigned long _I1...,unsigned long _I2...>pair::pair(class::std::__1::piecewise_construct_t,tuple<__xcodeml_template_type_1_0...>/*packsize1*/&__first_args,tuple<__xcodeml_template_type_1_1...>/*packsize1*/&__second_args,__tuple_indices<expression>/*packsize1*/,__tuple_indices<expression>/*packsize1*/):first((std::__1::forward<__xcodeml_template_type_1_0...>((std::__1::get<_I1>(__first_args))))...),second((std::__1::forward<__xcodeml_template_type_1_1...>((std::__1::get<_I2>(__second_args))))...)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
}
}
namespace std{namespace __1{class __libcpp_refstring{private:char const(*__imp_);
private:bool __uses_refcount()const;
public:
public:__libcpp_refstring(char const(*__msg));
public:__libcpp_refstring(class __libcpp_refstring const&__s);
public:class::std::__1::__libcpp_refstring&operator=(class __libcpp_refstring const&__s);
public:~__libcpp_refstring();
public:char const(*c_str()const){return this->__imp_;
}
}
;
}
}
namespace std{class logic_error:public exception{private:
private:class::std::__1::__libcpp_refstring __imp_;
public:
public:logic_error(class basic_string const&);
public:logic_error(char const(*));
public:logic_error(class logic_error const&);
public:class::std::logic_error&operator=(class logic_error const&);
public:virtual~logic_error();
public:virtual char const(*what()const);
}
;
class runtime_error:public exception{private:
private:class::std::__1::__libcpp_refstring __imp_;
public:
public:runtime_error(class basic_string const&);
public:runtime_error(char const(*));
public:runtime_error(class runtime_error const&);
public:class::std::runtime_error&operator=(class runtime_error const&);
public:virtual~runtime_error();
public:virtual char const(*what()const);
}
;
class domain_error:public logic_error{public:
public:domain_error(class basic_string const&__s):logic_error(__s)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:domain_error(char const(*__s)):logic_error(__s)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:virtual~domain_error();
}
;
class invalid_argument:public logic_error{public:
public:invalid_argument(class basic_string const&__s):logic_error(__s)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:invalid_argument(char const(*__s)):logic_error(__s)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:virtual~invalid_argument();
}
;
class length_error:public logic_error{public:
public:length_error(class basic_string const&__s):logic_error(__s)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:length_error(char const(*__s)):logic_error(__s)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:virtual~length_error();
}
;
class out_of_range:public logic_error{public:
public:out_of_range(class basic_string const&__s):logic_error(__s)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:out_of_range(char const(*__s)):logic_error(__s)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:virtual~out_of_range();
}
;
class range_error:public runtime_error{public:
public:range_error(class basic_string const&__s):runtime_error(__s)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:range_error(char const(*__s)):runtime_error(__s)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:virtual~range_error();
}
;
class overflow_error:public runtime_error{public:
public:overflow_error(class basic_string const&__s):runtime_error(__s)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:overflow_error(char const(*__s)):runtime_error(__s)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:virtual~overflow_error();
}
;
class underflow_error:public runtime_error{public:
public:underflow_error(class basic_string const&__s):runtime_error(__s)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:underflow_error(char const(*__s)):runtime_error(__s)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:virtual~underflow_error();
}
;
}
namespace std{namespace __1{void __throw_runtime_error(char const(*))/*gccattr noreturn:*//*gccattr visibility:*/;
void __throw_logic_error(char const(*__msg))/*gccattr noreturn:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{throw((class::std::logic_error)__xcodeml_identity<class::std::logic_error>::t(__msg));
}
void __throw_domain_error(char const(*__msg))/*gccattr noreturn:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{throw((class::std::domain_error)__xcodeml_identity<class::std::domain_error>::t(__msg));
}
void __throw_invalid_argument(char const(*__msg))/*gccattr noreturn:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{throw((class::std::invalid_argument)__xcodeml_identity<class::std::invalid_argument>::t(__msg));
}
void __throw_length_error(char const(*__msg))/*gccattr noreturn:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{throw((class::std::length_error)__xcodeml_identity<class::std::length_error>::t(__msg));
}
void __throw_out_of_range(char const(*__msg))/*gccattr noreturn:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{throw((class::std::out_of_range)__xcodeml_identity<class::std::out_of_range>::t(__msg));
}
void __throw_range_error(char const(*__msg))/*gccattr noreturn:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{throw((class::std::range_error)__xcodeml_identity<class::std::range_error>::t(__msg));
}
void __throw_overflow_error(char const(*__msg))/*gccattr noreturn:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{throw((class::std::overflow_error)__xcodeml_identity<class::std::overflow_error>::t(__msg));
}
void __throw_underflow_error(char const(*__msg))/*gccattr noreturn:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{throw((class::std::underflow_error)__xcodeml_identity<class::std::underflow_error>::t(__msg));
}
}
}
extern"C"{void __assert(char const(*),char const(*),int,char const(*));};

namespace std{namespace __1{enum __legacy_memory_order{__mo_relaxed,__mo_consume,__mo_acquire,__mo_release,__mo_acq_rel,__mo_seq_cst};
typedef unsigned int __memory_order_underlying_t;
enum memory_order{memory_order_relaxed=__mo_relaxed,memory_order_consume=__mo_consume,memory_order_acquire=__mo_acquire,memory_order_release=__mo_release,memory_order_acq_rel=__mo_acq_rel,memory_order_seq_cst=__mo_seq_cst};
typedef enum memory_order memory_order;
static_assert(is_same::value,"unexpected underlying type for std::memory_order");
template<typename __xcodeml_template_type_0_0>class __cxx_atomic_base_impl{public:__cxx_atomic_base_impl();
public:__cxx_atomic_base_impl(__xcodeml_template_type_0_0 value):__a_value(value){}
public:_Atomic(__xcodeml_template_type_0_0) __a_value;
}
;
;
void __cxx_atomic_thread_fence(enum memory_order __order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__c11_atomic_thread_fence(static_cast<unsigned int>(__order)));
}
void __cxx_atomic_signal_fence(enum memory_order __order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__c11_atomic_signal_fence(static_cast<unsigned int>(__order)));
}
template<typename __xcodeml_template_type_0_0>void __cxx_atomic_init(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>volatile(*__a),__xcodeml_template_type_0_0 __val)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__c11_atomic_init((&__a.__a_value),__val));
}
template<typename __xcodeml_template_type_0_0>void __cxx_atomic_init(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>(*__a),__xcodeml_template_type_0_0 __val)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__c11_atomic_init((&__a.__a_value),__val));
}
template<typename __xcodeml_template_type_0_0>void __cxx_atomic_store(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>volatile(*__a),__xcodeml_template_type_0_0 __val,enum memory_order __order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__c11_atomic_store((&__a.__a_value),__val,static_cast<unsigned int>(__order)));
}
template<typename __xcodeml_template_type_0_0>void __cxx_atomic_store(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>(*__a),__xcodeml_template_type_0_0 __val,enum memory_order __order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__c11_atomic_store((&__a.__a_value),__val,static_cast<unsigned int>(__order)));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __cxx_atomic_load(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>volatile const(*__a),enum memory_order __order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{using __ptr_type=typename remove_const<decltype ()>::type(*);
return(__c11_atomic_load(const_cast<typename remove_const<decltype ()>::type(*)>((&__a.__a_value)),static_cast<unsigned int>(__order)));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __cxx_atomic_load(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>const(*__a),enum memory_order __order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{using __ptr_type=typename remove_const<decltype ()>::type(*);
return(__c11_atomic_load(const_cast<typename remove_const<decltype ()>::type(*)>((&__a.__a_value)),static_cast<unsigned int>(__order)));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __cxx_atomic_exchange(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>volatile(*__a),__xcodeml_template_type_0_0 __value,enum memory_order __order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c11_atomic_exchange((&__a.__a_value),__value,static_cast<unsigned int>(__order)));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __cxx_atomic_exchange(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>(*__a),__xcodeml_template_type_0_0 __value,enum memory_order __order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c11_atomic_exchange((&__a.__a_value),__value,static_cast<unsigned int>(__order)));
}
template<typename __xcodeml_template_type_0_0>bool __cxx_atomic_compare_exchange_strong(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>volatile(*__a),__xcodeml_template_type_0_0(*__expected),__xcodeml_template_type_0_0 __value,enum memory_order __success,enum memory_order __failure)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c11_atomic_compare_exchange_strong((&__a.__a_value),__expected,__value,static_cast<unsigned int>(__success),static_cast<unsigned int>(__failure)));
}
template<typename __xcodeml_template_type_0_0>bool __cxx_atomic_compare_exchange_strong(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>(*__a),__xcodeml_template_type_0_0(*__expected),__xcodeml_template_type_0_0 __value,enum memory_order __success,enum memory_order __failure)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c11_atomic_compare_exchange_strong((&__a.__a_value),__expected,__value,static_cast<unsigned int>(__success),static_cast<unsigned int>(__failure)));
}
template<typename __xcodeml_template_type_0_0>bool __cxx_atomic_compare_exchange_weak(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>volatile(*__a),__xcodeml_template_type_0_0(*__expected),__xcodeml_template_type_0_0 __value,enum memory_order __success,enum memory_order __failure)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c11_atomic_compare_exchange_weak((&__a.__a_value),__expected,__value,static_cast<unsigned int>(__success),static_cast<unsigned int>(__failure)));
}
template<typename __xcodeml_template_type_0_0>bool __cxx_atomic_compare_exchange_weak(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>(*__a),__xcodeml_template_type_0_0(*__expected),__xcodeml_template_type_0_0 __value,enum memory_order __success,enum memory_order __failure)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c11_atomic_compare_exchange_weak((&__a.__a_value),__expected,__value,static_cast<unsigned int>(__success),static_cast<unsigned int>(__failure)));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __cxx_atomic_fetch_add(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>volatile(*__a),__xcodeml_template_type_0_0 __delta,enum memory_order __order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c11_atomic_fetch_add((&__a.__a_value),__delta,static_cast<unsigned int>(__order)));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __cxx_atomic_fetch_add(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>(*__a),__xcodeml_template_type_0_0 __delta,enum memory_order __order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c11_atomic_fetch_add((&__a.__a_value),__delta,static_cast<unsigned int>(__order)));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0(*__cxx_atomic_fetch_add(__cxx_atomic_base_impl<__xcodeml_template_type_0_0(*)>volatile(*__a),long __delta,enum memory_order __order))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c11_atomic_fetch_add((&__a.__a_value),__delta,static_cast<unsigned int>(__order)));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0(*__cxx_atomic_fetch_add(__cxx_atomic_base_impl<__xcodeml_template_type_0_0(*)>(*__a),long __delta,enum memory_order __order))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c11_atomic_fetch_add((&__a.__a_value),__delta,static_cast<unsigned int>(__order)));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __cxx_atomic_fetch_sub(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>volatile(*__a),__xcodeml_template_type_0_0 __delta,enum memory_order __order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c11_atomic_fetch_sub((&__a.__a_value),__delta,static_cast<unsigned int>(__order)));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __cxx_atomic_fetch_sub(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>(*__a),__xcodeml_template_type_0_0 __delta,enum memory_order __order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c11_atomic_fetch_sub((&__a.__a_value),__delta,static_cast<unsigned int>(__order)));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0(*__cxx_atomic_fetch_sub(__cxx_atomic_base_impl<__xcodeml_template_type_0_0(*)>volatile(*__a),long __delta,enum memory_order __order))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c11_atomic_fetch_sub((&__a.__a_value),__delta,static_cast<unsigned int>(__order)));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0(*__cxx_atomic_fetch_sub(__cxx_atomic_base_impl<__xcodeml_template_type_0_0(*)>(*__a),long __delta,enum memory_order __order))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c11_atomic_fetch_sub((&__a.__a_value),__delta,static_cast<unsigned int>(__order)));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __cxx_atomic_fetch_and(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>volatile(*__a),__xcodeml_template_type_0_0 __pattern,enum memory_order __order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c11_atomic_fetch_and((&__a.__a_value),__pattern,static_cast<unsigned int>(__order)));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __cxx_atomic_fetch_and(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>(*__a),__xcodeml_template_type_0_0 __pattern,enum memory_order __order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c11_atomic_fetch_and((&__a.__a_value),__pattern,static_cast<unsigned int>(__order)));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __cxx_atomic_fetch_or(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>volatile(*__a),__xcodeml_template_type_0_0 __pattern,enum memory_order __order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c11_atomic_fetch_or((&__a.__a_value),__pattern,static_cast<unsigned int>(__order)));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __cxx_atomic_fetch_or(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>(*__a),__xcodeml_template_type_0_0 __pattern,enum memory_order __order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c11_atomic_fetch_or((&__a.__a_value),__pattern,static_cast<unsigned int>(__order)));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __cxx_atomic_fetch_xor(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>volatile(*__a),__xcodeml_template_type_0_0 __pattern,enum memory_order __order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c11_atomic_fetch_xor((&__a.__a_value),__pattern,static_cast<unsigned int>(__order)));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __cxx_atomic_fetch_xor(__cxx_atomic_base_impl<__xcodeml_template_type_0_0>(*__a),__xcodeml_template_type_0_0 __pattern,enum memory_order __order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c11_atomic_fetch_xor((&__a.__a_value),__pattern,static_cast<unsigned int>(__order)));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 kill_dependency(__xcodeml_template_type_0_0 __y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __y;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __cxx_atomic_impl:public __xcodeml_template_type_0_1{public:__cxx_atomic_impl();
public:__cxx_atomic_impl(__xcodeml_template_type_0_0 value):(value)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
}
;
;
template<typename __xcodeml_template_type_0_0,bool=(is_integral<__xcodeml_template_type_0_0>::value&&(!is_same<__xcodeml_template_type_0_0,bool>::value))>class __atomic_base{public:__cxx_atomic_impl<__xcodeml_template_type_0_0,__cxx_atomic_base_impl<__xcodeml_template_type_0_0> >__a_;
public:bool is_lock_free()const volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__c11_atomic_is_lock_free((sizeof(__xcodeml_template_type_0_0))));
}
public:bool is_lock_free()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(static_cast<class __atomic_base volatile const(*)>(this).is_lock_free());
}
public:void store(__xcodeml_template_type_0_0 __d,enum memory_order __m)volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr diagnose_if:(((__m==memory_order_consume)||(__m==memory_order_acquire))||(__m==memory_order_acq_rel))*/{(__cxx_atomic_store((&this->__a_),__d,__m));
}
public:void store(__xcodeml_template_type_0_0 __d,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr diagnose_if:(((__m==memory_order_consume)||(__m==memory_order_acquire))||(__m==memory_order_acq_rel))*/{(__cxx_atomic_store((&this->__a_),__d,__m));
}
public:__xcodeml_template_type_0_0 load(enum memory_order __m)const volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr diagnose_if:((__m==memory_order_release)||(__m==memory_order_acq_rel))*/{return(__cxx_atomic_load((&this->__a_),__m));
}
public:__xcodeml_template_type_0_0 load(enum memory_order __m)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr diagnose_if:((__m==memory_order_release)||(__m==memory_order_acq_rel))*/{return(__cxx_atomic_load((&this->__a_),__m));
}
public:operator __xcodeml_template_type_0_0()const volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->load());
}
public:operator __xcodeml_template_type_0_0()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->load());
}
public:__xcodeml_template_type_0_0 exchange(__xcodeml_template_type_0_0 __d,enum memory_order __m)volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_exchange((&this->__a_),__d,__m));
}
public:__xcodeml_template_type_0_0 exchange(__xcodeml_template_type_0_0 __d,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_exchange((&this->__a_),__d,__m));
}
public:bool compare_exchange_weak(__xcodeml_template_type_0_0&__e,__xcodeml_template_type_0_0 __d,enum memory_order __s,enum memory_order __f)volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr diagnose_if:((__f==memory_order_release)||(__f==memory_order_acq_rel))*/{return(__cxx_atomic_compare_exchange_weak((&this->__a_),(&__e),__d,__s,__f));
}
public:bool compare_exchange_weak(__xcodeml_template_type_0_0&__e,__xcodeml_template_type_0_0 __d,enum memory_order __s,enum memory_order __f)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr diagnose_if:((__f==memory_order_release)||(__f==memory_order_acq_rel))*/{return(__cxx_atomic_compare_exchange_weak((&this->__a_),(&__e),__d,__s,__f));
}
public:bool compare_exchange_strong(__xcodeml_template_type_0_0&__e,__xcodeml_template_type_0_0 __d,enum memory_order __s,enum memory_order __f)volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr diagnose_if:((__f==memory_order_release)||(__f==memory_order_acq_rel))*/{return(__cxx_atomic_compare_exchange_strong((&this->__a_),(&__e),__d,__s,__f));
}
public:bool compare_exchange_strong(__xcodeml_template_type_0_0&__e,__xcodeml_template_type_0_0 __d,enum memory_order __s,enum memory_order __f)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr diagnose_if:((__f==memory_order_release)||(__f==memory_order_acq_rel))*/{return(__cxx_atomic_compare_exchange_strong((&this->__a_),(&__e),__d,__s,__f));
}
public:bool compare_exchange_weak(__xcodeml_template_type_0_0&__e,__xcodeml_template_type_0_0 __d,enum memory_order __m)volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_compare_exchange_weak((&this->__a_),(&__e),__d,__m,__m));
}
public:bool compare_exchange_weak(__xcodeml_template_type_0_0&__e,__xcodeml_template_type_0_0 __d,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_compare_exchange_weak((&this->__a_),(&__e),__d,__m,__m));
}
public:bool compare_exchange_strong(__xcodeml_template_type_0_0&__e,__xcodeml_template_type_0_0 __d,enum memory_order __m)volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_compare_exchange_strong((&this->__a_),(&__e),__d,__m,__m));
}
public:bool compare_exchange_strong(__xcodeml_template_type_0_0&__e,__xcodeml_template_type_0_0 __d,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_compare_exchange_strong((&this->__a_),(&__e),__d,__m,__m));
}
public:__atomic_base();
public:__atomic_base(__xcodeml_template_type_0_0 __d):__a_(__d)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__atomic_base(class __atomic_base const&);
public:class __atomic_base&operator=(class __atomic_base const&);
public:class __atomic_base&operator=(class __atomic_base const&)volatile;
}
;
;
template<typename __xcodeml_template_type_0_0>class __atomic_base<__xcodeml_template_type_0_0,1>:public __atomic_base<__xcodeml_template_type_0_0,0>{public:typedef __atomic_base<__xcodeml_template_type_0_0,0>__base;
public:__atomic_base();
public:__atomic_base(__xcodeml_template_type_0_0 __d):(__d)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__xcodeml_template_type_0_0 fetch_add(__xcodeml_template_type_0_0 __op,enum memory_order __m)volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_fetch_add((&this.__a_),__op,__m));
}
public:__xcodeml_template_type_0_0 fetch_add(__xcodeml_template_type_0_0 __op,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_fetch_add((&this.__a_),__op,__m));
}
public:__xcodeml_template_type_0_0 fetch_sub(__xcodeml_template_type_0_0 __op,enum memory_order __m)volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_fetch_sub((&this.__a_),__op,__m));
}
public:__xcodeml_template_type_0_0 fetch_sub(__xcodeml_template_type_0_0 __op,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_fetch_sub((&this.__a_),__op,__m));
}
public:__xcodeml_template_type_0_0 fetch_and(__xcodeml_template_type_0_0 __op,enum memory_order __m)volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_fetch_and((&this.__a_),__op,__m));
}
public:__xcodeml_template_type_0_0 fetch_and(__xcodeml_template_type_0_0 __op,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_fetch_and((&this.__a_),__op,__m));
}
public:__xcodeml_template_type_0_0 fetch_or(__xcodeml_template_type_0_0 __op,enum memory_order __m)volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_fetch_or((&this.__a_),__op,__m));
}
public:__xcodeml_template_type_0_0 fetch_or(__xcodeml_template_type_0_0 __op,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_fetch_or((&this.__a_),__op,__m));
}
public:__xcodeml_template_type_0_0 fetch_xor(__xcodeml_template_type_0_0 __op,enum memory_order __m)volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_fetch_xor((&this.__a_),__op,__m));
}
public:__xcodeml_template_type_0_0 fetch_xor(__xcodeml_template_type_0_0 __op,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_fetch_xor((&this.__a_),__op,__m));
}
public:__xcodeml_template_type_0_0 operator++(int)volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->fetch_add(__xcodeml_identity<__xcodeml_template_type_0_0>::t(1)));
}
public:__xcodeml_template_type_0_0 operator++(int)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->fetch_add(__xcodeml_identity<__xcodeml_template_type_0_0>::t(1)));
}
public:__xcodeml_template_type_0_0 operator--(int)volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->fetch_sub(__xcodeml_identity<__xcodeml_template_type_0_0>::t(1)));
}
public:__xcodeml_template_type_0_0 operator--(int)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->fetch_sub(__xcodeml_identity<__xcodeml_template_type_0_0>::t(1)));
}
public:__xcodeml_template_type_0_0 operator++()volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator+((this->fetch_add(__xcodeml_identity<__xcodeml_template_type_0_0>::t(1))),__xcodeml_identity<__xcodeml_template_type_0_0>::t(1));
}
public:__xcodeml_template_type_0_0 operator++()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator+((this->fetch_add(__xcodeml_identity<__xcodeml_template_type_0_0>::t(1))),__xcodeml_identity<__xcodeml_template_type_0_0>::t(1));
}
public:__xcodeml_template_type_0_0 operator--()volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator-((this->fetch_sub(__xcodeml_identity<__xcodeml_template_type_0_0>::t(1))),__xcodeml_identity<__xcodeml_template_type_0_0>::t(1));
}
public:__xcodeml_template_type_0_0 operator--()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator-((this->fetch_sub(__xcodeml_identity<__xcodeml_template_type_0_0>::t(1))),__xcodeml_identity<__xcodeml_template_type_0_0>::t(1));
}
public:__xcodeml_template_type_0_0 operator+=(__xcodeml_template_type_0_0 __op)volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator+((this->fetch_add(__op)),__op);
}
public:__xcodeml_template_type_0_0 operator+=(__xcodeml_template_type_0_0 __op)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator+((this->fetch_add(__op)),__op);
}
public:__xcodeml_template_type_0_0 operator-=(__xcodeml_template_type_0_0 __op)volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator-((this->fetch_sub(__op)),__op);
}
public:__xcodeml_template_type_0_0 operator-=(__xcodeml_template_type_0_0 __op)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator-((this->fetch_sub(__op)),__op);
}
public:__xcodeml_template_type_0_0 operator&=(__xcodeml_template_type_0_0 __op)volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((this->fetch_and(__op))&__op);
}
public:__xcodeml_template_type_0_0 operator&=(__xcodeml_template_type_0_0 __op)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((this->fetch_and(__op))&__op);
}
public:__xcodeml_template_type_0_0 operator|=(__xcodeml_template_type_0_0 __op)volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((this->fetch_or(__op))|__op);
}
public:__xcodeml_template_type_0_0 operator|=(__xcodeml_template_type_0_0 __op)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((this->fetch_or(__op))|__op);
}
public:__xcodeml_template_type_0_0 operator^=(__xcodeml_template_type_0_0 __op)volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((this->fetch_xor(__op))^__op);
}
public:__xcodeml_template_type_0_0 operator^=(__xcodeml_template_type_0_0 __op)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((this->fetch_xor(__op))^__op);
}
}
;
template<typename __xcodeml_template_type_0_0>class atomic:public __atomic_base<__xcodeml_template_type_0_0,expression>{public:typedef __atomic_base<__xcodeml_template_type_0_0,expression>__base;
public:atomic();
public:atomic(__xcodeml_template_type_0_0 __d):(__d)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__xcodeml_template_type_0_0 operator=(__xcodeml_template_type_0_0 __d)volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__atomic_base<__xcodeml_template_type_0_0,expression>::.store(__d));
return __d;
}
public:__xcodeml_template_type_0_0 operator=(__xcodeml_template_type_0_0 __d)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__atomic_base<__xcodeml_template_type_0_0,expression>::.store(__d));
return __d;
}
}
;
;
template<typename __xcodeml_template_type_0_0>class atomic<__xcodeml_template_type_0_0(*)>:public __atomic_base<__xcodeml_template_type_0_0(*),expression>{public:typedef __atomic_base<__xcodeml_template_type_0_0(*),expression>__base;
public:atomic();
public:atomic(__xcodeml_template_type_0_0(*__d)):(__d)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__xcodeml_template_type_0_0(*operator=(__xcodeml_template_type_0_0(*__d))volatile)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__atomic_base<__xcodeml_template_type_0_0(*),expression>::.store(__d));
return __d;
}
public:__xcodeml_template_type_0_0(*operator=(__xcodeml_template_type_0_0(*__d)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__atomic_base<__xcodeml_template_type_0_0(*),expression>::.store(__d));
return __d;
}
public:__xcodeml_template_type_0_0(*fetch_add(long __op,enum memory_order __m)volatile)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_fetch_add((&this.__a_),__op,__m));
}
public:__xcodeml_template_type_0_0(*fetch_add(long __op,enum memory_order __m))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_fetch_add((&this.__a_),__op,__m));
}
public:__xcodeml_template_type_0_0(*fetch_sub(long __op,enum memory_order __m)volatile)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_fetch_sub((&this.__a_),__op,__m));
}
public:__xcodeml_template_type_0_0(*fetch_sub(long __op,enum memory_order __m))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_fetch_sub((&this.__a_),__op,__m));
}
public:__xcodeml_template_type_0_0(*operator++(int)volatile)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->fetch_add(1));
}
public:__xcodeml_template_type_0_0(*operator++(int))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->fetch_add(1));
}
public:__xcodeml_template_type_0_0(*operator--(int)volatile)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->fetch_sub(1));
}
public:__xcodeml_template_type_0_0(*operator--(int))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->fetch_sub(1));
}
public:__xcodeml_template_type_0_0(*operator++()volatile)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator+((this->fetch_add(1)),1);
}
public:__xcodeml_template_type_0_0(*operator++())/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator+((this->fetch_add(1)),1);
}
public:__xcodeml_template_type_0_0(*operator--()volatile)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator-((this->fetch_sub(1)),1);
}
public:__xcodeml_template_type_0_0(*operator--())/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator-((this->fetch_sub(1)),1);
}
public:__xcodeml_template_type_0_0(*operator+=(long __op)volatile)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator+((this->fetch_add(__op)),__op);
}
public:__xcodeml_template_type_0_0(*operator+=(long __op))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator+((this->fetch_add(__op)),__op);
}
public:__xcodeml_template_type_0_0(*operator-=(long __op)volatile)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator-((this->fetch_sub(__op)),__op);
}
public:__xcodeml_template_type_0_0(*operator-=(long __op))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator-((this->fetch_sub(__op)),__op);
}
}
;
template<typename __xcodeml_template_type_0_0>bool atomic_is_lock_free(atomic<__xcodeml_template_type_0_0>volatile const(*__o))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.is_lock_free());
}
template<typename __xcodeml_template_type_0_0>bool atomic_is_lock_free(atomic<__xcodeml_template_type_0_0>const(*__o))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.is_lock_free());
}
template<typename __xcodeml_template_type_0_0>void atomic_init(atomic<__xcodeml_template_type_0_0>volatile(*__o),__xcodeml_template_type_0_0 __d)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__cxx_atomic_init((&__o.__a_),__d));
}
template<typename __xcodeml_template_type_0_0>void atomic_init(atomic<__xcodeml_template_type_0_0>(*__o),__xcodeml_template_type_0_0 __d)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__cxx_atomic_init((&__o.__a_),__d));
}
template<typename __xcodeml_template_type_0_0>void atomic_store(atomic<__xcodeml_template_type_0_0>volatile(*__o),__xcodeml_template_type_0_0 __d)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__o.store(__d));
}
template<typename __xcodeml_template_type_0_0>void atomic_store(atomic<__xcodeml_template_type_0_0>(*__o),__xcodeml_template_type_0_0 __d)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__o.store(__d));
}
template<typename __xcodeml_template_type_0_0>void atomic_store_explicit(atomic<__xcodeml_template_type_0_0>volatile(*__o),__xcodeml_template_type_0_0 __d,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr diagnose_if:(((__m==memory_order_consume)||(__m==memory_order_acquire))||(__m==memory_order_acq_rel))*/{(__o.store(__d,__m));
}
template<typename __xcodeml_template_type_0_0>void atomic_store_explicit(atomic<__xcodeml_template_type_0_0>(*__o),__xcodeml_template_type_0_0 __d,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr diagnose_if:(((__m==memory_order_consume)||(__m==memory_order_acquire))||(__m==memory_order_acq_rel))*/{(__o.store(__d,__m));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 atomic_load(atomic<__xcodeml_template_type_0_0>volatile const(*__o))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.load());
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 atomic_load(atomic<__xcodeml_template_type_0_0>const(*__o))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.load());
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 atomic_load_explicit(atomic<__xcodeml_template_type_0_0>volatile const(*__o),enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr diagnose_if:((__m==memory_order_release)||(__m==memory_order_acq_rel))*/{return(__o.load(__m));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 atomic_load_explicit(atomic<__xcodeml_template_type_0_0>const(*__o),enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr diagnose_if:((__m==memory_order_release)||(__m==memory_order_acq_rel))*/{return(__o.load(__m));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 atomic_exchange(atomic<__xcodeml_template_type_0_0>volatile(*__o),__xcodeml_template_type_0_0 __d)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.exchange(__d));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 atomic_exchange(atomic<__xcodeml_template_type_0_0>(*__o),__xcodeml_template_type_0_0 __d)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.exchange(__d));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 atomic_exchange_explicit(atomic<__xcodeml_template_type_0_0>volatile(*__o),__xcodeml_template_type_0_0 __d,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.exchange(__d,__m));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 atomic_exchange_explicit(atomic<__xcodeml_template_type_0_0>(*__o),__xcodeml_template_type_0_0 __d,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.exchange(__d,__m));
}
template<typename __xcodeml_template_type_0_0>bool atomic_compare_exchange_weak(atomic<__xcodeml_template_type_0_0>volatile(*__o),__xcodeml_template_type_0_0(*__e),__xcodeml_template_type_0_0 __d)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.compare_exchange_weak((*__e),__d));
}
template<typename __xcodeml_template_type_0_0>bool atomic_compare_exchange_weak(atomic<__xcodeml_template_type_0_0>(*__o),__xcodeml_template_type_0_0(*__e),__xcodeml_template_type_0_0 __d)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.compare_exchange_weak((*__e),__d));
}
template<typename __xcodeml_template_type_0_0>bool atomic_compare_exchange_strong(atomic<__xcodeml_template_type_0_0>volatile(*__o),__xcodeml_template_type_0_0(*__e),__xcodeml_template_type_0_0 __d)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.compare_exchange_strong((*__e),__d));
}
template<typename __xcodeml_template_type_0_0>bool atomic_compare_exchange_strong(atomic<__xcodeml_template_type_0_0>(*__o),__xcodeml_template_type_0_0(*__e),__xcodeml_template_type_0_0 __d)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.compare_exchange_strong((*__e),__d));
}
template<typename __xcodeml_template_type_0_0>bool atomic_compare_exchange_weak_explicit(atomic<__xcodeml_template_type_0_0>volatile(*__o),__xcodeml_template_type_0_0(*__e),__xcodeml_template_type_0_0 __d,enum memory_order __s,enum memory_order __f)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr diagnose_if:((__f==memory_order_release)||(__f==memory_order_acq_rel))*/{return(__o.compare_exchange_weak((*__e),__d,__s,__f));
}
template<typename __xcodeml_template_type_0_0>bool atomic_compare_exchange_weak_explicit(atomic<__xcodeml_template_type_0_0>(*__o),__xcodeml_template_type_0_0(*__e),__xcodeml_template_type_0_0 __d,enum memory_order __s,enum memory_order __f)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr diagnose_if:((__f==memory_order_release)||(__f==memory_order_acq_rel))*/{return(__o.compare_exchange_weak((*__e),__d,__s,__f));
}
template<typename __xcodeml_template_type_0_0>bool atomic_compare_exchange_strong_explicit(atomic<__xcodeml_template_type_0_0>volatile(*__o),__xcodeml_template_type_0_0(*__e),__xcodeml_template_type_0_0 __d,enum memory_order __s,enum memory_order __f)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr diagnose_if:((__f==memory_order_release)||(__f==memory_order_acq_rel))*/{return(__o.compare_exchange_strong((*__e),__d,__s,__f));
}
template<typename __xcodeml_template_type_0_0>bool atomic_compare_exchange_strong_explicit(atomic<__xcodeml_template_type_0_0>(*__o),__xcodeml_template_type_0_0(*__e),__xcodeml_template_type_0_0 __d,enum memory_order __s,enum memory_order __f)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*//*gccattr diagnose_if:((__f==memory_order_release)||(__f==memory_order_acq_rel))*/{return(__o.compare_exchange_strong((*__e),__d,__s,__f));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type atomic_fetch_add(atomic<__xcodeml_template_type_0_0>volatile(*__o),__xcodeml_template_type_0_0 __op)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_add(__op));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type atomic_fetch_add(atomic<__xcodeml_template_type_0_0>(*__o),__xcodeml_template_type_0_0 __op)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_add(__op));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0(*atomic_fetch_add(atomic<__xcodeml_template_type_0_0(*)>volatile(*__o),long __op))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_add(__op));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0(*atomic_fetch_add(atomic<__xcodeml_template_type_0_0(*)>(*__o),long __op))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_add(__op));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type atomic_fetch_add_explicit(atomic<__xcodeml_template_type_0_0>volatile(*__o),__xcodeml_template_type_0_0 __op,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_add(__op,__m));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type atomic_fetch_add_explicit(atomic<__xcodeml_template_type_0_0>(*__o),__xcodeml_template_type_0_0 __op,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_add(__op,__m));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0(*atomic_fetch_add_explicit(atomic<__xcodeml_template_type_0_0(*)>volatile(*__o),long __op,enum memory_order __m))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_add(__op,__m));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0(*atomic_fetch_add_explicit(atomic<__xcodeml_template_type_0_0(*)>(*__o),long __op,enum memory_order __m))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_add(__op,__m));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type atomic_fetch_sub(atomic<__xcodeml_template_type_0_0>volatile(*__o),__xcodeml_template_type_0_0 __op)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_sub(__op));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type atomic_fetch_sub(atomic<__xcodeml_template_type_0_0>(*__o),__xcodeml_template_type_0_0 __op)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_sub(__op));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0(*atomic_fetch_sub(atomic<__xcodeml_template_type_0_0(*)>volatile(*__o),long __op))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_sub(__op));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0(*atomic_fetch_sub(atomic<__xcodeml_template_type_0_0(*)>(*__o),long __op))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_sub(__op));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type atomic_fetch_sub_explicit(atomic<__xcodeml_template_type_0_0>volatile(*__o),__xcodeml_template_type_0_0 __op,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_sub(__op,__m));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type atomic_fetch_sub_explicit(atomic<__xcodeml_template_type_0_0>(*__o),__xcodeml_template_type_0_0 __op,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_sub(__op,__m));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0(*atomic_fetch_sub_explicit(atomic<__xcodeml_template_type_0_0(*)>volatile(*__o),long __op,enum memory_order __m))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_sub(__op,__m));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0(*atomic_fetch_sub_explicit(atomic<__xcodeml_template_type_0_0(*)>(*__o),long __op,enum memory_order __m))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_sub(__op,__m));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type atomic_fetch_and(atomic<__xcodeml_template_type_0_0>volatile(*__o),__xcodeml_template_type_0_0 __op)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_and(__op));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type atomic_fetch_and(atomic<__xcodeml_template_type_0_0>(*__o),__xcodeml_template_type_0_0 __op)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_and(__op));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type atomic_fetch_and_explicit(atomic<__xcodeml_template_type_0_0>volatile(*__o),__xcodeml_template_type_0_0 __op,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_and(__op,__m));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type atomic_fetch_and_explicit(atomic<__xcodeml_template_type_0_0>(*__o),__xcodeml_template_type_0_0 __op,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_and(__op,__m));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type atomic_fetch_or(atomic<__xcodeml_template_type_0_0>volatile(*__o),__xcodeml_template_type_0_0 __op)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_or(__op));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type atomic_fetch_or(atomic<__xcodeml_template_type_0_0>(*__o),__xcodeml_template_type_0_0 __op)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_or(__op));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type atomic_fetch_or_explicit(atomic<__xcodeml_template_type_0_0>volatile(*__o),__xcodeml_template_type_0_0 __op,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_or(__op,__m));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type atomic_fetch_or_explicit(atomic<__xcodeml_template_type_0_0>(*__o),__xcodeml_template_type_0_0 __op,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_or(__op,__m));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type atomic_fetch_xor(atomic<__xcodeml_template_type_0_0>volatile(*__o),__xcodeml_template_type_0_0 __op)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_xor(__op));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type atomic_fetch_xor(atomic<__xcodeml_template_type_0_0>(*__o),__xcodeml_template_type_0_0 __op)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_xor(__op));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type atomic_fetch_xor_explicit(atomic<__xcodeml_template_type_0_0>volatile(*__o),__xcodeml_template_type_0_0 __op,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_xor(__op,__m));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type atomic_fetch_xor_explicit(atomic<__xcodeml_template_type_0_0>(*__o),__xcodeml_template_type_0_0 __op,enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o.fetch_xor(__op,__m));
}
class atomic_flag{public:class::std::__1::__cxx_atomic_impl<bool,class::std::__1::__cxx_atomic_base_impl<bool> >__a_;
public:bool test_and_set(enum memory_order __m)volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_exchange((&this->__a_),((bool)true),__m));
}
public:bool test_and_set(enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__cxx_atomic_exchange((&this->__a_),((bool)true),__m));
}
public:void clear(enum memory_order __m)volatile/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__cxx_atomic_store((&this->__a_),((bool)false),__m));
}
public:void clear(enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__cxx_atomic_store((&this->__a_),((bool)false),__m));
}
public:atomic_flag();
public:atomic_flag(bool __b):__a_(__b)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:atomic_flag(class atomic_flag const&);
public:class::std::__1::atomic_flag&operator=(class atomic_flag const&);
public:class::std::__1::atomic_flag&operator=(class atomic_flag const&)volatile;
}
;
typedef class::std::__1::atomic_flag atomic_flag;
bool atomic_flag_test_and_set(class atomic_flag volatile(*__o))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o->test_and_set(memory_order_seq_cst));
}
bool atomic_flag_test_and_set(class::std::__1::atomic_flag(*__o))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o->test_and_set(memory_order_seq_cst));
}
bool atomic_flag_test_and_set_explicit(class atomic_flag volatile(*__o),enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o->test_and_set(__m));
}
bool atomic_flag_test_and_set_explicit(class::std::__1::atomic_flag(*__o),enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__o->test_and_set(__m));
}
void atomic_flag_clear(class atomic_flag volatile(*__o))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__o->clear(memory_order_seq_cst));
}
void atomic_flag_clear(class::std::__1::atomic_flag(*__o))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__o->clear(memory_order_seq_cst));
}
void atomic_flag_clear_explicit(class atomic_flag volatile(*__o),enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__o->clear(__m));
}
void atomic_flag_clear_explicit(class::std::__1::atomic_flag(*__o),enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__o->clear(__m));
}
void atomic_thread_fence(enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__cxx_atomic_thread_fence(__m));
}
void atomic_signal_fence(enum memory_order __m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__cxx_atomic_signal_fence(__m));
}
typedef class::std::__1::atomic<bool>atomic_bool;
typedef class::std::__1::atomic<char>atomic_char;
typedef class::std::__1::atomic<signed char>atomic_schar;
typedef class::std::__1::atomic<unsigned char>atomic_uchar;
typedef class::std::__1::atomic<short>atomic_short;
typedef class::std::__1::atomic<unsigned short>atomic_ushort;
typedef class::std::__1::atomic<int>atomic_int;
typedef class::std::__1::atomic<unsigned int>atomic_uint;
typedef class::std::__1::atomic<long>atomic_long;
typedef class::std::__1::atomic<unsigned long>atomic_ulong;
typedef class::std::__1::atomic<long long>atomic_llong;
typedef class::std::__1::atomic<unsigned long long>atomic_ullong;
typedef class::std::__1::atomic<char16_t>atomic_char16_t;
typedef class::std::__1::atomic<char32_t>atomic_char32_t;
typedef class::std::__1::atomic<wchar_t>atomic_wchar_t;
typedef class::std::__1::atomic<signed char>atomic_int_least8_t;
typedef class::std::__1::atomic<unsigned char>atomic_uint_least8_t;
typedef class::std::__1::atomic<short>atomic_int_least16_t;
typedef class::std::__1::atomic<unsigned short>atomic_uint_least16_t;
typedef class::std::__1::atomic<int>atomic_int_least32_t;
typedef class::std::__1::atomic<unsigned int>atomic_uint_least32_t;
typedef class::std::__1::atomic<long>atomic_int_least64_t;
typedef class::std::__1::atomic<unsigned long>atomic_uint_least64_t;
typedef class::std::__1::atomic<int>atomic_int_fast8_t;
typedef class::std::__1::atomic<unsigned int>atomic_uint_fast8_t;
typedef class::std::__1::atomic<int>atomic_int_fast16_t;
typedef class::std::__1::atomic<unsigned int>atomic_uint_fast16_t;
typedef class::std::__1::atomic<int>atomic_int_fast32_t;
typedef class::std::__1::atomic<unsigned int>atomic_uint_fast32_t;
typedef class::std::__1::atomic<long>atomic_int_fast64_t;
typedef class::std::__1::atomic<unsigned long>atomic_uint_fast64_t;
typedef class::std::__1::atomic<signed char>atomic_int8_t;
typedef class::std::__1::atomic<unsigned char>atomic_uint8_t;
typedef class::std::__1::atomic<short>atomic_int16_t;
typedef class::std::__1::atomic<unsigned short>atomic_uint16_t;
typedef class::std::__1::atomic<int>atomic_int32_t;
typedef class::std::__1::atomic<unsigned int>atomic_uint32_t;
typedef class::std::__1::atomic<long>atomic_int64_t;
typedef class::std::__1::atomic<unsigned long>atomic_uint64_t;
typedef class::std::__1::atomic<long>atomic_intptr_t;
typedef class::std::__1::atomic<unsigned long>atomic_uintptr_t;
typedef class::std::__1::atomic<unsigned long>atomic_size_t;
typedef class::std::__1::atomic<long>atomic_ptrdiff_t;
typedef class::std::__1::atomic<long>atomic_intmax_t;
typedef class::std::__1::atomic<unsigned long>atomic_uintmax_t;
}
}
namespace std{namespace __1{template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __libcpp_relaxed_load(__xcodeml_template_type_0_0 const(*__value))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__atomic_load_n(__value,0));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __libcpp_acquire_load(__xcodeml_template_type_0_0 const(*__value))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__atomic_load_n(__value,2));
}
template<typename __xcodeml_template_type_0_0>class allocator/*gccattr type_visibility:*/;
;
template<>class allocator<void>{public:
public:typedef void(*pointer);
public:typedef void const(*const_pointer);
public:typedef void value_type;
public:template<typename __xcodeml_template_type_0_0>class rebind{public:typedef allocator<__xcodeml_template_type_0_0>other;
}
;
;
}
;
template<>class allocator<void const>{public:
public:typedef void const(*pointer);
public:typedef void const(*const_pointer);
public:typedef void const value_type;
public:template<typename __xcodeml_template_type_0_0>class rebind{public:typedef allocator<__xcodeml_template_type_0_0>other;
}
;
;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __has_element_type:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class __has_element_type<__xcodeml_template_type_0_0,typename __void_t<typename __xcodeml_template_type_0_0::element_type>::type>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0,bool=__has_element_type<__xcodeml_template_type_0_0,void>::value>class __pointer_traits_element_type;
;
template<typename __xcodeml_template_type_0_0>class __pointer_traits_element_type<__xcodeml_template_type_0_0,1>{public:typedef typename __xcodeml_template_type_0_0::element_type type;
}
;
template<template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1> class __xcodeml_template_template_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __pointer_traits_element_type<__xcodeml_template_template_0_0<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/,1>{public:typedef typename __xcodeml_template_template_0_0<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/::element_type type;
}
;
template<template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1> class __xcodeml_template_template_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __pointer_traits_element_type<__xcodeml_template_template_0_0<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/,0>{public:typedef __xcodeml_template_type_0_1 type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __has_difference_type:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class __has_difference_type<__xcodeml_template_type_0_0,typename __void_t<typename __xcodeml_template_type_0_0::difference_type>::type>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0,bool=__has_difference_type<__xcodeml_template_type_0_0,void>::value>class __pointer_traits_difference_type{public:typedef long type;
}
;
;
template<typename __xcodeml_template_type_0_0>class __pointer_traits_difference_type<__xcodeml_template_type_0_0,1>{public:typedef typename __xcodeml_template_type_0_0::difference_type type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __has_rebind{private:
private:class __two{public:char __lx;
public:char __lxx;
}
;
private:template<typename __xcodeml_template_type_1_0>static class::std::__1::__has_rebind::__two __test(...)
private:template<typename __xcodeml_template_type_1_0>static char __test(/*DTS*/__xcodeml_template_type_1_0::template rebind<__xcodeml_template_type_0_1>)
public:
public:static bool const value=((sizeof((__test<__xcodeml_template_type_0_0>(0))))==1);
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,bool=__has_rebind<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::value>class __pointer_traits_rebind{public:typedef/*DTS*/__xcodeml_template_type_0_0::template rebind<__xcodeml_template_type_0_1>;
}
;
;
template<template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1> class __xcodeml_template_template_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>class __pointer_traits_rebind<__xcodeml_template_template_0_0<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/,__xcodeml_template_type_0_3,1>{public:typedef/*DTS*/__xcodeml_template_template_0_0<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/::template rebind<__xcodeml_template_type_0_3>;
}
;
template<template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1> class __xcodeml_template_template_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>class __pointer_traits_rebind<__xcodeml_template_template_0_0<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/,__xcodeml_template_type_0_3,0>{public:typedef __xcodeml_template_template_0_0<__xcodeml_template_type_0_3,__xcodeml_template_type_0_2...>/*packsize1*/type;
}
;
template<typename __xcodeml_template_type_0_0>class pointer_traits{public:typedef __xcodeml_template_type_0_0 pointer;
public:typedef typename __pointer_traits_element_type<__xcodeml_template_type_0_0,expression>::type element_type;
public:typedef typename __pointer_traits_difference_type<__xcodeml_template_type_0_0,expression>::type difference_type;
public:template<typename __xcodeml_template_type_1_0>using rebind=typename __pointer_traits_rebind<__xcodeml_template_type_0_0,__xcodeml_template_type_1_0,expression>::type;
private:
private:class __nat{}
;
public:
public:static __xcodeml_template_type_0_0 pointer_to(typename conditional<expression,class::std::__1::pointer_traits::__nat,typename __pointer_traits_element_type<__xcodeml_template_type_0_0,expression>::type>::type&__r)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__xcodeml_template_type_0_0::pointer_to(__r));
}
}
;
;
template<typename __xcodeml_template_type_0_0>class pointer_traits<__xcodeml_template_type_0_0(*)>{public:typedef __xcodeml_template_type_0_0(*pointer);
public:typedef __xcodeml_template_type_0_0 element_type;
public:typedef long difference_type;
public:template<typename __xcodeml_template_type_1_0>using rebind=__xcodeml_template_type_1_0(*);
private:
private:class __nat{}
;
public:
public:static __xcodeml_template_type_0_0(*pointer_to(typename conditional<expression,class __nat,__xcodeml_template_type_0_0>::type&__r))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::addressof(__r));
}
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __rebind_pointer{public:typedef/*DTS*/pointer_traits<__xcodeml_template_type_0_0>::template rebind<__xcodeml_template_type_0_1>;
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __has_pointer_type:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class __has_pointer_type<__xcodeml_template_type_0_0,typename __void_t<typename __xcodeml_template_type_0_0::pointer>::type>:public integral_constant<bool,1>{}
;
namespace __pointer_type_imp{template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,bool=__has_pointer_type<__xcodeml_template_type_0_1,void>::value>class __pointer_type{public:typedef typename __xcodeml_template_type_0_1::pointer type;
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,0>{public:typedef __xcodeml_template_type_0_0(*type);
}
;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __pointer_type{public:typedef typename __pointer_type<__xcodeml_template_type_0_0,typename remove_reference<__xcodeml_template_type_0_1>::type,expression>::type type;
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __has_const_pointer:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class __has_const_pointer<__xcodeml_template_type_0_0,typename __void_t<typename __xcodeml_template_type_0_0::const_pointer>::type>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,bool=__has_const_pointer<__xcodeml_template_type_0_2,void>::value>class __const_pointer{public:typedef typename __xcodeml_template_type_0_2::const_pointer type;
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __const_pointer<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2,0>{public:typedef/*DTS*/pointer_traits<__xcodeml_template_type_0_1>::template rebind<__xcodeml_template_type_0_0 const>;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __has_void_pointer:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class __has_void_pointer<__xcodeml_template_type_0_0,typename __void_t<typename __xcodeml_template_type_0_0::void_pointer>::type>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,bool=__has_void_pointer<__xcodeml_template_type_0_1,void>::value>class __void_pointer{public:typedef typename __xcodeml_template_type_0_1::void_pointer type;
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __void_pointer<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,0>{public:typedef/*DTS*/pointer_traits<__xcodeml_template_type_0_0>::template rebind<void>;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __has_const_void_pointer:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class __has_const_void_pointer<__xcodeml_template_type_0_0,typename __void_t<typename __xcodeml_template_type_0_0::const_void_pointer>::type>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,bool=__has_const_void_pointer<__xcodeml_template_type_0_1,void>::value>class __const_void_pointer{public:typedef typename __xcodeml_template_type_0_1::const_void_pointer type;
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __const_void_pointer<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,0>{public:typedef/*DTS*/pointer_traits<__xcodeml_template_type_0_0>::template rebind<void const>;
}
;
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0(*__to_raw_pointer(__xcodeml_template_type_0_0(*__p)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __p;
}
template<typename __xcodeml_template_type_0_0>typename pointer_traits<__xcodeml_template_type_0_0>::element_type(*__to_raw_pointer(__xcodeml_template_type_0_0 __p))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::__to_raw_pointer((__p.operator->())));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __has_size_type:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class __has_size_type<__xcodeml_template_type_0_0,typename __void_t<typename __xcodeml_template_type_0_0::size_type>::type>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,bool=__has_size_type<__xcodeml_template_type_0_0,void>::value>class __size_type{public:typedef typename make_unsigned<__xcodeml_template_type_0_1>::type type;
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __size_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,1>{public:typedef typename __xcodeml_template_type_0_0::size_type type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __has_propagate_on_container_copy_assignment:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class __has_propagate_on_container_copy_assignment<__xcodeml_template_type_0_0,typename __void_t<typename __xcodeml_template_type_0_0::propagate_on_container_copy_assignment>::type>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0,bool=__has_propagate_on_container_copy_assignment<__xcodeml_template_type_0_0,void>::value>class __propagate_on_container_copy_assignment{public:typedef class::std::__1::integral_constant<bool,0>type;
}
;
;
template<typename __xcodeml_template_type_0_0>class __propagate_on_container_copy_assignment<__xcodeml_template_type_0_0,1>{public:typedef typename __xcodeml_template_type_0_0::propagate_on_container_copy_assignment type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __has_propagate_on_container_move_assignment:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class __has_propagate_on_container_move_assignment<__xcodeml_template_type_0_0,typename __void_t<typename __xcodeml_template_type_0_0::propagate_on_container_move_assignment>::type>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0,bool=__has_propagate_on_container_move_assignment<__xcodeml_template_type_0_0,void>::value>class __propagate_on_container_move_assignment{public:typedef class::std::__1::integral_constant<bool,0>type;
}
;
;
template<typename __xcodeml_template_type_0_0>class __propagate_on_container_move_assignment<__xcodeml_template_type_0_0,1>{public:typedef typename __xcodeml_template_type_0_0::propagate_on_container_move_assignment type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __has_propagate_on_container_swap:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class __has_propagate_on_container_swap<__xcodeml_template_type_0_0,typename __void_t<typename __xcodeml_template_type_0_0::propagate_on_container_swap>::type>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0,bool=__has_propagate_on_container_swap<__xcodeml_template_type_0_0,void>::value>class __propagate_on_container_swap{public:typedef class::std::__1::integral_constant<bool,0>type;
}
;
;
template<typename __xcodeml_template_type_0_0>class __propagate_on_container_swap<__xcodeml_template_type_0_0,1>{public:typedef typename __xcodeml_template_type_0_0::propagate_on_container_swap type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __has_is_always_equal:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class __has_is_always_equal<__xcodeml_template_type_0_0,typename __void_t<typename __xcodeml_template_type_0_0::is_always_equal>::type>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0,bool=__has_is_always_equal<__xcodeml_template_type_0_0,void>::value>class __is_always_equal{public:typedef typename is_empty<__xcodeml_template_type_0_0>::type type;
}
;
;
template<typename __xcodeml_template_type_0_0>class __is_always_equal<__xcodeml_template_type_0_0,1>{public:typedef typename __xcodeml_template_type_0_0::is_always_equal type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,bool=__has_rebind<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::value>class __has_rebind_other{private:
private:class __two{public:char __lx;
public:char __lxx;
}
;
private:template<typename __xcodeml_template_type_1_0>static class::std::__1::__has_rebind_other::__two __test(...)
private:template<typename __xcodeml_template_type_1_0>static char __test(typename /*DTS*/__xcodeml_template_type_1_0::template rebind<__xcodeml_template_type_0_1>::other(*))
public:
public:static bool const value=((sizeof((__test<__xcodeml_template_type_0_0>(0))))==1);
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __has_rebind_other<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,0>{public:static bool const value=false;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,bool=__has_rebind_other<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,expression>::value>class __allocator_traits_rebind{public:typedef typename /*DTS*/__xcodeml_template_type_0_0::template rebind<__xcodeml_template_type_0_1>::other type;
}
;
;
template<template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1> class __xcodeml_template_template_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>class __allocator_traits_rebind<__xcodeml_template_template_0_0<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/,__xcodeml_template_type_0_3,1>{public:typedef typename /*DTS*/__xcodeml_template_template_0_0<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/::template rebind<__xcodeml_template_type_0_3>::other type;
}
;
template<template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1> class __xcodeml_template_template_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>class __allocator_traits_rebind<__xcodeml_template_template_0_0<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/,__xcodeml_template_type_0_3,0>{public:typedef __xcodeml_template_template_0_0<__xcodeml_template_type_0_3,__xcodeml_template_type_0_2...>/*packsize1*/type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>decltype ()__has_allocate_hint_test(__xcodeml_template_type_0_0&& __a,__xcodeml_template_type_0_1&& __sz,__xcodeml_template_type_0_2&& __p)
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class::std::__1::integral_constant<bool,0>__has_allocate_hint_test(__xcodeml_template_type_0_0 const&__a,__xcodeml_template_type_0_1&& __sz,__xcodeml_template_type_0_2&& __p)
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __has_allocate_hint:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>decltype ()__has_construct_test(__xcodeml_template_type_0_0&& __a,__xcodeml_template_type_0_1(*__p),__xcodeml_template_type_0_2&& ...__args)
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class::std::__1::integral_constant<bool,0>__has_construct_test(__xcodeml_template_type_0_0 const&__a,__xcodeml_template_type_0_1&& __p,__xcodeml_template_type_0_2&& ...__args)
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __has_construct:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>decltype ()__has_destroy_test(__xcodeml_template_type_0_0&& __a,__xcodeml_template_type_0_1&& __p)
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class::std::__1::integral_constant<bool,0>__has_destroy_test(__xcodeml_template_type_0_0 const&__a,__xcodeml_template_type_0_1&& __p)
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __has_destroy:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>decltype ()__has_max_size_test(__xcodeml_template_type_0_0&& __a)
template<typename __xcodeml_template_type_0_0>class::std::__1::integral_constant<bool,0>__has_max_size_test(__xcodeml_template_type_0_0 volatile const&__a)
template<typename __xcodeml_template_type_0_0>class __has_max_size:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0>decltype ()__has_select_on_container_copy_construction_test(__xcodeml_template_type_0_0&& __a)
template<typename __xcodeml_template_type_0_0>class::std::__1::integral_constant<bool,0>__has_select_on_container_copy_construction_test(__xcodeml_template_type_0_0 volatile const&__a)
template<typename __xcodeml_template_type_0_0>class __has_select_on_container_copy_construction:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,bool=__has_difference_type<__xcodeml_template_type_0_0,void>::value>class __alloc_traits_difference_type{public:typedef typename pointer_traits<__xcodeml_template_type_0_1>::difference_type type;
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __alloc_traits_difference_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,1>{public:typedef typename __xcodeml_template_type_0_0::difference_type type;
}
;
template<typename __xcodeml_template_type_0_0>class __is_default_allocator:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class __is_default_allocator<allocator<__xcodeml_template_type_0_0> >:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0>class allocator_traits{public:typedef __xcodeml_template_type_0_0 allocator_type;
public:typedef typename __xcodeml_template_type_0_0::value_type value_type;
public:typedef typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type pointer;
public:typedef typename __const_pointer<typename __xcodeml_template_type_0_0::value_type,typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type,__xcodeml_template_type_0_0,expression>::type const_pointer;
public:typedef typename __void_pointer<typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type,__xcodeml_template_type_0_0,expression>::type void_pointer;
public:typedef typename __const_void_pointer<typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type,__xcodeml_template_type_0_0,expression>::type const_void_pointer;
public:typedef typename __alloc_traits_difference_type<__xcodeml_template_type_0_0,typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type,expression>::type difference_type;
public:typedef typename __size_type<__xcodeml_template_type_0_0,typename __alloc_traits_difference_type<__xcodeml_template_type_0_0,typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type,expression>::type,expression>::type size_type;
public:typedef typename __propagate_on_container_copy_assignment<__xcodeml_template_type_0_0,expression>::type propagate_on_container_copy_assignment;
public:typedef typename __propagate_on_container_move_assignment<__xcodeml_template_type_0_0,expression>::type propagate_on_container_move_assignment;
public:typedef typename __propagate_on_container_swap<__xcodeml_template_type_0_0,expression>::type propagate_on_container_swap;
public:typedef typename __is_always_equal<__xcodeml_template_type_0_0,expression>::type is_always_equal;
public:template<typename __xcodeml_template_type_1_0>using rebind_alloc=typename __allocator_traits_rebind<__xcodeml_template_type_0_0,__xcodeml_template_type_1_0,expression>::type;
public:template<typename __xcodeml_template_type_1_0>using rebind_traits=allocator_traits<typename __allocator_traits_rebind<__xcodeml_template_type_0_0,__xcodeml_template_type_1_0,expression>::type>;
public:static typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type allocate(__xcodeml_template_type_0_0&__a,typename __size_type<__xcodeml_template_type_0_0,typename __alloc_traits_difference_type<__xcodeml_template_type_0_0,typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type,expression>::type,expression>::type __n)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__a.allocate(__n));
}
public:static typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type allocate(__xcodeml_template_type_0_0&__a,typename __size_type<__xcodeml_template_type_0_0,typename __alloc_traits_difference_type<__xcodeml_template_type_0_0,typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type,expression>::type,expression>::type __n,typename __const_void_pointer<typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type,__xcodeml_template_type_0_0,expression>::type __hint)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__allocate(__a,__n,__hint,__xcodeml_identity<__has_allocate_hint<__xcodeml_template_type_0_0,typename __size_type<__xcodeml_template_type_0_0,typename __alloc_traits_difference_type<__xcodeml_template_type_0_0,typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type,expression>::type,expression>::type,typename __const_void_pointer<typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type,__xcodeml_template_type_0_0,expression>::type> >::t()));
}
public:static void deallocate(__xcodeml_template_type_0_0&__a,typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type __p,typename __size_type<__xcodeml_template_type_0_0,typename __alloc_traits_difference_type<__xcodeml_template_type_0_0,typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type,expression>::type,expression>::type __n)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__a.deallocate(__p,__n));
}
public:template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1>static void construct(__xcodeml_template_type_0_0&__a,__xcodeml_template_type_1_0(*__p),__xcodeml_template_type_1_1&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__construct(__xcodeml_identity<__has_construct<__xcodeml_template_type_0_0,__xcodeml_template_type_1_0(*),__xcodeml_template_type_1_1...>/*packsize1*/>::t(),__a,__p,(std::__1::forward<__xcodeml_template_type_1_1...>(__args))...));
}
public:template<typename __xcodeml_template_type_1_0>static void destroy(__xcodeml_template_type_0_0&__a,__xcodeml_template_type_1_0(*__p))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__destroy(__xcodeml_identity<__has_destroy<__xcodeml_template_type_0_0,__xcodeml_template_type_1_0(*)> >::t(),__a,__p));
}
public:static typename __size_type<__xcodeml_template_type_0_0,typename __alloc_traits_difference_type<__xcodeml_template_type_0_0,typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type,expression>::type,expression>::type max_size(__xcodeml_template_type_0_0 const&__a)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__max_size(__xcodeml_identity<__has_max_size<__xcodeml_template_type_0_0 const> >::t(),__a));
}
public:static __xcodeml_template_type_0_0 select_on_container_copy_construction(__xcodeml_template_type_0_0 const&__a)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__select_on_container_copy_construction(__xcodeml_identity<__has_select_on_container_copy_construction<__xcodeml_template_type_0_0 const> >::t(),__a));
}
public:template<typename __xcodeml_template_type_1_0>static void __construct_forward(__xcodeml_template_type_0_0&__a,__xcodeml_template_type_1_0 __begin1,__xcodeml_template_type_1_0 __end1,__xcodeml_template_type_1_0&__begin2)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__begin1,__end1);((++__begin1),((void)(++__begin2)))){(construct(__a,(std::__1::__to_raw_pointer(__begin2)),(std::__1::move_if_noexcept((*__begin1)))));}};
}
public:template<typename __xcodeml_template_type_1_0>static typename enable_if<expression,void>::type __construct_forward(__xcodeml_template_type_0_0&,__xcodeml_template_type_1_0(*__begin1),__xcodeml_template_type_1_0(*__end1),__xcodeml_template_type_1_0(*&__begin2))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{long _Np=operator-(__end1,__begin1);
if((_Np>0)){{(std::__1::memcpy(__begin2,__begin1,(_Np*(sizeof(__xcodeml_template_type_1_0)))));
(__begin2+=_Np);
};};
}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>static void __construct_range_forward(__xcodeml_template_type_0_0&__a,__xcodeml_template_type_1_0 __begin1,__xcodeml_template_type_1_0 __end1,__xcodeml_template_type_1_1&__begin2)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__begin1,__end1);((++__begin1),((void)(++__begin2)))){(construct(__a,(std::__1::__to_raw_pointer(__begin2)),(*__begin1)));}};
}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename __xcodeml_template_type_1_2,typename __xcodeml_template_type_1_3>static typename enable_if<expression,void>::type __construct_range_forward(__xcodeml_template_type_0_0&,__xcodeml_template_type_1_0(*__begin1),__xcodeml_template_type_1_0(*__end1),__xcodeml_template_type_1_1(*&__begin2))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{long _Np=operator-(__end1,__begin1);
if((_Np>0)){{(std::__1::memcpy(const_cast<__xcodeml_template_type_1_3(*)>(__begin2),__begin1,(_Np*(sizeof(__xcodeml_template_type_1_1)))));
(__begin2+=_Np);
};};
}
public:template<typename __xcodeml_template_type_1_0>static void __construct_backward(__xcodeml_template_type_0_0&__a,__xcodeml_template_type_1_0 __begin1,__xcodeml_template_type_1_0 __end1,__xcodeml_template_type_1_0&__end2)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{while(operator!=(__end1,__begin1)){{(construct(__a,(std::__1::__to_raw_pointer(operator-(__end2,1))),(std::__1::move_if_noexcept((*(--__end1))))));
(--__end2);
};};
}
public:template<typename __xcodeml_template_type_1_0>static typename enable_if<expression,void>::type __construct_backward(__xcodeml_template_type_0_0&,__xcodeml_template_type_1_0(*__begin1),__xcodeml_template_type_1_0(*__end1),__xcodeml_template_type_1_0(*&__end2))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{long _Np=operator-(__end1,__begin1);
(__end2-=_Np);
if((_Np>0)){(std::__1::memcpy(__end2,__begin1,(_Np*(sizeof(__xcodeml_template_type_1_0)))));};
}
private:
private:static typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type __allocate(__xcodeml_template_type_0_0&__a,typename __size_type<__xcodeml_template_type_0_0,typename __alloc_traits_difference_type<__xcodeml_template_type_0_0,typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type,expression>::type,expression>::type __n,typename __const_void_pointer<typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type,__xcodeml_template_type_0_0,expression>::type __hint,class::std::__1::integral_constant<bool,1>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__a.allocate(__n,__hint));
}
private:static typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type __allocate(__xcodeml_template_type_0_0&__a,typename __size_type<__xcodeml_template_type_0_0,typename __alloc_traits_difference_type<__xcodeml_template_type_0_0,typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type,expression>::type,expression>::type __n,typename __const_void_pointer<typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type,__xcodeml_template_type_0_0,expression>::type,class::std::__1::integral_constant<bool,0>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__a.allocate(__n));
}
private:template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1>static void __construct(class::std::__1::integral_constant<bool,1>,__xcodeml_template_type_0_0&__a,__xcodeml_template_type_1_0(*__p),__xcodeml_template_type_1_1&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__a.construct(__p,(std::__1::forward<__xcodeml_template_type_1_1...>(__args))...));
}
private:template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1>static void __construct(class::std::__1::integral_constant<bool,0>,__xcodeml_template_type_0_0&,__xcodeml_template_type_1_0(*__p),__xcodeml_template_type_1_1&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{::new(((void(*))__p))__xcodeml_identity<__xcodeml_template_type_1_0>::t((std::__1::forward<__xcodeml_template_type_1_1...>(__args))...);
}
private:template<typename __xcodeml_template_type_1_0>static void __destroy(class::std::__1::integral_constant<bool,1>,__xcodeml_template_type_0_0&__a,__xcodeml_template_type_1_0(*__p))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__a.destroy(__p));
}
private:template<typename __xcodeml_template_type_1_0>static void __destroy(class::std::__1::integral_constant<bool,0>,__xcodeml_template_type_0_0&,__xcodeml_template_type_1_0(*__p))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(/*CPDE*/(__p).~__xcodeml_template_type_1_0());
}
private:static typename __size_type<__xcodeml_template_type_0_0,typename __alloc_traits_difference_type<__xcodeml_template_type_0_0,typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type,expression>::type,expression>::type __max_size(class::std::__1::integral_constant<bool,1>,__xcodeml_template_type_0_0 const&__a)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__a.max_size());
}
private:static typename __size_type<__xcodeml_template_type_0_0,typename __alloc_traits_difference_type<__xcodeml_template_type_0_0,typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type,expression>::type,expression>::type __max_size(class::std::__1::integral_constant<bool,0>,__xcodeml_template_type_0_0 const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((numeric_limits<typename __size_type<__xcodeml_template_type_0_0,typename __alloc_traits_difference_type<__xcodeml_template_type_0_0,typename __pointer_type<typename __xcodeml_template_type_0_0::value_type,__xcodeml_template_type_0_0>::type,expression>::type,expression>::type>::max())/(sizeof(typename __xcodeml_template_type_0_0::value_type)));
}
private:static __xcodeml_template_type_0_0 __select_on_container_copy_construction(class::std::__1::integral_constant<bool,1>,__xcodeml_template_type_0_0 const&__a)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__a.select_on_container_copy_construction());
}
private:static __xcodeml_template_type_0_0 __select_on_container_copy_construction(class::std::__1::integral_constant<bool,0>,__xcodeml_template_type_0_0 const&__a)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __a;
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __rebind_alloc_helper{public:typedef/*DTS*/__xcodeml_template_type_0_0::template rebind_alloc<__xcodeml_template_type_0_1>;
}
;
;
template<typename __xcodeml_template_type_0_0>class allocator{public:
public:typedef unsigned long size_type;
public:typedef long difference_type;
public:typedef __xcodeml_template_type_0_0(*pointer);
public:typedef __xcodeml_template_type_0_0 const(*const_pointer);
public:typedef __xcodeml_template_type_0_0&reference;
public:typedef __xcodeml_template_type_0_0 const&const_reference;
public:typedef __xcodeml_template_type_0_0 value_type;
public:typedef class::std::__1::integral_constant<bool,1>propagate_on_container_move_assignment;
public:typedef class::std::__1::integral_constant<bool,1>is_always_equal;
public:template<typename __xcodeml_template_type_1_0>class rebind{public:typedef allocator<__xcodeml_template_type_1_0>other;
}
;
;
public:allocator()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0>allocator(allocator<__xcodeml_template_type_1_0>const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__xcodeml_template_type_0_0(*address(__xcodeml_template_type_0_0&__x)const)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::addressof(__x));
}
public:__xcodeml_template_type_0_0 const(*address(__xcodeml_template_type_0_0 const&__x)const)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::addressof(__x));
}
public:__xcodeml_template_type_0_0(*allocate(unsigned long __n,void const(*)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator>(__n,(this->max_size()))){(__throw_length_error("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size"));};
return static_cast<__xcodeml_template_type_0_0(*)>((std::__1::__libcpp_allocate((__n*(sizeof(__xcodeml_template_type_0_0))),(alignof(__xcodeml_template_type_0_0)))));
}
public:void deallocate(__xcodeml_template_type_0_0(*__p),unsigned long __n)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::__libcpp_deallocate(((void(*))__p),(__n*(sizeof(__xcodeml_template_type_0_0))),(alignof(__xcodeml_template_type_0_0))));
}
public:unsigned long max_size()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(((unsigned long)(~0))/(sizeof(__xcodeml_template_type_0_0)));
}
public:template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1>void construct(__xcodeml_template_type_1_0(*__p),__xcodeml_template_type_1_1&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{::new(((void(*))__p))__xcodeml_identity<__xcodeml_template_type_1_0>::t((std::__1::forward<__xcodeml_template_type_1_1...>(__args))...);
}
public:void destroy(__xcodeml_template_type_0_0(*__p))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(/*CPDE*/(__p).~__xcodeml_template_type_0_0());
}
}
;
;
template<typename __xcodeml_template_type_0_0>class allocator<__xcodeml_template_type_0_0 const>{public:
public:typedef unsigned long size_type;
public:typedef long difference_type;
public:typedef __xcodeml_template_type_0_0 const(*pointer);
public:typedef __xcodeml_template_type_0_0 const(*const_pointer);
public:typedef __xcodeml_template_type_0_0 const&reference;
public:typedef __xcodeml_template_type_0_0 const&const_reference;
public:typedef __xcodeml_template_type_0_0 const value_type;
public:typedef class::std::__1::integral_constant<bool,1>propagate_on_container_move_assignment;
public:typedef class::std::__1::integral_constant<bool,1>is_always_equal;
public:template<typename __xcodeml_template_type_1_0>class rebind{public:typedef allocator<__xcodeml_template_type_1_0>other;
}
;
;
public:allocator()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0>allocator(allocator<__xcodeml_template_type_1_0>const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__xcodeml_template_type_0_0 const(*address(__xcodeml_template_type_0_0 const&__x)const)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::addressof(__x));
}
public:__xcodeml_template_type_0_0 const(*allocate(unsigned long __n,void const(*)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator>(__n,(this->max_size()))){(__throw_length_error("allocator<const T>::allocate(size_t n) 'n' exceeds maximum supported size"));};
return static_cast<__xcodeml_template_type_0_0 const(*)>((std::__1::__libcpp_allocate((__n*(sizeof(__xcodeml_template_type_0_0))),(alignof(__xcodeml_template_type_0_0)))));
}
public:void deallocate(__xcodeml_template_type_0_0 const(*__p),unsigned long __n)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::__libcpp_deallocate(((void(*))const_cast<__xcodeml_template_type_0_0(*)>(__p)),(__n*(sizeof(__xcodeml_template_type_0_0))),(alignof(__xcodeml_template_type_0_0))));
}
public:unsigned long max_size()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(((unsigned long)(~0))/(sizeof(__xcodeml_template_type_0_0)));
}
public:template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1>void construct(__xcodeml_template_type_1_0(*__p),__xcodeml_template_type_1_1&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{::new(((void(*))__p))__xcodeml_identity<__xcodeml_template_type_1_0>::t((std::__1::forward<__xcodeml_template_type_1_1...>(__args))...);
}
public:void destroy(__xcodeml_template_type_0_0 const(*__p))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(/*CPDE*/(__p).~__xcodeml_template_type_0_0());
}
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator==(allocator<__xcodeml_template_type_0_0>const&,allocator<__xcodeml_template_type_0_1>const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return true;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator!=(allocator<__xcodeml_template_type_0_0>const&,allocator<__xcodeml_template_type_0_1>const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return false;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class raw_storage_iterator:public iterator<class::std::__1::output_iterator_tag,__xcodeml_template_type_0_1,long,__xcodeml_template_type_0_1(*),class raw_storage_iterator&>{private:
private:__xcodeml_template_type_0_0 __x_;
public:
public:raw_storage_iterator(__xcodeml_template_type_0_0 __x):__x_(__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:class raw_storage_iterator&operator*()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this);
}
public:class raw_storage_iterator&operator=(__xcodeml_template_type_0_1 const&__element)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{::new((std::__1::addressof((*this->__x_))))__xcodeml_identity<__xcodeml_template_type_0_1>::t(__element);
return(*this);
}
public:class raw_storage_iterator&operator++()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(++this->__x_);
return(*this);
}
public:class raw_storage_iterator operator++(int)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{class raw_storage_iterator __t=(*this);
(++this->__x_);
return __t;
}
}
;
;
template<typename __xcodeml_template_type_0_0>pair<__xcodeml_template_type_0_0(*),long>get_temporary_buffer(long __n)/*gccattr no_sanitize:*/{pair<__xcodeml_template_type_0_0(*),long>__r=0 0;
long const __m=(((~((long)0))^((long)(((long)1)<<(((sizeof(long))*8)-1))))/(sizeof(__xcodeml_template_type_0_0)));
if((__n>__m)){(__n=__m);};
while((__n>0)){{if((__is_overaligned_for_new((alignof(__xcodeml_template_type_0_0))))){{return __r;
};};
(__r.first=static_cast<__xcodeml_template_type_0_0(*)>((::operator new((__n*(sizeof(__xcodeml_template_type_0_0))),nothrow))));
if(__r.first){{(__r.second=__n);
break;
};};
(__n/=2);
};};
return __r;
}
template<typename __xcodeml_template_type_0_0>void return_temporary_buffer(__xcodeml_template_type_0_0(*__p))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::__libcpp_deallocate_unsized(((void(*))__p),(alignof(__xcodeml_template_type_0_0))));
}
template<typename __xcodeml_template_type_0_0>class auto_ptr_ref{public:__xcodeml_template_type_0_0(*__ptr_);
}
;
;
template<typename __xcodeml_template_type_0_0>class auto_ptr{private:
private:__xcodeml_template_type_0_0(*__ptr_);
public:
public:typedef __xcodeml_template_type_0_0 element_type;
public:auto_ptr(__xcodeml_template_type_0_0(*__p)):__ptr_(__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:auto_ptr(class auto_ptr&__p):__ptr_((__p.release()))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0>auto_ptr(auto_ptr<__xcodeml_template_type_1_0>&__p):__ptr_((__p.release()))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:class auto_ptr&operator=(class auto_ptr&__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->reset((__p.release())));
return(*this);
}
public:template<typename __xcodeml_template_type_1_0>class auto_ptr&operator=(auto_ptr<__xcodeml_template_type_1_0>&__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->reset((__p.release())));
return(*this);
}
public:class auto_ptr&operator=(auto_ptr_ref<__xcodeml_template_type_0_0>__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->reset(__p.__ptr_));
return(*this);
}
public:~auto_ptr()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{delete this->__ptr_;
}
public:__xcodeml_template_type_0_0&operator*()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this->__ptr_);
}
public:__xcodeml_template_type_0_0(*operator->()const)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__ptr_;
}
public:__xcodeml_template_type_0_0(*get()const)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__ptr_;
}
public:__xcodeml_template_type_0_0(*release())/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{__xcodeml_template_type_0_0(*__t)=this->__ptr_;
(this->__ptr_=0);
return __t;
}
public:void reset(__xcodeml_template_type_0_0(*__p))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator!=(this->__ptr_,__p)){delete this->__ptr_;};
(this->__ptr_=__p);
}
public:auto_ptr(auto_ptr_ref<__xcodeml_template_type_0_0>__p):__ptr_(__p.__ptr_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0>
public:template<typename __xcodeml_template_type_1_0>
}
;
;
template<>class auto_ptr<void>{public:
public:typedef void element_type;
}
;
template<typename __xcodeml_template_type_0_0,int _Idx,bool _CanBeEmptyBase=(is_empty<__xcodeml_template_type_0_0>::value&&(!__libcpp_is_final<__xcodeml_template_type_0_0>::value))>class __compressed_pair_elem{public:typedef __xcodeml_template_type_0_0 _ParamT;
public:typedef __xcodeml_template_type_0_0&reference;
public:typedef __xcodeml_template_type_0_0 const&const_reference;
public:__compressed_pair_elem():__value_()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__compressed_pair_elem(__xcodeml_template_type_1_0&& __u):__value_((std::__1::forward<__xcodeml_template_type_1_0>(__u)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename...__xcodeml_template_type_1_0,unsigned long _Indexes...>__compressed_pair_elem(class::std::__1::piecewise_construct_t,tuple<__xcodeml_template_type_1_0...>/*packsize1*/__args,__tuple_indices<expression>/*packsize1*/):__value_((std::__1::forward<__xcodeml_template_type_1_0...>((std::__1::get<_Indexes>(__args))))...)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__xcodeml_template_type_0_0&__get()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__value_;
}
public:__xcodeml_template_type_0_0 const&__get()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__value_;
}
private:
private:__xcodeml_template_type_0_0 __value_;
}
;
;
template<typename __xcodeml_template_type_0_0,int _Idx>class __compressed_pair_elem<__xcodeml_template_type_0_0,expression,1>:private __xcodeml_template_type_0_0{public:typedef __xcodeml_template_type_0_0 _ParamT;
public:typedef __xcodeml_template_type_0_0&reference;
public:typedef __xcodeml_template_type_0_0 const&const_reference;
public:typedef __xcodeml_template_type_0_0 __value_type;
public:__compressed_pair_elem();
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__compressed_pair_elem(__xcodeml_template_type_1_0&& __u):((std::__1::forward<__xcodeml_template_type_1_0>(__u)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename...__xcodeml_template_type_1_0,unsigned long _Indexes...>__compressed_pair_elem(class::std::__1::piecewise_construct_t,tuple<__xcodeml_template_type_1_0...>/*packsize1*/__args,__tuple_indices<expression>/*packsize1*/):((std::__1::forward<__xcodeml_template_type_1_0...>((std::__1::get<_Indexes>(__args))))...)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__xcodeml_template_type_0_0&__get()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this);
}
public:__xcodeml_template_type_0_0 const&__get()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this);
}
}
;
class __second_tag{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __compressed_pair:private __compressed_pair_elem<__xcodeml_template_type_0_0,0,expression>,private __compressed_pair_elem<__xcodeml_template_type_0_1,1,expression>{private:typedef __compressed_pair_elem<__xcodeml_template_type_0_0,0,expression>_Base1;
private:typedef __compressed_pair_elem<__xcodeml_template_type_0_1,1,expression>_Base2;

/* Ignored a member with no access specifier static_assert((!is_same<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::value),"__compressed_pair cannot be instantated when T1 and T2 are the same type; The current implementation is NOT ABI-compatible with the previous implementation for this configuration");*/

public:
public:template<bool _Dummy=true,typename __xcodeml_template_type_1_1>__compressed_pair()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename enable_if<expression,bool>::type=true>__compressed_pair(__xcodeml_template_type_1_0&& __t):((std::forward<__xcodeml_template_type_1_0>(__t))),()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0>__compressed_pair(class::std::__1::__second_tag,__xcodeml_template_type_1_0&& __t):(),((std::forward<__xcodeml_template_type_1_0>(__t)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__compressed_pair(__xcodeml_template_type_1_0&& __t1,__xcodeml_template_type_1_1&& __t2):((std::forward<__xcodeml_template_type_1_0>(__t1))),((std::forward<__xcodeml_template_type_1_1>(__t2)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename...__xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1>__compressed_pair(class::std::__1::piecewise_construct_t __pc,tuple<__xcodeml_template_type_1_0...>/*packsize1*/__first_args,tuple<__xcodeml_template_type_1_1...>/*packsize1*/__second_args):(__pc(std::__1::move(__first_args))__xcodeml_identity<typename __make_tuple_indices<expression,0>::type>::t()),(__pc(std::__1::move(__second_args))__xcodeml_identity<typename __make_tuple_indices<expression,0>::type>::t())/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:typename __compressed_pair_elem<__xcodeml_template_type_0_0,0,expression>::reference first()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(static_cast<__compressed_pair_elem<__xcodeml_template_type_0_0,0,expression>&>((*this)).__get());
}
public:typename __compressed_pair_elem<__xcodeml_template_type_0_0,0,expression>::const_reference first()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(static_cast<__compressed_pair_elem<__xcodeml_template_type_0_0,0,expression>const&>((*this)).__get());
}
public:typename __compressed_pair_elem<__xcodeml_template_type_0_1,1,expression>::reference second()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(static_cast<__compressed_pair_elem<__xcodeml_template_type_0_1,1,expression>&>((*this)).__get());
}
public:typename __compressed_pair_elem<__xcodeml_template_type_0_1,1,expression>::const_reference second()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(static_cast<__compressed_pair_elem<__xcodeml_template_type_0_1,1,expression>const&>((*this)).__get());
}
public:void swap(class __compressed_pair&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{using std::swap;
(swap((this->first()),(__x.first())));
(swap((this->second()),(__x.second())));
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void swap(__compressed_pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&__x,__compressed_pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__x.swap(__y));
}
template<typename __xcodeml_template_type_0_0>class default_delete{
/* Ignored a member with no access specifier static_assert((!is_function<__xcodeml_template_type_0_0>::value),"default_delete cannot be instantiated for function types");*/

public:default_delete();
public:template<typename __xcodeml_template_type_1_0>default_delete(default_delete<__xcodeml_template_type_1_0>const&,typename enable_if<expression,void>::type(*))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:void operator()(__xcodeml_template_type_0_0(*__ptr))const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert(((sizeof(__xcodeml_template_type_0_0))>0),"default_delete can not delete incomplete type");
static_assert((!is_void<__xcodeml_template_type_0_0>::.value),"default_delete can not delete incomplete type");
delete __ptr;
}
}
;
;
template<typename __xcodeml_template_type_0_0>class default_delete<__xcodeml_template_type_0_0>{private:
private:template<typename __xcodeml_template_type_1_0>class _EnableIfConvertible:public enable_if<expression,void>{}
;
;
public:
public:default_delete();
public:template<typename __xcodeml_template_type_1_0>default_delete(default_delete<__xcodeml_template_type_1_0>const&,typename _EnableIfConvertible<__xcodeml_template_type_1_0>::type(*))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0>typename _EnableIfConvertible<__xcodeml_template_type_1_0>::type operator()(__xcodeml_template_type_1_0(*__ptr))const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert(((sizeof(__xcodeml_template_type_0_0))>0),"default_delete can not delete incomplete type");
static_assert((!is_void<__xcodeml_template_type_0_0>::.value),"default_delete can not delete void type");
delete[]__ptr;
}
}
;
template<typename __xcodeml_template_type_0_0>class __unique_ptr_deleter_sfinae{
/* Ignored a member with no access specifier static_assert((!is_reference<__xcodeml_template_type_0_0>::value),"incorrect specialization");*/

public:typedef __xcodeml_template_type_0_0 const&__lval_ref_type;
public:typedef __xcodeml_template_type_0_0&& __good_rval_ref_type;
public:typedef class::std::__1::integral_constant<bool,1>__enable_rval_overload;
}
;
;
template<typename __xcodeml_template_type_0_0>class __unique_ptr_deleter_sfinae<__xcodeml_template_type_0_0 const&>{public:typedef __xcodeml_template_type_0_0 const&__lval_ref_type;
public:typedef __xcodeml_template_type_0_0 const&& __bad_rval_ref_type;
public:typedef class::std::__1::integral_constant<bool,0>__enable_rval_overload;
}
;
template<typename __xcodeml_template_type_0_0>class __unique_ptr_deleter_sfinae<__xcodeml_template_type_0_0&>{public:typedef __xcodeml_template_type_0_0&__lval_ref_type;
public:typedef __xcodeml_template_type_0_0&& __bad_rval_ref_type;
public:typedef class::std::__1::integral_constant<bool,0>__enable_rval_overload;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class unique_ptr{public:
public:typedef __xcodeml_template_type_0_0 element_type;
public:typedef __xcodeml_template_type_0_1 deleter_type;
public:typedef typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type pointer;

/* Ignored a member with no access specifier static_assert((!is_rvalue_reference<__xcodeml_template_type_0_1>::value),"the specified deleter type cannot be an rvalue reference");*/

private:
private:__compressed_pair<typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type,__xcodeml_template_type_0_1>__ptr_;
private:class __nat{public:int __for_bool_;
}
;
private:typedef __unique_ptr_deleter_sfinae<__xcodeml_template_type_0_1>_DeleterSFINAE;
private:template<bool _Dummy>using _LValRefType=typename __dependent_type<__unique_ptr_deleter_sfinae<__xcodeml_template_type_0_1>,expression>::__lval_ref_type;
private:template<bool _Dummy>using _GoodRValRefType=typename __dependent_type<__unique_ptr_deleter_sfinae<__xcodeml_template_type_0_1>,expression>::__good_rval_ref_type;
private:template<bool _Dummy>using _BadRValRefType=typename __dependent_type<__unique_ptr_deleter_sfinae<__xcodeml_template_type_0_1>,expression>::__bad_rval_ref_type;
private:template<bool _Dummy,typename __xcodeml_template_type_1_1>using _EnableIfDeleterDefaultConstructible=typename enable_if<expression,void>::type;
private:template<typename __xcodeml_template_type_1_0>using _EnableIfDeleterConstructible=typename enable_if<expression,void>::type;
private:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>using _EnableIfMoveConvertible=typename enable_if<expression,void>::type;
private:template<typename __xcodeml_template_type_1_0>using _EnableIfDeleterConvertible=typename enable_if<expression,void>::type;
private:template<typename __xcodeml_template_type_1_0>using _EnableIfDeleterAssignable=typename enable_if<expression,void>::type;
public:
public:template<bool _Dummy=true,typename __xcodeml_template_type_1_1>unique_ptr():__ptr_(__xcodeml_identity<typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type>::t())/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<bool _Dummy=true,typename __xcodeml_template_type_1_1>unique_ptr(nullptr_t):__ptr_(__xcodeml_identity<typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type>::t())/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<bool _Dummy=true,typename __xcodeml_template_type_1_1>unique_ptr(typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type __p):__ptr_(__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<bool _Dummy=true,typename __xcodeml_template_type_1_1>unique_ptr(typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type __p,typename __dependent_type<__unique_ptr_deleter_sfinae<__xcodeml_template_type_0_1>,expression>::__lval_ref_type __d):__ptr_(__p __d)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<bool _Dummy=true,typename __xcodeml_template_type_1_1>unique_ptr(typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type __p,typename __dependent_type<__unique_ptr_deleter_sfinae<__xcodeml_template_type_0_1>,expression>::__good_rval_ref_type __d):__ptr_(__p(std::__1::move(__d)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert((!is_reference<__xcodeml_template_type_0_1>::.value),"rvalue deleter bound to reference");
}
public:template<bool _Dummy=true,typename __xcodeml_template_type_1_1>unique_ptr(typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type __p,typename __dependent_type<__unique_ptr_deleter_sfinae<__xcodeml_template_type_0_1>,expression>::__bad_rval_ref_type __d)
public:unique_ptr(class unique_ptr&& __u):__ptr_((__u.release())(std::__1::forward<__xcodeml_template_type_0_1>((__u.get_deleter()))))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename __xcodeml_template_type_1_2,typename __xcodeml_template_type_1_3>unique_ptr(unique_ptr<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>&& __u):__ptr_((__u.release())(std::__1::forward<__xcodeml_template_type_1_1>((__u.get_deleter()))))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0>unique_ptr(auto_ptr<__xcodeml_template_type_1_0>&& __p,typename enable_if<expression,class::std::__1::unique_ptr::__nat>::type):__ptr_((__p.release()))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:class unique_ptr&operator=(class unique_ptr&& __u)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->reset((__u.release())));
((this->__ptr_.second())=(std::__1::forward<__xcodeml_template_type_0_1>((__u.get_deleter()))));
return(*this);
}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename __xcodeml_template_type_1_2,typename __xcodeml_template_type_1_3>class unique_ptr&operator=(unique_ptr<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>&& __u)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->reset((__u.release())));
((this->__ptr_.second())=(std::__1::forward<__xcodeml_template_type_1_1>((__u.get_deleter()))));
return(*this);
}
public:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,class unique_ptr&>::type operator=(auto_ptr<__xcodeml_template_type_1_0>__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->reset((__p.release())));
return(*this);
}
public:~unique_ptr()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->reset());
}
public:class unique_ptr&operator=(nullptr_t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->reset());
return(*this);
}
public:typename add_lvalue_reference<__xcodeml_template_type_0_0>::type operator*()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*(this->__ptr_.first()));
}
public:typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type operator->()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__ptr_.first());
}
public:typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type get()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__ptr_.first());
}
public:__xcodeml_template_type_0_1&get_deleter()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__ptr_.second());
}
public:__xcodeml_template_type_0_1 const&get_deleter()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__ptr_.second());
}
public:operator bool()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator!=((this->__ptr_.first()),nullptr);
}
public:typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type release()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type __t=(this->__ptr_.first());
((this->__ptr_.first())=__xcodeml_identity<typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type>::t());
return __t;
}
public:void reset(typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type __p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type __tmp=(this->__ptr_.first());
((this->__ptr_.first())=__p);
if(__tmp){((this->__ptr_.second())(__tmp));};
}
public:void swap(class unique_ptr&__u)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__ptr_.swap(__u.__ptr_));
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>{public:
public:typedef __xcodeml_template_type_0_0 element_type;
public:typedef __xcodeml_template_type_0_1 deleter_type;
public:typedef typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type pointer;
private:
private:__compressed_pair<typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type,__xcodeml_template_type_0_1>__ptr_;
private:template<typename __xcodeml_template_type_1_0>class _CheckArrayPointerConversion:public is_same<__xcodeml_template_type_1_0,typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type>{}
;
;

/* Ignored a member with no access specifier template<typename __xcodeml_template_type_1_0>class _CheckArrayPointerConversion<__xcodeml_template_type_1_0(*)>:public integral_constant<bool,expression>{}
;*/

private:typedef __unique_ptr_deleter_sfinae<__xcodeml_template_type_0_1>_DeleterSFINAE;
private:template<bool _Dummy>using _LValRefType=typename __dependent_type<__unique_ptr_deleter_sfinae<__xcodeml_template_type_0_1>,expression>::__lval_ref_type;
private:template<bool _Dummy>using _GoodRValRefType=typename __dependent_type<__unique_ptr_deleter_sfinae<__xcodeml_template_type_0_1>,expression>::__good_rval_ref_type;
private:template<bool _Dummy>using _BadRValRefType=typename __dependent_type<__unique_ptr_deleter_sfinae<__xcodeml_template_type_0_1>,expression>::__bad_rval_ref_type;
private:template<bool _Dummy,typename __xcodeml_template_type_1_1>using _EnableIfDeleterDefaultConstructible=typename enable_if<expression,void>::type;
private:template<typename __xcodeml_template_type_1_0>using _EnableIfDeleterConstructible=typename enable_if<expression,void>::type;
private:template<typename __xcodeml_template_type_1_0>using _EnableIfPointerConvertible=typename enable_if<expression,void>::type;
private:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename __xcodeml_template_type_1_2>using _EnableIfMoveConvertible=typename enable_if<expression,void>::type;
private:template<typename __xcodeml_template_type_1_0>using _EnableIfDeleterConvertible=typename enable_if<expression,void>::type;
private:template<typename __xcodeml_template_type_1_0>using _EnableIfDeleterAssignable=typename enable_if<expression,void>::type;
public:
public:template<bool _Dummy=true,typename __xcodeml_template_type_1_1>unique_ptr():__ptr_(__xcodeml_identity<typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type>::t())/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<bool _Dummy=true,typename __xcodeml_template_type_1_1>unique_ptr(nullptr_t):__ptr_(__xcodeml_identity<typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type>::t())/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,bool _Dummy=true,typename __xcodeml_template_type_1_2,typename __xcodeml_template_type_1_3>unique_ptr(__xcodeml_template_type_1_0 __p):__ptr_(__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,bool _Dummy=true,typename __xcodeml_template_type_1_2,typename __xcodeml_template_type_1_3>unique_ptr(__xcodeml_template_type_1_0 __p,typename __dependent_type<__unique_ptr_deleter_sfinae<__xcodeml_template_type_0_1>,expression>::__lval_ref_type __d):__ptr_(__p __d)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<bool _Dummy=true,typename __xcodeml_template_type_1_1>unique_ptr(nullptr_t,typename __dependent_type<__unique_ptr_deleter_sfinae<__xcodeml_template_type_0_1>,expression>::__lval_ref_type __d):__ptr_(nullptr __d)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,bool _Dummy=true,typename __xcodeml_template_type_1_2,typename __xcodeml_template_type_1_3>unique_ptr(__xcodeml_template_type_1_0 __p,typename __dependent_type<__unique_ptr_deleter_sfinae<__xcodeml_template_type_0_1>,expression>::__good_rval_ref_type __d):__ptr_(__p(std::__1::move(__d)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert((!is_reference<__xcodeml_template_type_0_1>::.value),"rvalue deleter bound to reference");
}
public:template<bool _Dummy=true,typename __xcodeml_template_type_1_1>unique_ptr(nullptr_t,typename __dependent_type<__unique_ptr_deleter_sfinae<__xcodeml_template_type_0_1>,expression>::__good_rval_ref_type __d):__ptr_(nullptr(std::__1::move(__d)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert((!is_reference<__xcodeml_template_type_0_1>::.value),"rvalue deleter bound to reference");
}
public:template<typename __xcodeml_template_type_1_0,bool _Dummy=true,typename __xcodeml_template_type_1_2,typename __xcodeml_template_type_1_3>unique_ptr(__xcodeml_template_type_1_0 __p,typename __dependent_type<__unique_ptr_deleter_sfinae<__xcodeml_template_type_0_1>,expression>::__bad_rval_ref_type __d)
public:unique_ptr(class unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&& __u):__ptr_((__u.release())(std::__1::forward<__xcodeml_template_type_0_1>((__u.get_deleter()))))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:class unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&operator=(class unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&& __u)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->reset((__u.release())));
((this->__ptr_.second())=(std::__1::forward<__xcodeml_template_type_0_1>((__u.get_deleter()))));
return(*this);
}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename __xcodeml_template_type_1_2,typename __xcodeml_template_type_1_3>unique_ptr(unique_ptr<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>&& __u):__ptr_((__u.release())(std::__1::forward<__xcodeml_template_type_1_1>((__u.get_deleter()))))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename __xcodeml_template_type_1_2,typename __xcodeml_template_type_1_3>class unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&operator=(unique_ptr<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>&& __u)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->reset((__u.release())));
((this->__ptr_.second())=(std::__1::forward<__xcodeml_template_type_1_1>((__u.get_deleter()))));
return(*this);
}
public:
public:~unique_ptr()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->reset());
}
public:class unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&operator=(nullptr_t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->reset());
return(*this);
}
public:typename add_lvalue_reference<__xcodeml_template_type_0_0>::type operator[](unsigned long __i)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((this->__ptr_.first()))[__i];
}
public:typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type get()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__ptr_.first());
}
public:__xcodeml_template_type_0_1&get_deleter()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__ptr_.second());
}
public:__xcodeml_template_type_0_1 const&get_deleter()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__ptr_.second());
}
public:operator bool()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator!=((this->__ptr_.first()),nullptr);
}
public:typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type release()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type __t=(this->__ptr_.first());
((this->__ptr_.first())=__xcodeml_identity<typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type>::t());
return __t;
}
public:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,void>::type reset(__xcodeml_template_type_1_0 __p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type __tmp=(this->__ptr_.first());
((this->__ptr_.first())=__p);
if(__tmp){((this->__ptr_.second())(__tmp));};
}
public:void reset(nullptr_t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typename __pointer_type<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type __tmp=(this->__ptr_.first());
((this->__ptr_.first())=nullptr);
if(__tmp){((this->__ptr_.second())(__tmp));};
}
public:void swap(class unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&__u)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__ptr_.swap(__u.__ptr_));
}
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename enable_if<expression,void>::type swap(unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&__x,unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__x.swap(__y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>bool operator==(unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,unique_ptr<__xcodeml_template_type_0_2,__xcodeml_template_type_0_3>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==((__x.get()),(__y.get()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>bool operator!=(unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,unique_ptr<__xcodeml_template_type_0_2,__xcodeml_template_type_0_3>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator==(__x,__y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>bool operator<(unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,unique_ptr<__xcodeml_template_type_0_2,__xcodeml_template_type_0_3>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer _P1;
typedef typename unique_ptr<__xcodeml_template_type_0_2,__xcodeml_template_type_0_3>::pointer _P2;
typedef typename common_type<typename unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer,typename unique_ptr<__xcodeml_template_type_0_2,__xcodeml_template_type_0_3>::pointer>/*packsize2*/::type _Vp;
return(__xcodeml_identity<less<typename common_type<typename unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer,typename unique_ptr<__xcodeml_template_type_0_2,__xcodeml_template_type_0_3>::pointer>/*packsize2*/::type> >::t()((__x.get()),(__y.get())));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>bool operator>(unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,unique_ptr<__xcodeml_template_type_0_2,__xcodeml_template_type_0_3>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(__y,__x);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>bool operator<=(unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,unique_ptr<__xcodeml_template_type_0_2,__xcodeml_template_type_0_3>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(__y,__x));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>bool operator>=(unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,unique_ptr<__xcodeml_template_type_0_2,__xcodeml_template_type_0_3>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(__x,__y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator==(unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,nullptr_t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!__x);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator==(nullptr_t,unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!__x);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator!=(unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,nullptr_t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<bool>(__x);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator!=(nullptr_t,unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<bool>(__x);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator<(unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,nullptr_t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer _P1;
return(__xcodeml_identity<less<typename unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer> >::t()((__x.get()),nullptr));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator<(nullptr_t,unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer _P1;
return(__xcodeml_identity<less<typename unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer> >::t()(nullptr,(__x.get())));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator>(unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,nullptr_t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(nullptr,__x);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator>(nullptr_t,unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(__x,nullptr);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator<=(unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,nullptr_t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(nullptr,__x));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator<=(nullptr_t,unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(__x,nullptr));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator>=(unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,nullptr_t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(__x,nullptr));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator>=(nullptr_t,unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(nullptr,__x));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class hash<unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1> >{public:typedef unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>argument_type;
public:typedef unsigned long result_type;
public:unsigned long operator()(unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__ptr)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer pointer;
return(__xcodeml_identity<hash<typename unique_ptr<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer> >::t()((__ptr.get())));
}
}
;
class __destruct_n{private:
private:unsigned long __size_;
private:template<typename __xcodeml_template_type_0_0>void __process(__xcodeml_template_type_0_0(*__p),class::std::__1::integral_constant<bool,0>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{unsigned long __i=0;for(;(__i<this->__size_);((++__i),(++__p))){(/*CPDE*/(__p).~__xcodeml_template_type_0_0());}};
}
private:template<typename __xcodeml_template_type_0_0>void __process(__xcodeml_template_type_0_0(*),class::std::__1::integral_constant<bool,1>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
private:void __incr(class::std::__1::integral_constant<bool,0>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(++this->__size_);
}
private:void __incr(class::std::__1::integral_constant<bool,1>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
private:void __set(unsigned long __s,class::std::__1::integral_constant<bool,0>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__size_=__s);
}
private:void __set(unsigned long,class::std::__1::integral_constant<bool,1>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:
public:__destruct_n(unsigned long __s):__size_(__s)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_0_0>void __incr(__xcodeml_template_type_0_0(*))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__incr(__xcodeml_identity<integral_constant<bool,expression> >::t()));
}
public:template<typename __xcodeml_template_type_0_0>void __set(unsigned long __s,__xcodeml_template_type_0_0(*))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__set(__s,__xcodeml_identity<integral_constant<bool,expression> >::t()));
}
public:template<typename __xcodeml_template_type_0_0>void operator()(__xcodeml_template_type_0_0(*__p))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__process(__p,__xcodeml_identity<integral_constant<bool,expression> >::t()));
}
}
;
template<typename __xcodeml_template_type_0_0>class __allocator_destructor{private:typedef allocator_traits<__xcodeml_template_type_0_0>__alloc_traits;
public:
public:typedef typename allocator_traits<__xcodeml_template_type_0_0>::pointer pointer;
public:typedef typename allocator_traits<__xcodeml_template_type_0_0>::size_type size_type;
private:
private:__xcodeml_template_type_0_0&__alloc_;
private:typename allocator_traits<__xcodeml_template_type_0_0>::size_type __s_;
public:
public:__allocator_destructor(__xcodeml_template_type_0_0&__a,typename allocator_traits<__xcodeml_template_type_0_0>::size_type __s):__alloc_(__a),__s_(__s)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:void operator()(typename allocator_traits<__xcodeml_template_type_0_0>::pointer __p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(allocator_traits<__xcodeml_template_type_0_0>::.deallocate(this->__alloc_,__p,this->__s_));
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 uninitialized_copy(__xcodeml_template_type_0_0 __f,__xcodeml_template_type_0_0 __l,__xcodeml_template_type_0_1 __r){typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type value_type;
__xcodeml_template_type_0_1 __s=__r;
try{{;for(;operator!=(__f,__l);((++__f),((void)(++__r)))){::new(static_cast<void(*)>((std::__1::addressof((*__r)))))__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::t((*__f));}};
}catch(...){{;for(;operator!=(__s,__r);(++__s)){(/*CPDE*/(__s).~typename iterator_traits<__xcodeml_template_type_0_1>::value_type());}};
throw;
}
;
return __r;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_2 uninitialized_copy_n(__xcodeml_template_type_0_0 __f,__xcodeml_template_type_0_1 __n,__xcodeml_template_type_0_2 __r){typedef typename iterator_traits<__xcodeml_template_type_0_2>::value_type value_type;
__xcodeml_template_type_0_2 __s=__r;
try{{;for(;operator>(__n,0);(((++__f),((void)(++__r))),((void)(--__n)))){::new(static_cast<void(*)>((std::__1::addressof((*__r)))))__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_2>::value_type>::t((*__f));}};
}catch(...){{;for(;operator!=(__s,__r);(++__s)){(/*CPDE*/(__s).~typename iterator_traits<__xcodeml_template_type_0_2>::value_type());}};
throw;
}
;
return __r;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void uninitialized_fill(__xcodeml_template_type_0_0 __f,__xcodeml_template_type_0_0 __l,__xcodeml_template_type_0_1 const&__x){typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type value_type;
__xcodeml_template_type_0_0 __s=__f;
try{{;for(;operator!=(__f,__l);(++__f)){::new(static_cast<void(*)>((std::__1::addressof((*__f)))))__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_0>::value_type>::t(__x);}};
}catch(...){{;for(;operator!=(__s,__f);(++__s)){(/*CPDE*/(__s).~typename iterator_traits<__xcodeml_template_type_0_0>::value_type());}};
throw;
}
;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_0 uninitialized_fill_n(__xcodeml_template_type_0_0 __f,__xcodeml_template_type_0_1 __n,__xcodeml_template_type_0_2 const&__x){typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type value_type;
__xcodeml_template_type_0_0 __s=__f;
try{{;for(;operator>(__n,0);((++__f),((void)(--__n)))){::new(static_cast<void(*)>((std::__1::addressof((*__f)))))__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_0>::value_type>::t(__x);}};
}catch(...){{;for(;operator!=(__s,__f);(++__s)){(/*CPDE*/(__s).~typename iterator_traits<__xcodeml_template_type_0_0>::value_type());}};
throw;
}
;
return __f;
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __libcpp_atomic_refcount_increment(__xcodeml_template_type_0_0&__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__atomic_add_fetch((&__t),1,0));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __libcpp_atomic_refcount_decrement(__xcodeml_template_type_0_0&__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__atomic_add_fetch((&__t),(-1),4));
}
class bad_weak_ptr:public exception{public:
public:virtual~bad_weak_ptr();
public:virtual char const(*what()const);
}
;
void __throw_bad_weak_ptr()/*gccattr noreturn:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{throw __xcodeml_identity<class::std::__1::bad_weak_ptr>::t();
}
template<typename __xcodeml_template_type_0_0>class weak_ptr/*gccattr type_visibility:*/;
;
class __shared_count{private:__shared_count(class __shared_count const&);
private:class::std::__1::__shared_count&operator=(class __shared_count const&);
protected:
protected:long __shared_owners_;
protected:virtual~__shared_count();
private:
private:virtual void __on_zero_shared()=0;
public:
public:__shared_count(long __refs):__shared_owners_(__refs)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:void __add_shared()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__libcpp_atomic_refcount_increment(this->__shared_owners_));
}
public:bool __release_shared()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(((__libcpp_atomic_refcount_decrement(this->__shared_owners_))==(-1))){{(this->__on_zero_shared());
return true;
};};
return false;
}
public:long use_count()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((__libcpp_relaxed_load((&this->__shared_owners_)))+1);
}
}
;
class __shared_weak_count:private __shared_count{private:long __shared_weak_owners_;
public:
public:__shared_weak_count(long __refs):__shared_count(__refs),__shared_weak_owners_(__refs)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
protected:
protected:virtual~__shared_weak_count();
public:
public:void __add_shared()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__shared_count::__add_shared());
}
public:void __add_weak()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__libcpp_atomic_refcount_increment(this->__shared_weak_owners_));
}
public:void __release_shared()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if((this->__shared_count::__release_shared())){(this->__release_weak());};
}
public:void __release_weak();
public:long use_count()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__shared_count::use_count());
}
public:class::std::__1::__shared_weak_count(*lock());
public:virtual void const(*__get_deleter(class type_info const&)const);
private:
private:virtual void __on_zero_shared_weak()=0;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __shared_ptr_pointer:public __shared_weak_count{private:__compressed_pair<__compressed_pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>,__xcodeml_template_type_0_2>__data_;
public:
public:__shared_ptr_pointer(__xcodeml_template_type_0_0 __p,__xcodeml_template_type_0_1 __d,__xcodeml_template_type_0_2 __a):__data_(__xcodeml_identity<__compressed_pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1> >::t(__p,(std::__1::move(__d)))(std::__1::move(__a)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:virtual void const(*__get_deleter(class type_info const&)const);
private:
private:virtual void __on_zero_shared();
private:virtual void __on_zero_shared_weak();
}
;
;
void const(*__shared_ptr_pointer::__get_deleter(class type_info const&__t)const){return(__t.operator==(typeid(__xcodeml_template_type_0_1))?(std::__1::addressof(((this->__data_.first()).second()))):nullptr);
}
void __shared_ptr_pointer::__on_zero_shared(){(((this->__data_.first()).second())(((this->__data_.first()).first())));
(/*CPDE*/(((this->__data_.first()).second())).~__xcodeml_template_type_0_1());
}
void __shared_ptr_pointer::__on_zero_shared_weak(){typedef typename __allocator_traits_rebind<__xcodeml_template_type_0_2,class __shared_ptr_pointer,expression>::type _Al;
typedef allocator_traits<typename __allocator_traits_rebind<__xcodeml_template_type_0_2,class __shared_ptr_pointer,expression>::type>_ATraits;
typedef pointer_traits<typename allocator_traits<typename __allocator_traits_rebind<__xcodeml_template_type_0_2,class __shared_ptr_pointer,expression>::type>::pointer>_PTraits;
typename __allocator_traits_rebind<__xcodeml_template_type_0_2,class __shared_ptr_pointer,expression>::type __a=(this->__data_.second());
(/*CPDE*/((this->__data_.second())).~__xcodeml_template_type_0_2());
(__a.deallocate((pointer_traits<typename allocator_traits<typename __allocator_traits_rebind<__xcodeml_template_type_0_2,class __shared_ptr_pointer,expression>::type>::pointer>::.pointer_to((*this))),1));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __shared_ptr_emplace:public __shared_weak_count{private:__compressed_pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_0>__data_;
public:
public:__shared_ptr_emplace(__xcodeml_template_type_0_1 __a):__data_((std::__1::move(__a)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename...__xcodeml_template_type_1_0>__shared_ptr_emplace(__xcodeml_template_type_0_1 __a,__xcodeml_template_type_1_0&& ...__args):__data_(piecewise_construct(std::__1::forward_as_tuple(__a))(std::__1::forward_as_tuple((std::__1::forward<__xcodeml_template_type_1_0...>(__args))...)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
private:
private:virtual void __on_zero_shared();
private:virtual void __on_zero_shared_weak();
public:
public:__xcodeml_template_type_0_0(*get())/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::addressof((this->__data_.second())));
}
}
;
;
void __shared_ptr_emplace::__on_zero_shared(){(/*CPDE*/((this->__data_.second())).~__xcodeml_template_type_0_0());
}
void __shared_ptr_emplace::__on_zero_shared_weak(){typedef typename __allocator_traits_rebind<__xcodeml_template_type_0_1,class __shared_ptr_emplace,expression>::type _Al;
typedef allocator_traits<typename __allocator_traits_rebind<__xcodeml_template_type_0_1,class __shared_ptr_emplace,expression>::type>_ATraits;
typedef pointer_traits<typename allocator_traits<typename __allocator_traits_rebind<__xcodeml_template_type_0_1,class __shared_ptr_emplace,expression>::type>::pointer>_PTraits;
typename __allocator_traits_rebind<__xcodeml_template_type_0_1,class __shared_ptr_emplace,expression>::type __a=(this->__data_.first());
(/*CPDE*/((this->__data_.first())).~__xcodeml_template_type_0_1());
(__a.deallocate((pointer_traits<typename allocator_traits<typename __allocator_traits_rebind<__xcodeml_template_type_0_1,class __shared_ptr_emplace,expression>::type>::pointer>::.pointer_to((*this))),1));
}
class __shared_ptr_dummy_rebind_allocator_type;
template<>class allocator<class::std::__1::__shared_ptr_dummy_rebind_allocator_type>{public:
public:template<typename __xcodeml_template_type_0_0>class rebind{public:typedef allocator<__xcodeml_template_type_0_0>other;
}
;
;
}
;
template<typename __xcodeml_template_type_0_0>class enable_shared_from_this/*gccattr type_visibility:*/;
;
template<typename __xcodeml_template_type_0_0>class shared_ptr{public:
public:typedef __xcodeml_template_type_0_0 element_type;
private:
private:__xcodeml_template_type_0_0(*__ptr_);
private:class::std::__1::__shared_weak_count(*__cntrl_);
private:class __nat{public:int __for_bool_;
}
;
public:
public:shared_ptr();
public:shared_ptr(nullptr_t);
public:template<typename __xcodeml_template_type_1_0>shared_ptr(__xcodeml_template_type_1_0(*__p),typename enable_if<expression,class::std::__1::shared_ptr::__nat>::type)
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>shared_ptr(__xcodeml_template_type_1_0(*__p),__xcodeml_template_type_1_1 __d,typename enable_if<expression,class::std::__1::shared_ptr::__nat>::type)
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename __xcodeml_template_type_1_2>shared_ptr(__xcodeml_template_type_1_0(*__p),__xcodeml_template_type_1_1 __d,__xcodeml_template_type_1_2 __a,typename enable_if<expression,class::std::__1::shared_ptr::__nat>::type)
public:template<typename __xcodeml_template_type_1_0>shared_ptr(nullptr_t __p,__xcodeml_template_type_1_0 __d)
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>shared_ptr(nullptr_t __p,__xcodeml_template_type_1_0 __d,__xcodeml_template_type_1_1 __a)
public:template<typename __xcodeml_template_type_1_0>shared_ptr(shared_ptr<__xcodeml_template_type_1_0>const&__r,__xcodeml_template_type_0_0(*__p))
public:shared_ptr(class shared_ptr const&__r);
public:template<typename __xcodeml_template_type_1_0>shared_ptr(shared_ptr<__xcodeml_template_type_1_0>const&__r,typename enable_if<expression,class::std::__1::shared_ptr::__nat>::type)
public:shared_ptr(class shared_ptr&& __r);
public:template<typename __xcodeml_template_type_1_0>shared_ptr(shared_ptr<__xcodeml_template_type_1_0>&& __r,typename enable_if<expression,class::std::__1::shared_ptr::__nat>::type)
public:template<typename __xcodeml_template_type_1_0>shared_ptr(weak_ptr<__xcodeml_template_type_1_0>const&__r,typename enable_if<expression,class::std::__1::shared_ptr::__nat>::type)
public:template<typename __xcodeml_template_type_1_0>shared_ptr(auto_ptr<__xcodeml_template_type_1_0>&& __r,typename enable_if<expression,class::std::__1::shared_ptr::__nat>::type)
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>shared_ptr(unique_ptr<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>&& ,typename enable_if<expression,class::std::__1::shared_ptr::__nat>::type)
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>shared_ptr(unique_ptr<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>&& ,typename enable_if<expression,class::std::__1::shared_ptr::__nat>::type)
public:~shared_ptr();
public:class shared_ptr&operator=(class shared_ptr const&__r);
public:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,class shared_ptr&>::type operator=(shared_ptr<__xcodeml_template_type_1_0>const&__r)
public:class shared_ptr&operator=(class shared_ptr&& __r);
public:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,class shared_ptr&>::type operator=(shared_ptr<__xcodeml_template_type_1_0>&& __r)
public:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,class shared_ptr>::type&operator=(auto_ptr<__xcodeml_template_type_1_0>&& __r)
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>typename enable_if<expression,class shared_ptr&>::type operator=(unique_ptr<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>&& __r)
public:void swap(class shared_ptr&__r);
public:void reset();
public:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,void>::type reset(__xcodeml_template_type_1_0(*__p))
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>typename enable_if<expression,void>::type reset(__xcodeml_template_type_1_0(*__p),__xcodeml_template_type_1_1 __d)
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename __xcodeml_template_type_1_2>typename enable_if<expression,void>::type reset(__xcodeml_template_type_1_0(*__p),__xcodeml_template_type_1_1 __d,__xcodeml_template_type_1_2 __a)
public:__xcodeml_template_type_0_0(*get()const)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__ptr_;
}
public:typename add_lvalue_reference<__xcodeml_template_type_0_0>::type operator*()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this->__ptr_);
}
public:__xcodeml_template_type_0_0(*operator->()const)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__ptr_;
}
public:long use_count()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__cntrl_?(this->__cntrl_->use_count()):0);
}
public:bool unique()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==((this->use_count()),1);
}
public:operator bool()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator!=((this->get()),0);
}
public:template<typename __xcodeml_template_type_1_0>bool owner_before(shared_ptr<__xcodeml_template_type_1_0>const&__p)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(this->__cntrl_,__p.__cntrl_);
}
public:template<typename __xcodeml_template_type_1_0>bool owner_before(weak_ptr<__xcodeml_template_type_1_0>const&__p)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(this->__cntrl_,__p.__cntrl_);
}
public:bool __owner_equivalent(class shared_ptr const&__p)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==(this->__cntrl_,__p.__cntrl_);
}
public:template<typename __xcodeml_template_type_1_0>__xcodeml_template_type_1_0(*__get_deleter()const)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<__xcodeml_template_type_1_0(*)>((this->__cntrl_?const_cast<void(*)>((this->__cntrl_->__get_deleter(typeid(__xcodeml_template_type_1_0)))):nullptr));
}
public:template<typename...__xcodeml_template_type_1_0>static class shared_ptr make_shared(__xcodeml_template_type_1_0&& ...__args)
public:template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1>static class shared_ptr allocate_shared(__xcodeml_template_type_1_0 const&__a,__xcodeml_template_type_1_1&& ...__args)
private:
private:template<typename __xcodeml_template_type_1_0,bool=is_function<__xcodeml_template_type_1_0>::value>class __shared_ptr_default_allocator{public:typedef allocator<__xcodeml_template_type_1_0>type;
}
;
;

/* Ignored a member with no access specifier template<typename __xcodeml_template_type_1_0>class __shared_ptr_default_allocator<__xcodeml_template_type_1_0,1>{public:typedef class::std::__1::allocator<class::std::__1::__shared_ptr_dummy_rebind_allocator_type>type;
}
;*/

private:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>typename enable_if<expression,void>::type __enable_weak_this(enable_shared_from_this<__xcodeml_template_type_1_0>const(*__e),__xcodeml_template_type_1_1(*__ptr))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename remove_cv<__xcodeml_template_type_1_0>::type _RawYp;
if((__e&&(__e.__weak_this_.expired()))){{(__e.__weak_this_=__xcodeml_identity<shared_ptr<typename remove_cv<__xcodeml_template_type_1_0>::type> >::t((*this),const_cast<typename remove_cv<__xcodeml_template_type_1_0>::type(*)>(static_cast<__xcodeml_template_type_1_0 const(*)>(__ptr))));
};};
}
private:void __enable_weak_this(...)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:friend template<typename __xcodeml_template_type_1_0>class shared_ptr/*gccattr type_visibility:*/;
;
public:friend template<typename __xcodeml_template_type_1_0>class weak_ptr/*gccattr type_visibility:*/;
;
}
;
;
shared_ptr::shared_ptr():__ptr_(0),__cntrl_(0)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
shared_ptr::shared_ptr(nullptr_t):__ptr_(0),__cntrl_(0)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
template<typename __xcodeml_template_type_1_0>shared_ptr::shared_ptr(__xcodeml_template_type_1_0(*__p),typename enable_if<expression,class::std::__1::shared_ptr::__nat>::type):__ptr_(__p){unique_ptr<__xcodeml_template_type_1_0,default_delete<__xcodeml_template_type_1_0> >__hold=__p;
typedef typename __shared_ptr_default_allocator<__xcodeml_template_type_1_0,expression>::type _AllocT;
typedef __shared_ptr_pointer<__xcodeml_template_type_1_0(*),default_delete<__xcodeml_template_type_1_0>,typename __shared_ptr_default_allocator<__xcodeml_template_type_1_0,expression>::type>_CntrlBlk;
(this->__cntrl_=new __xcodeml_identity<__shared_ptr_pointer<__xcodeml_template_type_1_0(*),default_delete<__xcodeml_template_type_1_0>,typename __shared_ptr_default_allocator<__xcodeml_template_type_1_0,expression>::type> >::t(__p,__xcodeml_identity<default_delete<__xcodeml_template_type_1_0> >::t(),__xcodeml_identity<typename __shared_ptr_default_allocator<__xcodeml_template_type_1_0,expression>::type>::t()));
(__hold.release());
(this->__enable_weak_this(__p,__p));
}
template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>shared_ptr::shared_ptr(__xcodeml_template_type_1_0(*__p),__xcodeml_template_type_1_1 __d,typename enable_if<expression,class::std::__1::shared_ptr::__nat>::type):__ptr_(__p){try{typedef typename __shared_ptr_default_allocator<__xcodeml_template_type_1_0,expression>::type _AllocT;
typedef __shared_ptr_pointer<__xcodeml_template_type_1_0(*),__xcodeml_template_type_1_1,typename __shared_ptr_default_allocator<__xcodeml_template_type_1_0,expression>::type>_CntrlBlk;
(this->__cntrl_=new __xcodeml_identity<__shared_ptr_pointer<__xcodeml_template_type_1_0(*),__xcodeml_template_type_1_1,typename __shared_ptr_default_allocator<__xcodeml_template_type_1_0,expression>::type> >::t(__p,__d,__xcodeml_identity<typename __shared_ptr_default_allocator<__xcodeml_template_type_1_0,expression>::type>::t()));
(this->__enable_weak_this(__p,__p));
}catch(...){(__d(__p));
throw;
}
;
}
template<typename __xcodeml_template_type_1_0>shared_ptr::shared_ptr(nullptr_t __p,__xcodeml_template_type_1_0 __d):__ptr_(0){try{typedef typename __shared_ptr_default_allocator<__xcodeml_template_type_0_0,expression>::type _AllocT;
typedef __shared_ptr_pointer<nullptr_t,__xcodeml_template_type_1_0,typename __shared_ptr_default_allocator<__xcodeml_template_type_0_0,expression>::type>_CntrlBlk;
(this->__cntrl_=new __xcodeml_identity<__shared_ptr_pointer<nullptr_t,__xcodeml_template_type_1_0,typename __shared_ptr_default_allocator<__xcodeml_template_type_0_0,expression>::type> >::t(__p,__d,__xcodeml_identity<typename __shared_ptr_default_allocator<__xcodeml_template_type_0_0,expression>::type>::t()));
}catch(...){(__d(__p));
throw;
}
;
}
template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename __xcodeml_template_type_1_2>shared_ptr::shared_ptr(__xcodeml_template_type_1_0(*__p),__xcodeml_template_type_1_1 __d,__xcodeml_template_type_1_2 __a,typename enable_if<expression,class::std::__1::shared_ptr::__nat>::type):__ptr_(__p){try{typedef __shared_ptr_pointer<__xcodeml_template_type_1_0(*),__xcodeml_template_type_1_1,__xcodeml_template_type_1_2>_CntrlBlk;
typedef typename __allocator_traits_rebind<__xcodeml_template_type_1_2,__shared_ptr_pointer<__xcodeml_template_type_1_0(*),__xcodeml_template_type_1_1,__xcodeml_template_type_1_2>,expression>::type _A2;
typedef __allocator_destructor<typename __allocator_traits_rebind<__xcodeml_template_type_1_2,__shared_ptr_pointer<__xcodeml_template_type_1_0(*),__xcodeml_template_type_1_1,__xcodeml_template_type_1_2>,expression>::type>_D2;
typename __allocator_traits_rebind<__xcodeml_template_type_1_2,__shared_ptr_pointer<__xcodeml_template_type_1_0(*),__xcodeml_template_type_1_1,__xcodeml_template_type_1_2>,expression>::type __a2=__a;
unique_ptr<__shared_ptr_pointer<__xcodeml_template_type_1_0(*),__xcodeml_template_type_1_1,__xcodeml_template_type_1_2>,__allocator_destructor<typename __allocator_traits_rebind<__xcodeml_template_type_1_2,__shared_ptr_pointer<__xcodeml_template_type_1_0(*),__xcodeml_template_type_1_1,__xcodeml_template_type_1_2>,expression>::type> >__hold2=(__a2.allocate(1))__xcodeml_identity<__allocator_destructor<typename __allocator_traits_rebind<__xcodeml_template_type_1_2,__shared_ptr_pointer<__xcodeml_template_type_1_0(*),__xcodeml_template_type_1_1,__xcodeml_template_type_1_2>,expression>::type> >::t(__a2,1);
::new(static_cast<void(*)>((std::__1::addressof((*(__hold2.get()))))))__xcodeml_identity<__shared_ptr_pointer<__xcodeml_template_type_1_0(*),__xcodeml_template_type_1_1,__xcodeml_template_type_1_2> >::t(__p,__d,__a);
(this->__cntrl_=(std::__1::addressof((*(__hold2.release())))));
(this->__enable_weak_this(__p,__p));
}catch(...){(__d(__p));
throw;
}
;
}
template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>shared_ptr::shared_ptr(nullptr_t __p,__xcodeml_template_type_1_0 __d,__xcodeml_template_type_1_1 __a):__ptr_(0){try{typedef __shared_ptr_pointer<nullptr_t,__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>_CntrlBlk;
typedef typename __allocator_traits_rebind<__xcodeml_template_type_1_1,__shared_ptr_pointer<nullptr_t,__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>,expression>::type _A2;
typedef __allocator_destructor<typename __allocator_traits_rebind<__xcodeml_template_type_1_1,__shared_ptr_pointer<nullptr_t,__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>,expression>::type>_D2;
typename __allocator_traits_rebind<__xcodeml_template_type_1_1,__shared_ptr_pointer<nullptr_t,__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>,expression>::type __a2=__a;
unique_ptr<__shared_ptr_pointer<nullptr_t,__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>,__allocator_destructor<typename __allocator_traits_rebind<__xcodeml_template_type_1_1,__shared_ptr_pointer<nullptr_t,__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>,expression>::type> >__hold2=(__a2.allocate(1))__xcodeml_identity<__allocator_destructor<typename __allocator_traits_rebind<__xcodeml_template_type_1_1,__shared_ptr_pointer<nullptr_t,__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>,expression>::type> >::t(__a2,1);
::new(static_cast<void(*)>((std::__1::addressof((*(__hold2.get()))))))__xcodeml_identity<__shared_ptr_pointer<nullptr_t,__xcodeml_template_type_1_0,__xcodeml_template_type_1_1> >::t(__p,__d,__a);
(this->__cntrl_=(std::__1::addressof((*(__hold2.release())))));
}catch(...){(__d(__p));
throw;
}
;
}
template<typename __xcodeml_template_type_1_0>shared_ptr::shared_ptr(shared_ptr<__xcodeml_template_type_1_0>const&__r,__xcodeml_template_type_0_0(*__p)):__ptr_(__p),__cntrl_(__r.__cntrl_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(this->__cntrl_){(this->__cntrl_->__add_shared());};
}
shared_ptr::shared_ptr(class shared_ptr const&__r):__ptr_(__r.__ptr_),__cntrl_(__r.__cntrl_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(this->__cntrl_){(this->__cntrl_->__add_shared());};
}
template<typename __xcodeml_template_type_1_0>shared_ptr::shared_ptr(shared_ptr<__xcodeml_template_type_1_0>const&__r,typename enable_if<expression,class::std::__1::shared_ptr::__nat>::type):__ptr_(__r.__ptr_),__cntrl_(__r.__cntrl_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(this->__cntrl_){(this->__cntrl_->__add_shared());};
}
shared_ptr::shared_ptr(class shared_ptr&& __r):__ptr_(__r.__ptr_),__cntrl_(__r.__cntrl_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__r.__ptr_=0);
(__r.__cntrl_=0);
}
template<typename __xcodeml_template_type_1_0>shared_ptr::shared_ptr(shared_ptr<__xcodeml_template_type_1_0>&& __r,typename enable_if<expression,class::std::__1::shared_ptr::__nat>::type):__ptr_(__r.__ptr_),__cntrl_(__r.__cntrl_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__r.__ptr_=0);
(__r.__cntrl_=0);
}
template<typename __xcodeml_template_type_1_0>shared_ptr::shared_ptr(auto_ptr<__xcodeml_template_type_1_0>&& __r,typename enable_if<expression,class::std::__1::shared_ptr::__nat>::type):__ptr_((__r.get())){typedef __shared_ptr_pointer<__xcodeml_template_type_1_0(*),default_delete<__xcodeml_template_type_1_0>,allocator<__xcodeml_template_type_1_0> >_CntrlBlk;
(this->__cntrl_=new __xcodeml_identity<__shared_ptr_pointer<__xcodeml_template_type_1_0(*),default_delete<__xcodeml_template_type_1_0>,allocator<__xcodeml_template_type_1_0> > >::t((__r.get()),__xcodeml_identity<default_delete<__xcodeml_template_type_1_0> >::t(),__xcodeml_identity<allocator<__xcodeml_template_type_1_0> >::t()));
(this->__enable_weak_this((__r.get()),(__r.get())));
(__r.release());
}
template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>shared_ptr::shared_ptr(unique_ptr<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>&& __r,typename enable_if<expression,class::std::__1::shared_ptr::__nat>::type):__ptr_((__r.get())){{typedef typename __shared_ptr_default_allocator<__xcodeml_template_type_1_0,expression>::type _AllocT;
typedef __shared_ptr_pointer<__xcodeml_template_type_1_0(*),__xcodeml_template_type_1_1,typename __shared_ptr_default_allocator<__xcodeml_template_type_1_0,expression>::type>_CntrlBlk;
(this->__cntrl_=new __xcodeml_identity<__shared_ptr_pointer<__xcodeml_template_type_1_0(*),__xcodeml_template_type_1_1,typename __shared_ptr_default_allocator<__xcodeml_template_type_1_0,expression>::type> >::t((__r.get()),(__r.get_deleter()),__xcodeml_identity<typename __shared_ptr_default_allocator<__xcodeml_template_type_1_0,expression>::type>::t()));
(this->__enable_weak_this((__r.get()),(__r.get())));
};
(__r.release());
}
template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>shared_ptr::shared_ptr(unique_ptr<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>&& __r,typename enable_if<expression,class::std::__1::shared_ptr::__nat>::type):__ptr_((__r.get())){{typedef typename __shared_ptr_default_allocator<__xcodeml_template_type_1_0,expression>::type _AllocT;
typedef __shared_ptr_pointer<__xcodeml_template_type_1_0(*),reference_wrapper<typename remove_reference<__xcodeml_template_type_1_1>::type>,typename __shared_ptr_default_allocator<__xcodeml_template_type_1_0,expression>::type>_CntrlBlk;
(this->__cntrl_=new __xcodeml_identity<__shared_ptr_pointer<__xcodeml_template_type_1_0(*),reference_wrapper<typename remove_reference<__xcodeml_template_type_1_1>::type>,typename __shared_ptr_default_allocator<__xcodeml_template_type_1_0,expression>::type> >::t((__r.get()),(ref((__r.get_deleter()))),__xcodeml_identity<typename __shared_ptr_default_allocator<__xcodeml_template_type_1_0,expression>::type>::t()));
(this->__enable_weak_this((__r.get()),(__r.get())));
};
(__r.release());
}
template<typename...__xcodeml_template_type_1_0>class shared_ptr shared_ptr::make_shared(__xcodeml_template_type_1_0&& ...__args){static_assert(is_constructible<__xcodeml_template_type_0_0,__xcodeml_template_type_1_0...>/*packsize1*/::value,"Can't construct object in make_shared");
typedef __shared_ptr_emplace<__xcodeml_template_type_0_0,allocator<__xcodeml_template_type_0_0> >_CntrlBlk;
typedef allocator<__shared_ptr_emplace<__xcodeml_template_type_0_0,allocator<__xcodeml_template_type_0_0> > >_A2;
typedef __allocator_destructor<allocator<__shared_ptr_emplace<__xcodeml_template_type_0_0,allocator<__xcodeml_template_type_0_0> > > >_D2;
allocator<__shared_ptr_emplace<__xcodeml_template_type_0_0,allocator<__xcodeml_template_type_0_0> > >__a2;
unique_ptr<__shared_ptr_emplace<__xcodeml_template_type_0_0,allocator<__xcodeml_template_type_0_0> >,__allocator_destructor<allocator<__shared_ptr_emplace<__xcodeml_template_type_0_0,allocator<__xcodeml_template_type_0_0> > > > >__hold2=(__a2.allocate(1))__xcodeml_identity<__allocator_destructor<allocator<__shared_ptr_emplace<__xcodeml_template_type_0_0,allocator<__xcodeml_template_type_0_0> > > > >::t(__a2,1);
::new((__hold2.get()))__xcodeml_identity<__shared_ptr_emplace<__xcodeml_template_type_0_0,allocator<__xcodeml_template_type_0_0> > >::t(__a2,(std::__1::forward<__xcodeml_template_type_1_0...>(__args))...);
class shared_ptr __r;
(__r.__ptr_=((__hold2.get()).get()));
(__r.__cntrl_=(__hold2.release()));
(__r.__enable_weak_this(__r.__ptr_,__r.__ptr_));
return __r;
}
template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1>class shared_ptr shared_ptr::allocate_shared(__xcodeml_template_type_1_0 const&__a,__xcodeml_template_type_1_1&& ...__args){static_assert(is_constructible<__xcodeml_template_type_0_0,__xcodeml_template_type_1_1...>/*packsize1*/::value,"Can't construct object in allocate_shared");
typedef __shared_ptr_emplace<__xcodeml_template_type_0_0,__xcodeml_template_type_1_0>_CntrlBlk;
typedef typename __allocator_traits_rebind<__xcodeml_template_type_1_0,__shared_ptr_emplace<__xcodeml_template_type_0_0,__xcodeml_template_type_1_0>,expression>::type _A2;
typedef __allocator_destructor<typename __allocator_traits_rebind<__xcodeml_template_type_1_0,__shared_ptr_emplace<__xcodeml_template_type_0_0,__xcodeml_template_type_1_0>,expression>::type>_D2;
typename __allocator_traits_rebind<__xcodeml_template_type_1_0,__shared_ptr_emplace<__xcodeml_template_type_0_0,__xcodeml_template_type_1_0>,expression>::type __a2=__a;
unique_ptr<__shared_ptr_emplace<__xcodeml_template_type_0_0,__xcodeml_template_type_1_0>,__allocator_destructor<typename __allocator_traits_rebind<__xcodeml_template_type_1_0,__shared_ptr_emplace<__xcodeml_template_type_0_0,__xcodeml_template_type_1_0>,expression>::type> >__hold2=(__a2.allocate(1))__xcodeml_identity<__allocator_destructor<typename __allocator_traits_rebind<__xcodeml_template_type_1_0,__shared_ptr_emplace<__xcodeml_template_type_0_0,__xcodeml_template_type_1_0>,expression>::type> >::t(__a2,1);
::new(static_cast<void(*)>((std::__1::addressof((*(__hold2.get()))))))__xcodeml_identity<__shared_ptr_emplace<__xcodeml_template_type_0_0,__xcodeml_template_type_1_0> >::t(__a,(std::__1::forward<__xcodeml_template_type_1_1...>(__args))...);
class shared_ptr __r;
(__r.__ptr_=((__hold2.get()).get()));
(__r.__cntrl_=(std::__1::addressof((*(__hold2.release())))));
(__r.__enable_weak_this(__r.__ptr_,__r.__ptr_));
return __r;
}
shared_ptr::~shared_ptr(){if(this->__cntrl_){(this->__cntrl_->__release_shared());};
}
class shared_ptr&shared_ptr::operator=(class shared_ptr const&__r)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__xcodeml_identity<class shared_ptr>::t(__r).swap((*this)));
return(*this);
}
template<typename __xcodeml_template_type_1_0>typename enable_if<expression,class shared_ptr&>::type shared_ptr::operator=(shared_ptr<__xcodeml_template_type_1_0>const&__r)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__xcodeml_identity<class shared_ptr>::t(__r).swap((*this)));
return(*this);
}
class shared_ptr&shared_ptr::operator=(class shared_ptr&& __r)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__xcodeml_identity<class shared_ptr>::t((std::__1::move(__r))).swap((*this)));
return(*this);
}
template<typename __xcodeml_template_type_1_0>typename enable_if<expression,class shared_ptr&>::type shared_ptr::operator=(shared_ptr<__xcodeml_template_type_1_0>&& __r)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__xcodeml_identity<class shared_ptr>::t((std::__1::move(__r))).swap((*this)));
return(*this);
}
template<typename __xcodeml_template_type_1_0>typename enable_if<expression,class shared_ptr>::type&shared_ptr::operator=(auto_ptr<__xcodeml_template_type_1_0>&& __r)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__xcodeml_identity<class shared_ptr>::t((std::__1::move(__r))).swap((*this)));
return(*this);
}
template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>typename enable_if<expression,class shared_ptr&>::type shared_ptr::operator=(unique_ptr<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1>&& __r)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__xcodeml_identity<class shared_ptr>::t((std::__1::move(__r))).swap((*this)));
return(*this);
}
void shared_ptr::swap(class shared_ptr&__r)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::swap(this->__ptr_,__r.__ptr_));
(std::__1::swap(this->__cntrl_,__r.__cntrl_));
}
void shared_ptr::reset()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__xcodeml_identity<class shared_ptr>::t().swap((*this)));
}
template<typename __xcodeml_template_type_1_0>typename enable_if<expression,void>::type shared_ptr::reset(__xcodeml_template_type_1_0(*__p))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__xcodeml_identity<class shared_ptr>::t(__p).swap((*this)));
}
template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>typename enable_if<expression,void>::type shared_ptr::reset(__xcodeml_template_type_1_0(*__p),__xcodeml_template_type_1_1 __d)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__xcodeml_identity<class shared_ptr>::t(__p,__d).swap((*this)));
}
template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename __xcodeml_template_type_1_2>typename enable_if<expression,void>::type shared_ptr::reset(__xcodeml_template_type_1_0(*__p),__xcodeml_template_type_1_1 __d,__xcodeml_template_type_1_2 __a)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__xcodeml_identity<class shared_ptr>::t(__p,__d,__a).swap((*this)));
}
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>typename enable_if<expression,shared_ptr<__xcodeml_template_type_0_0> >::type make_shared(__xcodeml_template_type_0_1&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(shared_ptr<__xcodeml_template_type_0_0>::make_shared((std::__1::forward<__xcodeml_template_type_0_1...>(__args))...));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>typename enable_if<expression,shared_ptr<__xcodeml_template_type_0_0> >::type allocate_shared(__xcodeml_template_type_0_1 const&__a,__xcodeml_template_type_0_2&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(shared_ptr<__xcodeml_template_type_0_0>::allocate_shared(__a,(std::__1::forward<__xcodeml_template_type_0_2...>(__args))...));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator==(shared_ptr<__xcodeml_template_type_0_0>const&__x,shared_ptr<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==((__x.get()),(__y.get()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator!=(shared_ptr<__xcodeml_template_type_0_0>const&__x,shared_ptr<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator==(__x,__y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator<(shared_ptr<__xcodeml_template_type_0_0>const&__x,shared_ptr<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename common_type<__xcodeml_template_type_0_0(*),__xcodeml_template_type_0_1(*)>/*packsize2*/::type _Vp;
return(__xcodeml_identity<less<typename common_type<__xcodeml_template_type_0_0(*),__xcodeml_template_type_0_1(*)>/*packsize2*/::type> >::t()((__x.get()),(__y.get())));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator>(shared_ptr<__xcodeml_template_type_0_0>const&__x,shared_ptr<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(__y,__x);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator<=(shared_ptr<__xcodeml_template_type_0_0>const&__x,shared_ptr<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(__y,__x));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator>=(shared_ptr<__xcodeml_template_type_0_0>const&__x,shared_ptr<__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(__x,__y));
}
template<typename __xcodeml_template_type_0_0>bool operator==(shared_ptr<__xcodeml_template_type_0_0>const&__x,nullptr_t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!__x);
}
template<typename __xcodeml_template_type_0_0>bool operator==(nullptr_t,shared_ptr<__xcodeml_template_type_0_0>const&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!__x);
}
template<typename __xcodeml_template_type_0_0>bool operator!=(shared_ptr<__xcodeml_template_type_0_0>const&__x,nullptr_t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<bool>(__x);
}
template<typename __xcodeml_template_type_0_0>bool operator!=(nullptr_t,shared_ptr<__xcodeml_template_type_0_0>const&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<bool>(__x);
}
template<typename __xcodeml_template_type_0_0>bool operator<(shared_ptr<__xcodeml_template_type_0_0>const&__x,nullptr_t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__xcodeml_identity<less<__xcodeml_template_type_0_0(*)> >::t()((__x.get()),nullptr));
}
template<typename __xcodeml_template_type_0_0>bool operator<(nullptr_t,shared_ptr<__xcodeml_template_type_0_0>const&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__xcodeml_identity<less<__xcodeml_template_type_0_0(*)> >::t()(nullptr,(__x.get())));
}
template<typename __xcodeml_template_type_0_0>bool operator>(shared_ptr<__xcodeml_template_type_0_0>const&__x,nullptr_t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(nullptr,__x);
}
template<typename __xcodeml_template_type_0_0>bool operator>(nullptr_t,shared_ptr<__xcodeml_template_type_0_0>const&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(__x,nullptr);
}
template<typename __xcodeml_template_type_0_0>bool operator<=(shared_ptr<__xcodeml_template_type_0_0>const&__x,nullptr_t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(nullptr,__x));
}
template<typename __xcodeml_template_type_0_0>bool operator<=(nullptr_t,shared_ptr<__xcodeml_template_type_0_0>const&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(__x,nullptr));
}
template<typename __xcodeml_template_type_0_0>bool operator>=(shared_ptr<__xcodeml_template_type_0_0>const&__x,nullptr_t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(__x,nullptr));
}
template<typename __xcodeml_template_type_0_0>bool operator>=(nullptr_t,shared_ptr<__xcodeml_template_type_0_0>const&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(nullptr,__x));
}
template<typename __xcodeml_template_type_0_0>void swap(shared_ptr<__xcodeml_template_type_0_0>&__x,shared_ptr<__xcodeml_template_type_0_0>&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__x.swap(__y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename enable_if<expression,shared_ptr<__xcodeml_template_type_0_0> >::type static_pointer_cast(shared_ptr<__xcodeml_template_type_0_1>const&__r)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<shared_ptr<__xcodeml_template_type_0_0> >::t(__r,static_cast<__xcodeml_template_type_0_0(*)>((__r.get())));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename enable_if<expression,shared_ptr<__xcodeml_template_type_0_0> >::type dynamic_pointer_cast(shared_ptr<__xcodeml_template_type_0_1>const&__r)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{__xcodeml_template_type_0_0(*__p)=dynamic_cast<__xcodeml_template_type_0_0(*)>((__r.get()));
return(__p?__xcodeml_identity<shared_ptr<__xcodeml_template_type_0_0> >::t(__r,__p):__xcodeml_identity<shared_ptr<__xcodeml_template_type_0_0> >::t());
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename enable_if<expression,shared_ptr<__xcodeml_template_type_0_0> >::type const_pointer_cast(shared_ptr<__xcodeml_template_type_0_1>const&__r){typedef typename remove_extent<__xcodeml_template_type_0_0>::type _RTp;
return __xcodeml_identity<shared_ptr<__xcodeml_template_type_0_0> >::t(__r,const_cast<typename remove_extent<__xcodeml_template_type_0_0>::type(*)>((__r.get())));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0(*get_deleter(shared_ptr<__xcodeml_template_type_0_1>const&__p))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__p.__get_deleter());
}
template<typename __xcodeml_template_type_0_0>class weak_ptr{public:
public:typedef __xcodeml_template_type_0_0 element_type;
private:
private:__xcodeml_template_type_0_0(*__ptr_);
private:class::std::__1::__shared_weak_count(*__cntrl_);
public:
public:weak_ptr();
public:template<typename __xcodeml_template_type_1_0>weak_ptr(shared_ptr<__xcodeml_template_type_1_0>const&__r,typename enable_if<expression,class::std::__1::__nat(*)>::type)
public:weak_ptr(class weak_ptr const&__r);
public:template<typename __xcodeml_template_type_1_0>weak_ptr(weak_ptr<__xcodeml_template_type_1_0>const&__r,typename enable_if<expression,class::std::__1::__nat(*)>::type)
public:weak_ptr(class weak_ptr&& __r);
public:template<typename __xcodeml_template_type_1_0>weak_ptr(weak_ptr<__xcodeml_template_type_1_0>&& __r,typename enable_if<expression,class::std::__1::__nat(*)>::type)
public:~weak_ptr();
public:class weak_ptr&operator=(class weak_ptr const&__r);
public:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,class weak_ptr&>::type operator=(weak_ptr<__xcodeml_template_type_1_0>const&__r)
public:class weak_ptr&operator=(class weak_ptr&& __r);
public:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,class weak_ptr&>::type operator=(weak_ptr<__xcodeml_template_type_1_0>&& __r)
public:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,class weak_ptr&>::type operator=(shared_ptr<__xcodeml_template_type_1_0>const&__r)
public:void swap(class weak_ptr&__r);
public:void reset();
public:long use_count()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__cntrl_?(this->__cntrl_->use_count()):0);
}
public:bool expired()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(operator==(this->__cntrl_,0)||((this->__cntrl_->use_count())==0));
}
public:shared_ptr<__xcodeml_template_type_0_0>lock()const;
public:template<typename __xcodeml_template_type_1_0>bool owner_before(shared_ptr<__xcodeml_template_type_1_0>const&__r)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(this->__cntrl_,__r.__cntrl_);
}
public:template<typename __xcodeml_template_type_1_0>bool owner_before(weak_ptr<__xcodeml_template_type_1_0>const&__r)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(this->__cntrl_,__r.__cntrl_);
}
public:friend template<typename __xcodeml_template_type_1_0>class weak_ptr/*gccattr type_visibility:*/;
;
public:friend template<typename __xcodeml_template_type_1_0>class shared_ptr/*gccattr type_visibility:*/;
;
}
;
;
weak_ptr::weak_ptr():__ptr_(0),__cntrl_(0)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
weak_ptr::weak_ptr(class weak_ptr const&__r):__ptr_(__r.__ptr_),__cntrl_(__r.__cntrl_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(this->__cntrl_){(this->__cntrl_->__add_weak());};
}
template<typename __xcodeml_template_type_1_0>weak_ptr::weak_ptr(shared_ptr<__xcodeml_template_type_1_0>const&__r,typename enable_if<expression,class::std::__1::__nat(*)>::type):__ptr_(__r.__ptr_),__cntrl_(__r.__cntrl_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(this->__cntrl_){(this->__cntrl_->__add_weak());};
}
template<typename __xcodeml_template_type_1_0>weak_ptr::weak_ptr(weak_ptr<__xcodeml_template_type_1_0>const&__r,typename enable_if<expression,class::std::__1::__nat(*)>::type):__ptr_(__r.__ptr_),__cntrl_(__r.__cntrl_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(this->__cntrl_){(this->__cntrl_->__add_weak());};
}
weak_ptr::weak_ptr(class weak_ptr&& __r):__ptr_(__r.__ptr_),__cntrl_(__r.__cntrl_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__r.__ptr_=0);
(__r.__cntrl_=0);
}
template<typename __xcodeml_template_type_1_0>weak_ptr::weak_ptr(weak_ptr<__xcodeml_template_type_1_0>&& __r,typename enable_if<expression,class::std::__1::__nat(*)>::type):__ptr_(__r.__ptr_),__cntrl_(__r.__cntrl_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__r.__ptr_=0);
(__r.__cntrl_=0);
}
weak_ptr::~weak_ptr(){if(this->__cntrl_){(this->__cntrl_->__release_weak());};
}
class weak_ptr&weak_ptr::operator=(class weak_ptr const&__r)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__xcodeml_identity<class weak_ptr>::t(__r).swap((*this)));
return(*this);
}
template<typename __xcodeml_template_type_1_0>typename enable_if<expression,class weak_ptr&>::type weak_ptr::operator=(weak_ptr<__xcodeml_template_type_1_0>const&__r)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__xcodeml_identity<class weak_ptr>::t(__r).swap((*this)));
return(*this);
}
class weak_ptr&weak_ptr::operator=(class weak_ptr&& __r)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__xcodeml_identity<class weak_ptr>::t((std::__1::move(__r))).swap((*this)));
return(*this);
}
template<typename __xcodeml_template_type_1_0>typename enable_if<expression,class weak_ptr&>::type weak_ptr::operator=(weak_ptr<__xcodeml_template_type_1_0>&& __r)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__xcodeml_identity<class weak_ptr>::t((std::__1::move(__r))).swap((*this)));
return(*this);
}
template<typename __xcodeml_template_type_1_0>typename enable_if<expression,class weak_ptr&>::type weak_ptr::operator=(shared_ptr<__xcodeml_template_type_1_0>const&__r)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__xcodeml_identity<class weak_ptr>::t(__r).swap((*this)));
return(*this);
}
void weak_ptr::swap(class weak_ptr&__r)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::swap(this->__ptr_,__r.__ptr_));
(std::__1::swap(this->__cntrl_,__r.__cntrl_));
}
template<typename __xcodeml_template_type_0_0>void swap(weak_ptr<__xcodeml_template_type_0_0>&__x,weak_ptr<__xcodeml_template_type_0_0>&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__x.swap(__y));
}
void weak_ptr::reset()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__xcodeml_identity<class weak_ptr>::t().swap((*this)));
}
template<typename __xcodeml_template_type_1_0>shared_ptr::shared_ptr(weak_ptr<__xcodeml_template_type_1_0>const&__r,typename enable_if<expression,class::std::__1::shared_ptr::__nat>::type):__ptr_(__r.__ptr_),__cntrl_((__r.__cntrl_?(__r.__cntrl_.lock()):__r.__cntrl_)){if(operator==(this->__cntrl_,0)){(__throw_bad_weak_ptr());};
}
shared_ptr<__xcodeml_template_type_0_0>weak_ptr::lock()const{shared_ptr<__xcodeml_template_type_0_0>__r;
(__r.__cntrl_=(this->__cntrl_?(this->__cntrl_->lock()):this->__cntrl_));
if(__r.__cntrl_){(__r.__ptr_=this->__ptr_);};
return __r;
}
template<typename __xcodeml_template_type_0_0>class owner_less;
;
template<typename __xcodeml_template_type_0_0>class owner_less<shared_ptr<__xcodeml_template_type_0_0> >:public binary_function<shared_ptr<__xcodeml_template_type_0_0>,shared_ptr<__xcodeml_template_type_0_0>,bool>{public:typedef bool result_type;
public:bool operator()(shared_ptr<__xcodeml_template_type_0_0>const&__x,shared_ptr<__xcodeml_template_type_0_0>const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__x.owner_before(__y));
}
public:bool operator()(shared_ptr<__xcodeml_template_type_0_0>const&__x,weak_ptr<__xcodeml_template_type_0_0>const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__x.owner_before(__y));
}
public:bool operator()(weak_ptr<__xcodeml_template_type_0_0>const&__x,shared_ptr<__xcodeml_template_type_0_0>const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__x.owner_before(__y));
}
}
;
template<typename __xcodeml_template_type_0_0>class owner_less<weak_ptr<__xcodeml_template_type_0_0> >:public binary_function<weak_ptr<__xcodeml_template_type_0_0>,weak_ptr<__xcodeml_template_type_0_0>,bool>{public:typedef bool result_type;
public:bool operator()(weak_ptr<__xcodeml_template_type_0_0>const&__x,weak_ptr<__xcodeml_template_type_0_0>const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__x.owner_before(__y));
}
public:bool operator()(shared_ptr<__xcodeml_template_type_0_0>const&__x,weak_ptr<__xcodeml_template_type_0_0>const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__x.owner_before(__y));
}
public:bool operator()(weak_ptr<__xcodeml_template_type_0_0>const&__x,shared_ptr<__xcodeml_template_type_0_0>const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__x.owner_before(__y));
}
}
;
template<typename __xcodeml_template_type_0_0>class enable_shared_from_this{private:weak_ptr<__xcodeml_template_type_0_0>__weak_this_;
protected:
protected:enable_shared_from_this()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
protected:enable_shared_from_this(class enable_shared_from_this const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
protected:class enable_shared_from_this&operator=(class enable_shared_from_this const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this);
}
protected:~enable_shared_from_this()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:
public:shared_ptr<__xcodeml_template_type_0_0>shared_from_this()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<shared_ptr<__xcodeml_template_type_0_0> >::t(this->__weak_this_);
}
public:shared_ptr<__xcodeml_template_type_0_0 const>shared_from_this()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<shared_ptr<__xcodeml_template_type_0_0 const> >::t(this->__weak_this_);
}
public:friend template<typename __xcodeml_template_type_1_0>class shared_ptr/*gccattr type_visibility:*/;
;
}
;
;
template<typename __xcodeml_template_type_0_0>class hash<shared_ptr<__xcodeml_template_type_0_0> >{public:typedef shared_ptr<__xcodeml_template_type_0_0>argument_type;
public:typedef unsigned long result_type;
public:unsigned long operator()(shared_ptr<__xcodeml_template_type_0_0>const&__ptr)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__xcodeml_identity<hash<__xcodeml_template_type_0_0(*)> >::t()((__ptr.get())));
}
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>basic_ostream<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&operator<<(basic_ostream<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&__os,shared_ptr<__xcodeml_template_type_0_2>const&__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/
class __sp_mut{private:void(*__lx);
public:
public:void lock();
public:void unlock();
private:
private:__sp_mut(void(*));
private:__sp_mut(class __sp_mut const&);
private:class::std::__1::__sp_mut&operator=(class __sp_mut const&);
public:friend class::std::__1::__sp_mut&__get_sp_mut(void const(*))/*gccattr visibility:*/;
}
;
class::std::__1::__sp_mut&__get_sp_mut(void const(*))/*gccattr visibility:*/;
template<typename __xcodeml_template_type_0_0>bool atomic_is_lock_free(shared_ptr<__xcodeml_template_type_0_0>const(*))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return false;
}
template<typename __xcodeml_template_type_0_0>shared_ptr<__xcodeml_template_type_0_0>atomic_load(shared_ptr<__xcodeml_template_type_0_0>const(*__p)){class::std::__1::__sp_mut&__m=(__get_sp_mut(__p));
(__m.lock());
shared_ptr<__xcodeml_template_type_0_0>__q=(*__p);
(__m.unlock());
return __q;
}
template<typename __xcodeml_template_type_0_0>shared_ptr<__xcodeml_template_type_0_0>atomic_load_explicit(shared_ptr<__xcodeml_template_type_0_0>const(*__p),enum memory_order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(atomic_load(__p));
}
template<typename __xcodeml_template_type_0_0>void atomic_store(shared_ptr<__xcodeml_template_type_0_0>(*__p),shared_ptr<__xcodeml_template_type_0_0>__r){class::std::__1::__sp_mut&__m=(__get_sp_mut(__p));
(__m.lock());
(__p.swap(__r));
(__m.unlock());
}
template<typename __xcodeml_template_type_0_0>void atomic_store_explicit(shared_ptr<__xcodeml_template_type_0_0>(*__p),shared_ptr<__xcodeml_template_type_0_0>__r,enum memory_order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(atomic_store(__p,__r));
}
template<typename __xcodeml_template_type_0_0>shared_ptr<__xcodeml_template_type_0_0>atomic_exchange(shared_ptr<__xcodeml_template_type_0_0>(*__p),shared_ptr<__xcodeml_template_type_0_0>__r){class::std::__1::__sp_mut&__m=(__get_sp_mut(__p));
(__m.lock());
(__p.swap(__r));
(__m.unlock());
return __r;
}
template<typename __xcodeml_template_type_0_0>shared_ptr<__xcodeml_template_type_0_0>atomic_exchange_explicit(shared_ptr<__xcodeml_template_type_0_0>(*__p),shared_ptr<__xcodeml_template_type_0_0>__r,enum memory_order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(atomic_exchange(__p,__r));
}
template<typename __xcodeml_template_type_0_0>bool atomic_compare_exchange_strong(shared_ptr<__xcodeml_template_type_0_0>(*__p),shared_ptr<__xcodeml_template_type_0_0>(*__v),shared_ptr<__xcodeml_template_type_0_0>__w){shared_ptr<__xcodeml_template_type_0_0>__temp;
class::std::__1::__sp_mut&__m=(__get_sp_mut(__p));
(__m.lock());
if((__p.__owner_equivalent((*__v)))){{(std::__1::swap(__temp,(*__p)));
((*__p)=__w);
(__m.unlock());
return true;
};};
(std::__1::swap(__temp,(*__v)));
((*__v)=(*__p));
(__m.unlock());
return false;
}
template<typename __xcodeml_template_type_0_0>bool atomic_compare_exchange_weak(shared_ptr<__xcodeml_template_type_0_0>(*__p),shared_ptr<__xcodeml_template_type_0_0>(*__v),shared_ptr<__xcodeml_template_type_0_0>__w)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(atomic_compare_exchange_strong(__p,__v,__w));
}
template<typename __xcodeml_template_type_0_0>bool atomic_compare_exchange_strong_explicit(shared_ptr<__xcodeml_template_type_0_0>(*__p),shared_ptr<__xcodeml_template_type_0_0>(*__v),shared_ptr<__xcodeml_template_type_0_0>__w,enum memory_order,enum memory_order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(atomic_compare_exchange_strong(__p,__v,__w));
}
template<typename __xcodeml_template_type_0_0>bool atomic_compare_exchange_weak_explicit(shared_ptr<__xcodeml_template_type_0_0>(*__p),shared_ptr<__xcodeml_template_type_0_0>(*__v),shared_ptr<__xcodeml_template_type_0_0>__w,enum memory_order,enum memory_order)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(atomic_compare_exchange_weak(__p,__v,__w));
}
class pointer_safety{public:enum __lx{relaxed,preferred,strict};
public:enum __lx __v_;
public:pointer_safety():__v_()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:pointer_safety(enum __lx __v):__v_(__v)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:operator int()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__v_;
}
}
;
class::std::__1::pointer_safety get_pointer_safety()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<class::std::__1::pointer_safety>::t(pointer_safety::relaxed);
}
void declare_reachable(void(*__p))/*gccattr visibility:*/;
void declare_no_pointers(char(*__p),unsigned long __n)/*gccattr visibility:*/;
void undeclare_no_pointers(char(*__p),unsigned long __n)/*gccattr visibility:*/;
void(*__undeclare_reachable(void(*__p)))/*gccattr visibility:*/;
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0(*undeclare_reachable(__xcodeml_template_type_0_0(*__p)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<__xcodeml_template_type_0_0(*)>((__undeclare_reachable(__p)));
}
void(*align(unsigned long __align,unsigned long __sz,void(*&__ptr),unsigned long&__space))/*gccattr visibility:*/;
template<typename __xcodeml_template_type_0_0>void __swap_allocator(__xcodeml_template_type_0_0&__a1,__xcodeml_template_type_0_0&__a2)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__swap_allocator(__a1,__a2,__xcodeml_identity<integral_constant<bool,expression> >::t()));
}
template<typename __xcodeml_template_type_0_0>void __swap_allocator(__xcodeml_template_type_0_0&__a1,__xcodeml_template_type_0_0&__a2,class::std::__1::integral_constant<bool,1>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{using std::__1::swap;
(swap(__a1,__a2));
}
template<typename __xcodeml_template_type_0_0>void __swap_allocator(__xcodeml_template_type_0_0&,__xcodeml_template_type_0_0&,class::std::__1::integral_constant<bool,0>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __noexcept_move_assign_container:public integral_constant<bool,expression>{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __temp_value{public:typedef allocator_traits<__xcodeml_template_type_0_1>_Traits;
public:typename aligned_storage<expression,expression>::type __v;
public:__xcodeml_template_type_0_1&__a;
public:__xcodeml_template_type_0_0(*__addr()){return reinterpret_cast<__xcodeml_template_type_0_0(*)>((addressof(this->__v)));
}
public:__xcodeml_template_type_0_0&get(){return(*(this->__addr()));
}
public:template<typename...__xcodeml_template_type_1_0>__temp_value(__xcodeml_template_type_0_1&__alloc,__xcodeml_template_type_1_0&& ...__args):__a(__alloc)/*gccattr no_sanitize:*/{(allocator_traits<__xcodeml_template_type_0_1>::.construct(this->__a,reinterpret_cast<__xcodeml_template_type_0_0(*)>((addressof(this->__v))),(std::__1::forward<__xcodeml_template_type_1_0...>(__args))...));
}
public:~__temp_value(){(allocator_traits<__xcodeml_template_type_0_1>::.destroy(this->__a,(this->__addr())));
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __is_allocator:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class __is_allocator<__xcodeml_template_type_0_0,typename __void_t<typename __xcodeml_template_type_0_0::value_type>::type,typename __void_t<decltype ()>::type>:public integral_constant<bool,1>{}
;
class __builtin_new_allocator{public:class __builtin_new_deleter{public:typedef void(*pointer_type);
public:__builtin_new_deleter(unsigned long __size,unsigned long __align):__size_(__size),__align_(__align){}
public:void operator()(void(*p))const{(std::__libcpp_deallocate(p,this->__size_,this->__align_));
}
private:
private:unsigned long __size_;
private:unsigned long __align_;
}
;
public:typedef class::std::__1::unique_ptr<void,class::std::__1::__builtin_new_allocator::__builtin_new_deleter>__holder_t;
public:static class::std::__1::unique_ptr<void,class::std::__1::__builtin_new_allocator::__builtin_new_deleter>__allocate_bytes(unsigned long __s,unsigned long __align){return __xcodeml_identity<class::std::__1::unique_ptr<void,class::std::__1::__builtin_new_allocator::__builtin_new_deleter> >::t((std::__libcpp_allocate(__s,__align)),__xcodeml_identity<class::std::__1::__builtin_new_allocator::__builtin_new_deleter>::t(__s,__align));
}
public:static void __deallocate_bytes(void(*__p),unsigned long __s,unsigned long __align){(std::__libcpp_deallocate(__p,__s,__align));
}
public:template<typename __xcodeml_template_type_0_0>static class::std::__1::unique_ptr<void,class::std::__1::__builtin_new_allocator::__builtin_new_deleter>__allocate_type(unsigned long __n)/*gccattr nodebug:*//*gccattr always_inline:*/{return(__allocate_bytes((__n*(sizeof(__xcodeml_template_type_0_0))),(alignof(__xcodeml_template_type_0_0))));
}
public:template<typename __xcodeml_template_type_0_0>static void __deallocate_type(void(*__p),unsigned long __n)/*gccattr nodebug:*//*gccattr always_inline:*/{(__deallocate_bytes(__p,(__n*(sizeof(__xcodeml_template_type_0_0))),(alignof(__xcodeml_template_type_0_0))));
}
}
;
}
}
namespace std{namespace __1{template<typename __xcodeml_template_type_0_0>class plus:public binary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>{public:__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator+(__x,__y);
}
}
;
;
template<typename __xcodeml_template_type_0_0>class minus:public binary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>{public:__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator-(__x,__y);
}
}
;
;
template<typename __xcodeml_template_type_0_0>class multiplies:public binary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>{public:__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__x*__y);
}
}
;
;
template<typename __xcodeml_template_type_0_0>class divides:public binary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>{public:__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__x/__y);
}
}
;
;
template<typename __xcodeml_template_type_0_0>class modulus:public binary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>{public:__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__x%__y);
}
}
;
;
template<typename __xcodeml_template_type_0_0>class negate:public unary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>{public:__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_0_0 const&__x)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator-(__x);
}
}
;
;
template<typename __xcodeml_template_type_0_0>class equal_to:public binary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0,bool>{public:bool operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==(__x,__y);
}
}
;
;
template<typename __xcodeml_template_type_0_0>class not_equal_to:public binary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0,bool>{public:bool operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator!=(__x,__y);
}
}
;
;
template<typename __xcodeml_template_type_0_0>class greater:public binary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0,bool>{public:bool operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator>(__x,__y);
}
}
;
;
template<typename __xcodeml_template_type_0_0>class greater_equal:public binary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0,bool>{public:bool operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator>=(__x,__y);
}
}
;
;
template<typename __xcodeml_template_type_0_0>class less_equal:public binary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0,bool>{public:bool operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<=(__x,__y);
}
}
;
;
template<typename __xcodeml_template_type_0_0>class logical_and:public binary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0,bool>{public:bool operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__x&&__y);
}
}
;
;
template<typename __xcodeml_template_type_0_0>class logical_or:public binary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0,bool>{public:bool operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__x||__y);
}
}
;
;
template<typename __xcodeml_template_type_0_0>class logical_not:public unary_function<__xcodeml_template_type_0_0,bool>{public:bool operator()(__xcodeml_template_type_0_0 const&__x)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!__x);
}
}
;
;
template<typename __xcodeml_template_type_0_0>class bit_and:public binary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>{public:__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__x&__y);
}
}
;
;
template<typename __xcodeml_template_type_0_0>class bit_or:public binary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>{public:__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__x|__y);
}
}
;
;
template<typename __xcodeml_template_type_0_0>class bit_xor:public binary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>{public:__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__x^__y);
}
}
;
;
template<typename __xcodeml_template_type_0_0>class unary_negate:public unary_function<typename __xcodeml_template_type_0_0::argument_type,bool>{private:__xcodeml_template_type_0_0 __pred_;
public:
public:unary_negate(__xcodeml_template_type_0_0 const&__pred):__pred_(__pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:bool operator()(typename __xcodeml_template_type_0_0::argument_type const&__x)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!(this->__pred_(__x)));
}
}
;
;
template<typename __xcodeml_template_type_0_0>unary_negate<__xcodeml_template_type_0_0>not1(__xcodeml_template_type_0_0 const&__pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<unary_negate<__xcodeml_template_type_0_0> >::t(__pred);
}
template<typename __xcodeml_template_type_0_0>class binary_negate:public binary_function<typename __xcodeml_template_type_0_0::first_argument_type,typename __xcodeml_template_type_0_0::second_argument_type,bool>{private:__xcodeml_template_type_0_0 __pred_;
public:
public:binary_negate(__xcodeml_template_type_0_0 const&__pred):__pred_(__pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:bool operator()(typename __xcodeml_template_type_0_0::first_argument_type const&__x,typename __xcodeml_template_type_0_0::second_argument_type const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!(this->__pred_(__x,__y)));
}
}
;
;
template<typename __xcodeml_template_type_0_0>binary_negate<__xcodeml_template_type_0_0>not2(__xcodeml_template_type_0_0 const&__pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<binary_negate<__xcodeml_template_type_0_0> >::t(__pred);
}
template<typename __xcodeml_template_type_0_0>class binder1st:public unary_function<typename __xcodeml_template_type_0_0::second_argument_type,typename __xcodeml_template_type_0_0::result_type>{protected:
protected:__xcodeml_template_type_0_0 op;
protected:typename __xcodeml_template_type_0_0::first_argument_type value;
public:
public:binder1st(__xcodeml_template_type_0_0 const&__x,typename __xcodeml_template_type_0_0::first_argument_type __y):op(__x),value(__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:typename __xcodeml_template_type_0_0::result_type operator()(typename __xcodeml_template_type_0_0::second_argument_type&__x)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->op(this->value,__x));
}
public:typename __xcodeml_template_type_0_0::result_type operator()(typename __xcodeml_template_type_0_0::second_argument_type const&__x)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->op(this->value,__x));
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>binder1st<__xcodeml_template_type_0_0>bind1st(__xcodeml_template_type_0_0 const&__op,__xcodeml_template_type_0_1 const&__x)/*gccattr deprecated:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<binder1st<__xcodeml_template_type_0_0> >::t(__op,__x);
}
template<typename __xcodeml_template_type_0_0>class binder2nd:public unary_function<typename __xcodeml_template_type_0_0::first_argument_type,typename __xcodeml_template_type_0_0::result_type>{protected:
protected:__xcodeml_template_type_0_0 op;
protected:typename __xcodeml_template_type_0_0::second_argument_type value;
public:
public:binder2nd(__xcodeml_template_type_0_0 const&__x,typename __xcodeml_template_type_0_0::second_argument_type __y):op(__x),value(__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:typename __xcodeml_template_type_0_0::result_type operator()(typename __xcodeml_template_type_0_0::first_argument_type&__x)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->op(__x,this->value));
}
public:typename __xcodeml_template_type_0_0::result_type operator()(typename __xcodeml_template_type_0_0::first_argument_type const&__x)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->op(__x,this->value));
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>binder2nd<__xcodeml_template_type_0_0>bind2nd(__xcodeml_template_type_0_0 const&__op,__xcodeml_template_type_0_1 const&__x)/*gccattr deprecated:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<binder2nd<__xcodeml_template_type_0_0> >::t(__op,__x);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class pointer_to_unary_function:public unary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>{private:__xcodeml_template_type_0_1(*__f_)(__xcodeml_template_type_0_0);
public:
public:pointer_to_unary_function(__xcodeml_template_type_0_1(*__f)(__xcodeml_template_type_0_0)):__f_(__f)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__xcodeml_template_type_0_1 operator()(__xcodeml_template_type_0_0 __x)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__f_(__x));
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>pointer_to_unary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>ptr_fun(__xcodeml_template_type_0_1(*__f)(__xcodeml_template_type_0_0))/*gccattr deprecated:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<pointer_to_unary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1> >::t(__f);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class pointer_to_binary_function:public binary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>{private:__xcodeml_template_type_0_2(*__f_)(__xcodeml_template_type_0_0,__xcodeml_template_type_0_1);
public:
public:pointer_to_binary_function(__xcodeml_template_type_0_2(*__f)(__xcodeml_template_type_0_0,__xcodeml_template_type_0_1)):__f_(__f)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__xcodeml_template_type_0_2 operator()(__xcodeml_template_type_0_0 __x,__xcodeml_template_type_0_1 __y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__f_(__x,__y));
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>pointer_to_binary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>ptr_fun(__xcodeml_template_type_0_2(*__f)(__xcodeml_template_type_0_0,__xcodeml_template_type_0_1))/*gccattr deprecated:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<pointer_to_binary_function<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2> >::t(__f);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class mem_fun_t:public unary_function<__xcodeml_template_type_0_1(*),__xcodeml_template_type_0_0>{private:__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__p_)();
public:
public:mem_fun_t(__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__p)()):__p_(__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_0_1(*__p))const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((__p::*this->__p_)());
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class mem_fun1_t:public binary_function<__xcodeml_template_type_0_1(*),__xcodeml_template_type_0_2,__xcodeml_template_type_0_0>{private:__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__p_)(__xcodeml_template_type_0_2);
public:
public:mem_fun1_t(__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__p)(__xcodeml_template_type_0_2)):__p_(__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_0_1(*__p),__xcodeml_template_type_0_2 __x)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((__p::*this->__p_)(__x));
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>mem_fun_t<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>mem_fun(__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__f)())/*gccattr deprecated:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<mem_fun_t<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1> >::t(__f);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>mem_fun1_t<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>mem_fun(__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__f)(__xcodeml_template_type_0_2))/*gccattr deprecated:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<mem_fun1_t<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2> >::t(__f);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class mem_fun_ref_t:public unary_function<__xcodeml_template_type_0_1,__xcodeml_template_type_0_0>{private:__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__p_)();
public:
public:mem_fun_ref_t(__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__p)()):__p_(__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_0_1&__p)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((__p.*this->__p_)());
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class mem_fun1_ref_t:public binary_function<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2,__xcodeml_template_type_0_0>{private:__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__p_)(__xcodeml_template_type_0_2);
public:
public:mem_fun1_ref_t(__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__p)(__xcodeml_template_type_0_2)):__p_(__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_0_1&__p,__xcodeml_template_type_0_2 __x)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((__p.*this->__p_)(__x));
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>mem_fun_ref_t<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>mem_fun_ref(__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__f)())/*gccattr deprecated:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<mem_fun_ref_t<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1> >::t(__f);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>mem_fun1_ref_t<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>mem_fun_ref(__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__f)(__xcodeml_template_type_0_2))/*gccattr deprecated:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<mem_fun1_ref_t<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2> >::t(__f);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class const_mem_fun_t:public unary_function<__xcodeml_template_type_0_1 const(*),__xcodeml_template_type_0_0>{private:__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__p_)()const;
public:
public:const_mem_fun_t(__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__p)()const):__p_(__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_0_1 const(*__p))const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((__p::*this->__p_)());
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class const_mem_fun1_t:public binary_function<__xcodeml_template_type_0_1 const(*),__xcodeml_template_type_0_2,__xcodeml_template_type_0_0>{private:__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__p_)(__xcodeml_template_type_0_2)const;
public:
public:const_mem_fun1_t(__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__p)(__xcodeml_template_type_0_2)const):__p_(__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_0_1 const(*__p),__xcodeml_template_type_0_2 __x)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((__p::*this->__p_)(__x));
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>const_mem_fun_t<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>mem_fun(__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__f)()const)/*gccattr deprecated:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<const_mem_fun_t<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1> >::t(__f);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>const_mem_fun1_t<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>mem_fun(__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__f)(__xcodeml_template_type_0_2)const)/*gccattr deprecated:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<const_mem_fun1_t<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2> >::t(__f);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class const_mem_fun_ref_t:public unary_function<__xcodeml_template_type_0_1,__xcodeml_template_type_0_0>{private:__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__p_)()const;
public:
public:const_mem_fun_ref_t(__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__p)()const):__p_(__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_0_1 const&__p)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((__p.*this->__p_)());
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class const_mem_fun1_ref_t:public binary_function<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2,__xcodeml_template_type_0_0>{private:__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__p_)(__xcodeml_template_type_0_2)const;
public:
public:const_mem_fun1_ref_t(__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__p)(__xcodeml_template_type_0_2)const):__p_(__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_0_1 const&__p,__xcodeml_template_type_0_2 __x)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((__p.*this->__p_)(__x));
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>const_mem_fun_ref_t<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>mem_fun_ref(__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__f)()const)/*gccattr deprecated:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<const_mem_fun_ref_t<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1> >::t(__f);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>const_mem_fun1_ref_t<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>mem_fun_ref(__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__f)(__xcodeml_template_type_0_2)const)/*gccattr deprecated:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<const_mem_fun1_ref_t<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2> >::t(__f);
}
template<typename __xcodeml_template_type_0_0>class __mem_fn:public __weak_result_type<__xcodeml_template_type_0_0>{public:
public:typedef __xcodeml_template_type_0_0 type;
private:
private:__xcodeml_template_type_0_0 __f_;
public:
public:__mem_fn(__xcodeml_template_type_0_0 __f):__f_(__f)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename...__xcodeml_template_type_1_0>typename __invoke_return<__xcodeml_template_type_0_0,__xcodeml_template_type_1_0...>/*packsize1*/::type operator()(__xcodeml_template_type_1_0&& ...__args)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__invoke(this->__f_,(std::__1::forward<__xcodeml_template_type_1_0...>(__args))...));
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__mem_fn<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)>mem_fn(__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__pm))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__mem_fn<__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*)> >::t(__pm);
}
class bad_function_call:public exception{}
;
void __throw_bad_function_call()/*gccattr noreturn:*//*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{throw __xcodeml_identity<class::std::__1::bad_function_call>::t();
}
template<typename __xcodeml_template_type_0_0>class function/*gccattr type_visibility:*/;
;
namespace __function{template<typename __xcodeml_template_type_0_0>class __maybe_derive_from_unary_function{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __maybe_derive_from_unary_function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1)>:public unary_function<__xcodeml_template_type_0_1,__xcodeml_template_type_0_0>{}
;
template<typename __xcodeml_template_type_0_0>class __maybe_derive_from_binary_function{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __maybe_derive_from_binary_function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1,__xcodeml_template_type_0_2)>:public binary_function<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2,__xcodeml_template_type_0_0>{}
;
template<typename __xcodeml_template_type_0_0>bool __not_null(__xcodeml_template_type_0_0 const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return true;
}
template<typename __xcodeml_template_type_0_0>bool __not_null(__xcodeml_template_type_0_0(*__ptr))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __ptr;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool __not_null(__xcodeml_template_type_0_0(__xcodeml_identity<__xcodeml_template_type_0_1>::t::*__ptr))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __ptr;
}
template<typename __xcodeml_template_type_0_0>bool __not_null(function<__xcodeml_template_type_0_0>const&__f)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!(!__f));
}
}
namespace __function{template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __alloc_func;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __default_alloc_func;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename...__xcodeml_template_type_0_3>class __alloc_func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)>{private:__compressed_pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>__f_;
public:
public:typedef __xcodeml_template_type_0_0 _Target;
public:typedef __xcodeml_template_type_0_1 _Alloc;
public:__xcodeml_template_type_0_0 const&__target()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__f_.first());
}
public:__xcodeml_template_type_0_1 const&__get_allocator()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__f_.second());
}
public:__alloc_func(__xcodeml_template_type_0_0&& __f):__f_(piecewise_construct(std::__1::forward_as_tuple((std::__1::move(__f))))(std::__1::forward_as_tuple()))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__alloc_func(__xcodeml_template_type_0_0 const&__f,__xcodeml_template_type_0_1 const&__a):__f_(piecewise_construct(std::__1::forward_as_tuple(__f))(std::__1::forward_as_tuple(__a)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__alloc_func(__xcodeml_template_type_0_0 const&__f,__xcodeml_template_type_0_1&& __a):__f_(piecewise_construct(std::__1::forward_as_tuple(__f))(std::__1::forward_as_tuple((std::__1::move(__a)))))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__alloc_func(__xcodeml_template_type_0_0&& __f,__xcodeml_template_type_0_1&& __a):__f_(piecewise_construct(std::__1::forward_as_tuple((std::__1::move(__f))))(std::__1::forward_as_tuple((std::__1::move(__a)))))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__xcodeml_template_type_0_2 operator()(__xcodeml_template_type_0_3&& ...__arg)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef __invoke_void_return_wrapper<__xcodeml_template_type_0_2>_Invoker;
return(__invoke_void_return_wrapper<__xcodeml_template_type_0_2>::.__call((this->__f_.first()),(std::__1::forward<__xcodeml_template_type_0_3...>(__arg))...));
}
public:class __alloc_func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)>(*__clone()const)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef allocator_traits<__xcodeml_template_type_0_1>__alloc_traits;
typedef typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_1>,class __alloc_func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)> >::type _AA;
typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_1>,class __alloc_func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)> >::type __a=(this->__f_.second());
typedef __allocator_destructor<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_1>,class __alloc_func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)> >::type>_Dp;
unique_ptr<class __alloc_func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)>,__allocator_destructor<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_1>,class __alloc_func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)> >::type> >__hold=(__a.allocate(1))__xcodeml_identity<__allocator_destructor<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_1>,class __alloc_func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)> >::type> >::t(__a,1);
::new(((void(*))(__hold.get())))__xcodeml_identity<class __alloc_func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)> >::t((this->__f_.first()),__xcodeml_identity<__xcodeml_template_type_0_1>::t(__a));
return(__hold.release());
}
public:void destroy()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(/*CPDE*/(this->__f_).~/*DTS*/__compressed_pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>());
}
public:static void __destroy_and_delete(class __alloc_func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)>(*__f)){typedef allocator_traits<__xcodeml_template_type_0_1>__alloc_traits;
typedef typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_1>,class __alloc_func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)> >::type _FunAlloc;
typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_1>,class __alloc_func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)> >::type __a=(__f.__get_allocator());
(__f.destroy());
(__a.deallocate(__f,1));
}
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __default_alloc_func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1(__xcodeml_template_type_0_2...)>{private:__xcodeml_template_type_0_0 __f_;
public:
public:typedef __xcodeml_template_type_0_0 _Target;
public:__xcodeml_template_type_0_0 const&__target()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__f_;
}
public:__default_alloc_func(__xcodeml_template_type_0_0&& __f):__f_((std::move(__f)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__default_alloc_func(__xcodeml_template_type_0_0 const&__f):__f_(__f)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__xcodeml_template_type_0_1 operator()(__xcodeml_template_type_0_2&& ...__arg)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef __invoke_void_return_wrapper<__xcodeml_template_type_0_1>_Invoker;
return(__invoke_void_return_wrapper<__xcodeml_template_type_0_1>::.__call(this->__f_,(std::__1::forward<__xcodeml_template_type_0_2...>(__arg))...));
}
public:class __default_alloc_func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1(__xcodeml_template_type_0_2...)>(*__clone()const)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{class::std::__1::unique_ptr<void,class::std::__1::__builtin_new_allocator::__builtin_new_deleter>__hold=(__builtin_new_allocator::__allocate_type<class __default_alloc_func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1(__xcodeml_template_type_0_2...)> >(1));
class __default_alloc_func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1(__xcodeml_template_type_0_2...)>(*__res)=::new((__hold.get()))__xcodeml_identity<class __default_alloc_func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1(__xcodeml_template_type_0_2...)> >::t(this->__f_);
((void)(__hold.release()));
return __res;
}
public:void destroy()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(/*CPDE*/(this->__f_).~__xcodeml_template_type_0_0());
}
public:static void __destroy_and_delete(class __default_alloc_func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1(__xcodeml_template_type_0_2...)>(*__f)){(__f.destroy());
(__builtin_new_allocator::__deallocate_type<class __default_alloc_func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1(__xcodeml_template_type_0_2...)> >(__f,1));
}
}
;
template<typename __xcodeml_template_type_0_0>class __base;
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>class __base<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>{private:__base(class __base const&);
private:class __base<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&operator=(class __base const&);
public:
public:__base()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:virtual~__base()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:virtual class __base<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>(*__clone()const)=0;
public:virtual void __clone(class __base<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>(*))const=0;
public:virtual void destroy()=0;
public:virtual void destroy_deallocate()=0;
public:virtual __xcodeml_template_type_0_0 operator()(__xcodeml_template_type_0_1&& ...)=0;
public:virtual void const(*target(class type_info const&)const)=0;
public:virtual class type_info const&target_type()const=0;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __func;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename...__xcodeml_template_type_0_3>class __func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)>:public __base<__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)>{private:__alloc_func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)>__f_;
public:
public:__func(__xcodeml_template_type_0_0&& __f):__f_((std::__1::move(__f)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__func(__xcodeml_template_type_0_0 const&__f,__xcodeml_template_type_0_1 const&__a):__f_(__f __a)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__func(__xcodeml_template_type_0_0 const&__f,__xcodeml_template_type_0_1&& __a):__f_(__f(std::__1::move(__a)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__func(__xcodeml_template_type_0_0&& __f,__xcodeml_template_type_0_1&& __a):__f_((std::__1::move(__f))(std::__1::move(__a)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:virtual __base<__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)>(*__clone()const);
public:virtual void __clone(__base<__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)>(*))const;
public:virtual void destroy();
public:virtual void destroy_deallocate();
public:virtual __xcodeml_template_type_0_2 operator()(__xcodeml_template_type_0_3&& ...__arg);
public:virtual void const(*target(class type_info const&)const);
public:virtual class type_info const&target_type()const;
}
;
__base<__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)>(*__func::__clone()const){typedef allocator_traits<__xcodeml_template_type_0_1>__alloc_traits;
typedef typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_1>,class __func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)> >::type _Ap;
typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_1>,class __func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)> >::type __a=(this->__f_.__get_allocator());
typedef __allocator_destructor<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_1>,class __func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)> >::type>_Dp;
unique_ptr<class __func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)>,__allocator_destructor<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_1>,class __func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)> >::type> >__hold=(__a.allocate(1))__xcodeml_identity<__allocator_destructor<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_1>,class __func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)> >::type> >::t(__a,1);
::new(((void(*))(__hold.get())))__xcodeml_identity<class __func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)> >::t((this->__f_.__target()),__xcodeml_identity<__xcodeml_template_type_0_1>::t(__a));
return(__hold.release());
}
void __func::__clone(__base<__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)>(*__p))const{::new(__p)__xcodeml_identity<class __func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)> >::t((this->__f_.__target()),(this->__f_.__get_allocator()));
}
void __func::destroy(){(this->__f_.destroy());
}
void __func::destroy_deallocate(){typedef allocator_traits<__xcodeml_template_type_0_1>__alloc_traits;
typedef typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_1>,class __func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)> >::type _Ap;
typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_1>,class __func<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2(__xcodeml_template_type_0_3...)> >::type __a=(this->__f_.__get_allocator());
(this->__f_.destroy());
(__a.deallocate(this,1));
}
__xcodeml_template_type_0_2 __func::operator()(__xcodeml_template_type_0_3&& ...__arg){return(this->__f_((std::__1::forward<__xcodeml_template_type_0_3...>(__arg))...));
}
void const(*__func::target(class type_info const&__ti)const){if(__ti.operator==(typeid(__xcodeml_template_type_0_0))){return(&(this->__f_.__target()));};
return((void const(*))0);
}
class type_info const&__func::target_type()const{return typeid(__xcodeml_template_type_0_0);
}
template<typename __xcodeml_template_type_0_0>class __value_func;
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>class __value_func<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>{private:class::std::__1::aligned_storage<24,16>::type __buf_;
private:typedef __base<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>__func;
private:__base<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>(*__f_);
private:static __base<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>(*__as_base(void(*p)))/*gccattr no_sanitize:*/{return reinterpret_cast<__base<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>(*)>(p);
}
public:
public:__value_func():__f_(0)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__value_func(__xcodeml_template_type_1_0&& __f,__xcodeml_template_type_1_1 const&__a):__f_(0)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef allocator_traits<__xcodeml_template_type_1_1>__alloc_traits;
typedef __func<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>_Fun;
typedef typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_1_1>,__func<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::type _FunAlloc;
if((__function::__not_null(__f))){{typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_1_1>,__func<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::type __af=__a;
if(((((sizeof(__func<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>))<=(sizeof(this->__buf_)))&&is_nothrow_copy_constructible<__xcodeml_template_type_1_0>::.value)&&is_nothrow_copy_constructible<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_1_1>,__func<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::type>::.value)){{(this->__f_=::new(((void(*))(&this->__buf_)))__xcodeml_identity<__func<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::t((std::__1::move(__f)),__xcodeml_identity<__xcodeml_template_type_1_1>::t(__af)));
};}else{{typedef __allocator_destructor<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_1_1>,__func<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::type>_Dp;
unique_ptr<__base<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>,__allocator_destructor<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_1_1>,__func<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::type> >__hold=(__af.allocate(1))__xcodeml_identity<__allocator_destructor<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_1_1>,__func<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::type> >::t(__af,1);
::new(((void(*))(__hold.get())))__xcodeml_identity<__func<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::t((std::__1::move(__f)),__xcodeml_identity<__xcodeml_template_type_1_1>::t(__a));
(this->__f_=(__hold.release()));
};};
};};
}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__value_func(__xcodeml_template_type_1_0&& __f):__value_func((std::forward<__xcodeml_template_type_1_0>(__f))__xcodeml_identity<allocator<__xcodeml_template_type_1_0> >::t())/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__value_func(class __value_func const&__f)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator==(__f.__f_,0)){(this->__f_=0);}else{if(operator==(((void(*))__f.__f_),(&__f.__buf_))){{(this->__f_=(__as_base((&this->__buf_))));
(__f.__f_.__clone(this->__f_));
};}else{(this->__f_=(__f.__f_.__clone()));};};
}
public:__value_func(class __value_func<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&& __f)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator==(__f.__f_,0)){(this->__f_=0);}else{if(operator==(((void(*))__f.__f_),(&__f.__buf_))){{(this->__f_=(__as_base((&this->__buf_))));
(__f.__f_.__clone(this->__f_));
};}else{{(this->__f_=__f.__f_);
(__f.__f_=0);
};};};
}
public:~__value_func()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator==(((void(*))this->__f_),(&this->__buf_))){(this->__f_.destroy());}else{if(this->__f_){(this->__f_.destroy_deallocate());};};
}
public:class __value_func<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&operator=(class __value_func<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&& __f)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((*this)=nullptr);
if(operator==(__f.__f_,0)){(this->__f_=0);}else{if(operator==(((void(*))__f.__f_),(&__f.__buf_))){{(this->__f_=(__as_base((&this->__buf_))));
(__f.__f_.__clone(this->__f_));
};}else{{(this->__f_=__f.__f_);
(__f.__f_=0);
};};};
return(*this);
}
public:class __value_func<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&operator=(nullptr_t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{__base<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>(*__f)=this->__f_;
(this->__f_=0);
if(operator==(((void(*))__f),(&this->__buf_))){(__f.destroy());}else{if(__f){(__f.destroy_deallocate());};};
return(*this);
}
public:__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_0_1&& ...__args)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator==(this->__f_,0)){(__throw_bad_function_call());};
return((*this->__f_)((std::__1::forward<__xcodeml_template_type_0_1...>(__args))...));
}
public:void swap(class __value_func<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&__f)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator==((&__f),this)){return;};
if((operator==(((void(*))this->__f_),(&this->__buf_))&&operator==(((void(*))__f.__f_),(&__f.__buf_)))){{typename aligned_storage<expression,expression>::type __tempbuf;
__base<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>(*__t)=(__as_base((&__tempbuf)));
(this->__f_.__clone(__t));
(this->__f_.destroy());
(this->__f_=0);
(__f.__f_.__clone((__as_base((&this->__buf_)))));
(__f.__f_.destroy());
(__f.__f_=0);
(this->__f_=(__as_base((&this->__buf_))));
(__t.__clone((__as_base((&__f.__buf_)))));
(__t.destroy());
(__f.__f_=(__as_base((&__f.__buf_))));
};}else{if(operator==(((void(*))this->__f_),(&this->__buf_))){{(this->__f_.__clone((__as_base((&__f.__buf_)))));
(this->__f_.destroy());
(this->__f_=__f.__f_);
(__f.__f_=(__as_base((&__f.__buf_))));
};}else{if(operator==(((void(*))__f.__f_),(&__f.__buf_))){{(__f.__f_.__clone((__as_base((&this->__buf_)))));
(__f.__f_.destroy());
(__f.__f_=this->__f_);
(this->__f_=(__as_base((&this->__buf_))));
};}else{(std::__1::swap(this->__f_,__f.__f_));};};};
}
public:operator bool()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator!=(this->__f_,0);
}
public:class type_info const&target_type()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator==(this->__f_,0)){return typeid(void);};
return(this->__f_.target_type());
}
public:template<typename __xcodeml_template_type_1_0>__xcodeml_template_type_1_0 const(*target()const)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator==(this->__f_,0)){return 0;};
return((__xcodeml_template_type_1_0 const(*))(this->__f_.target(typeid(__xcodeml_template_type_1_0))));
}
}
;
union __policy_storage{public:char __small[16];
public:void(*__large);
}
;
template<typename __xcodeml_template_type_0_0>class __use_small_storage:public integral_constant<bool,expression>{}
;
;
class __policy{public:void(*(*const __clone)(void const(*)));
public:void(*const __destroy)(void(*));
public:bool const __is_null;
public:class type_info const(*const __type_info);
public:template<typename __xcodeml_template_type_0_0>static class __policy const(*__create())/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__choose_policy<__xcodeml_template_type_0_0>(__xcodeml_identity<__use_small_storage<__xcodeml_template_type_0_0> >::t()));
}
public:static class __policy const(*__create_empty())/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static constexpr class __policy const __policy_={nullptr,nullptr,true,(&typeid(void))};
return(&__policy_);
}
private:
private:template<typename __xcodeml_template_type_0_0>static void(*__large_clone(void const(*__s))){__xcodeml_template_type_0_0 const(*__f)=static_cast<__xcodeml_template_type_0_0 const(*)>(__s);
return(__f.__clone());
}
private:template<typename __xcodeml_template_type_0_0>static void __large_destroy(void(*__s)){(__xcodeml_template_type_0_0::__destroy_and_delete(static_cast<__xcodeml_template_type_0_0(*)>(__s)));
}
private:template<typename __xcodeml_template_type_0_0>static class __policy const(*__choose_policy(class::std::__1::integral_constant<bool,0>))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static constexpr class __policy const __policy_={(&__large_clone<__xcodeml_template_type_0_0>),(&__large_destroy<__xcodeml_template_type_0_0>),false,(&typeid(typename __xcodeml_template_type_0_0::_Target))};
return(&__policy_);
}
private:template<typename __xcodeml_template_type_0_0>static class __policy const(*__choose_policy(class::std::__1::integral_constant<bool,1>))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static constexpr class __policy const __policy_={nullptr,nullptr,false,(&typeid(typename __xcodeml_template_type_0_0::_Target))};
return(&__policy_);
}
}
;
template<typename __xcodeml_template_type_0_0>using __fast_forward=typename conditional<expression,__xcodeml_template_type_0_0,__xcodeml_template_type_0_0&& >::type;
template<typename __xcodeml_template_type_0_0>class __policy_invoker;
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>class __policy_invoker<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>{public:typedef __xcodeml_template_type_0_0(*__Call)(union __policy_storage const(*),typename conditional<expression,__xcodeml_template_type_0_1...,__xcodeml_template_type_0_1&& ...>::type);
public:__xcodeml_template_type_0_0(*__call_)(union __policy_storage const(*),typename conditional<expression,__xcodeml_template_type_0_1...,__xcodeml_template_type_0_1&& ...>::type);
public:__policy_invoker():__call_((&__call_empty))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0>static class __policy_invoker<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>__create()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<class __policy_invoker<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::t((&__call_impl<__xcodeml_template_type_1_0>));
}
private:
private:__policy_invoker(__xcodeml_template_type_0_0(*__c)(union __policy_storage const(*),typename conditional<expression,__xcodeml_template_type_0_1...,__xcodeml_template_type_0_1&& ...>::type)):__call_(__c)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
private:static __xcodeml_template_type_0_0 __call_empty(union __policy_storage const(*),typename conditional<expression,__xcodeml_template_type_0_1...,__xcodeml_template_type_0_1&& ...>::type){(__throw_bad_function_call());
}
private:template<typename __xcodeml_template_type_1_0>static __xcodeml_template_type_0_0 __call_impl(union __policy_storage const(*__buf),typename conditional<expression,__xcodeml_template_type_0_1...,__xcodeml_template_type_0_1&& ...>::type __args){__xcodeml_template_type_1_0(*__f)=reinterpret_cast<__xcodeml_template_type_1_0(*)>((__use_small_storage<__xcodeml_template_type_1_0>::value?(&__buf->__small):__buf->__large));
return((*__f)((std::__1::forward<__xcodeml_template_type_0_1...>(__args))...));
}
}
;
template<typename __xcodeml_template_type_0_0>class __policy_func;
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>class __policy_func<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>{private:union::std::__1::__function::__policy_storage __buf_;
private:typedef __policy_invoker<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>__invoker;
private:__policy_invoker<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>__invoker_;
private:class __policy const(*__policy_);
public:
public:__policy_func():__policy_((__policy::__create_empty()))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__policy_func(__xcodeml_template_type_1_0&& __f,__xcodeml_template_type_1_1 const&__a):__policy_((__policy::__create_empty()))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef __alloc_func<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>_Fun;
typedef allocator_traits<__xcodeml_template_type_1_1>__alloc_traits;
typedef typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_1_1>,__alloc_func<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::type _FunAlloc;
if((__function::__not_null(__f))){{(this->__invoker_=(__policy_invoker<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>::.__create()));
(this->__policy_=(__policy::__create<__alloc_func<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >()));
typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_1_1>,__alloc_func<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::type __af=__a;
if(__xcodeml_identity<__use_small_storage<__alloc_func<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> > >::t()){{::new(((void(*))(&this->__buf_.__small)))__xcodeml_identity<__alloc_func<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::t((std::__1::move(__f)),__xcodeml_identity<__xcodeml_template_type_1_1>::t(__af));
};}else{{typedef __allocator_destructor<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_1_1>,__alloc_func<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::type>_Dp;
unique_ptr<__alloc_func<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>,__allocator_destructor<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_1_1>,__alloc_func<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::type> >__hold=(__af.allocate(1))__xcodeml_identity<__allocator_destructor<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_1_1>,__alloc_func<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::type> >::t(__af,1);
::new(((void(*))(__hold.get())))__xcodeml_identity<__alloc_func<__xcodeml_template_type_1_0,__xcodeml_template_type_1_1,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::t((std::__1::move(__f)),__xcodeml_identity<__xcodeml_template_type_1_1>::t(__af));
(this->__buf_.__large=(__hold.release()));
};};
};};
}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__policy_func(__xcodeml_template_type_1_0&& __f):__policy_((__policy::__create_empty()))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef __default_alloc_func<__xcodeml_template_type_1_0,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>_Fun;
if((__function::__not_null(__f))){{(this->__invoker_=(__policy_invoker<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>::.__create()));
(this->__policy_=(__policy::__create<__default_alloc_func<__xcodeml_template_type_1_0,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >()));
if(__xcodeml_identity<__use_small_storage<__default_alloc_func<__xcodeml_template_type_1_0,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> > >::t()){{::new(((void(*))(&this->__buf_.__small)))__xcodeml_identity<__default_alloc_func<__xcodeml_template_type_1_0,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::t((std::__1::move(__f)));
};}else{{class::std::__1::unique_ptr<void,class::std::__1::__builtin_new_allocator::__builtin_new_deleter>__hold=(__builtin_new_allocator::__allocate_type<__default_alloc_func<__xcodeml_template_type_1_0,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >(1));
(this->__buf_.__large=::new((__hold.get()))__xcodeml_identity<__default_alloc_func<__xcodeml_template_type_1_0,__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::t((std::__1::move(__f))));
((void)(__hold.release()));
};};
};};
}
public:__policy_func(class __policy_func const&__f):__buf_(__f.__buf_),__invoker_(__f.__invoker_),__policy_(__f.__policy_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(this->__policy_->__clone){(this->__buf_.__large=(this->__policy_->__clone(__f.__buf_.__large)));};
}
public:__policy_func(class __policy_func<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&& __f):__buf_(__f.__buf_),__invoker_(__f.__invoker_),__policy_(__f.__policy_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(this->__policy_->__destroy){{(__f.__policy_=(__policy::__create_empty()));
(__f.__invoker_=__xcodeml_identity<__policy_invoker<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::t());
};};
}
public:~__policy_func()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(this->__policy_->__destroy){(this->__policy_->__destroy(this->__buf_.__large));};
}
public:class __policy_func<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&operator=(class __policy_func<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&& __f)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((*this)=nullptr);
(this->__buf_=__f.__buf_);
(this->__invoker_=__f.__invoker_);
(this->__policy_=__f.__policy_);
(__f.__policy_=(__policy::__create_empty()));
(__f.__invoker_=__xcodeml_identity<__policy_invoker<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::t());
return(*this);
}
public:class __policy_func<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&operator=(nullptr_t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{class __policy const(*__p)=this->__policy_;
(this->__policy_=(__policy::__create_empty()));
(this->__invoker_=__xcodeml_identity<__policy_invoker<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::t());
if(__p->__destroy){(__p->__destroy(this->__buf_.__large));};
return(*this);
}
public:__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_0_1&& ...__args)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__invoker_.__call_((std::__1::addressof(this->__buf_)),(std::__1::forward<__xcodeml_template_type_0_1...>(__args))...));
}
public:void swap(class __policy_func<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&__f)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::swap(this->__invoker_,__f.__invoker_));
(std::__1::swap(this->__policy_,__f.__policy_));
(std::__1::swap(this->__buf_,__f.__buf_));
}
public:operator bool()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!this->__policy_->__is_null);
}
public:class type_info const&target_type()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this->__policy_->__type_info);
}
public:template<typename __xcodeml_template_type_1_0>__xcodeml_template_type_1_0 const(*target()const)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if((this->__policy_->__is_null||typeid(__xcodeml_template_type_1_0).operator!=((*this->__policy_->__type_info)))){return nullptr;};
if(this->__policy_->__clone){return reinterpret_cast<__xcodeml_template_type_1_0 const(*)>(this->__buf_.__large);}else{return reinterpret_cast<__xcodeml_template_type_1_0 const(*)>((&this->__buf_.__small));};
}
}
;
}
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>class function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>:public __maybe_derive_from_unary_function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>,public __maybe_derive_from_binary_function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>{private:typedef __value_func<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>__func;
private:__value_func<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>__f_;
private:template<typename __xcodeml_template_type_1_0,bool=/*DTS*/_MetaBase<expression>::template _AndImpl<integral_constant<bool,expression>,__invokable_r<void,__xcodeml_template_type_1_0&,__xcodeml_template_type_0_1...>/*packsize1*/>::value>class __callable;
;

/* Ignored a member with no access specifier template<typename __xcodeml_template_type_1_0>class __callable<__xcodeml_template_type_1_0,1>{public:static bool const value=(is_same<void,__xcodeml_template_type_0_0>::value||is_convertible<typename __invoke_of<__xcodeml_template_type_1_0&,__xcodeml_template_type_0_1...>/*packsize1*/::type,__xcodeml_template_type_0_0>::value);
}
;*/


/* Ignored a member with no access specifier template<typename __xcodeml_template_type_1_0>class __callable<__xcodeml_template_type_1_0,0>{public:static bool const value=false;
}
;*/

private:template<typename __xcodeml_template_type_1_0>using _EnableIfCallable=typename enable_if<expression,void>::type;
public:
public:typedef __xcodeml_template_type_0_0 result_type;
public:function()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:function(nullptr_t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:function(class function const&);
public:function(class function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&& );
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>function(__xcodeml_template_type_1_0)
public:template<typename __xcodeml_template_type_1_0>function(class::std::__1::allocator_arg_t,__xcodeml_template_type_1_0 const&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0>function(class::std::__1::allocator_arg_t,__xcodeml_template_type_1_0 const&,nullptr_t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0>function(class::std::__1::allocator_arg_t,__xcodeml_template_type_1_0 const&,class function const&)
public:template<typename __xcodeml_template_type_1_0>function(class::std::__1::allocator_arg_t,__xcodeml_template_type_1_0 const&,class function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&& )
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename __xcodeml_template_type_1_2>function(class::std::__1::allocator_arg_t,__xcodeml_template_type_1_1 const&__a,__xcodeml_template_type_1_0 __f)
public:class function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&operator=(class function const&);
public:class function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&operator=(class function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&& );
public:class function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&operator=(nullptr_t);
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>class function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&operator=(__xcodeml_template_type_1_0&& )
public:~function();
public:void swap(class function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&);
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>void assign(__xcodeml_template_type_1_0&& __f,__xcodeml_template_type_1_1 const&__a)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__xcodeml_identity<class function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::t(allocator_arg,__a,(std::__1::forward<__xcodeml_template_type_1_0>(__f))).swap((*this)));
}
public:operator bool()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<bool>(this->__f_);
}
public:template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1>bool operator==(function<__xcodeml_template_type_1_0(__xcodeml_template_type_1_1...)>const&)const
public:template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1>bool operator!=(function<__xcodeml_template_type_1_0(__xcodeml_template_type_1_1...)>const&)const
public:
public:__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_0_1...)const;
public:class type_info const&target_type()const;
public:template<typename __xcodeml_template_type_1_0>__xcodeml_template_type_1_0(*target())
public:template<typename __xcodeml_template_type_1_0>__xcodeml_template_type_1_0 const(*target()const)
}
;
function::function(class function const&__f):__f_(__f.__f_){}
template<typename __xcodeml_template_type_1_0>function::function(class::std::__1::allocator_arg_t,__xcodeml_template_type_1_0 const&,class function const&__f):__f_(__f.__f_){}
function::function(class function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&& __f):__f_((std::__1::move(__f.__f_))){}
template<typename __xcodeml_template_type_1_0>function::function(class::std::__1::allocator_arg_t,__xcodeml_template_type_1_0 const&,class function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&& __f):__f_((std::__1::move(__f.__f_))){}
template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>function::function(__xcodeml_template_type_1_0 __f):__f_((std::__1::move(__f))){}
template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1,typename __xcodeml_template_type_1_2>function::function(class::std::__1::allocator_arg_t,__xcodeml_template_type_1_1 const&__a,__xcodeml_template_type_1_0 __f):__f_((std::__1::move(__f))__a){}
class function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&function::operator=(class function const&__f){(__xcodeml_identity<class function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::t(__f).swap((*this)));
return(*this);
}
class function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&function::operator=(class function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&& __f){(this->__f_=(std::move(__f.__f_)));
return(*this);
}
class function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&function::operator=(nullptr_t){(this->__f_=nullptr);
return(*this);
}
template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>class function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&function::operator=(__xcodeml_template_type_1_0&& __f){(__xcodeml_identity<class function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)> >::t((std::__1::forward<__xcodeml_template_type_1_0>(__f))).swap((*this)));
return(*this);
}
function::~function(){}
void function::swap(class function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&__f){(this->__f_.swap(__f.__f_));
}
__xcodeml_template_type_0_0 function::operator()(__xcodeml_template_type_0_1...__arg)const{return(this->__f_((std::__1::forward<__xcodeml_template_type_0_1...>(__arg))...));
}
class type_info const&function::target_type()const{return(this->__f_.target_type());
}
template<typename __xcodeml_template_type_1_0>__xcodeml_template_type_1_0(*function::target()){return((__xcodeml_template_type_1_0(*))(this->__f_.target()));
}
template<typename __xcodeml_template_type_1_0>__xcodeml_template_type_1_0 const(*function::target()const){return(this->__f_.target());
}
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>bool operator==(function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>const&__f,nullptr_t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!__f);
}
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>bool operator==(nullptr_t,function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>const&__f)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!__f);
}
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>bool operator!=(function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>const&__f,nullptr_t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((bool)__f);
}
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>bool operator!=(nullptr_t,function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>const&__f)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((bool)__f);
}
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>void swap(function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&__x,function<__xcodeml_template_type_0_0(__xcodeml_template_type_0_1...)>&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__x.swap(__y));
}
template<typename __xcodeml_template_type_0_0>class __is_bind_expression:public integral_constant<bool,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_bind_expression:public __is_bind_expression<typename remove_cv<__xcodeml_template_type_0_0>::type>{}
;
;
template<typename __xcodeml_template_type_0_0>class __is_placeholder:public integral_constant<int,0>{}
;
;
template<typename __xcodeml_template_type_0_0>class is_placeholder:public __is_placeholder<typename remove_cv<__xcodeml_template_type_0_0>::type>{}
;
;
namespace placeholders{template<int _Np>class __ph{}
;
;
constexpr class __ph const _1={};
constexpr class __ph const _2={};
constexpr class __ph const _3={};
constexpr class __ph const _4={};
constexpr class __ph const _5={};
constexpr class __ph const _6={};
constexpr class __ph const _7={};
constexpr class __ph const _8={};
constexpr class __ph const _9={};
constexpr class __ph const _10={};
}
template<int _Np>class __is_placeholder<__ph<expression> >:public integral_constant<int,expression>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0&__mu(reference_wrapper<__xcodeml_template_type_0_0>__t,__xcodeml_template_type_0_1&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__t.get());
}
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1,unsigned long _Indx...>typename __invoke_of<__xcodeml_template_type_0_0&,__xcodeml_template_type_0_1...>/*packsize1*/::type __mu_expand(__xcodeml_template_type_0_0&__ti,tuple<__xcodeml_template_type_0_1...>/*packsize1*/&__uj,__tuple_indices<expression>/*packsize1*/)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__ti((std::__1::forward<__xcodeml_template_type_0_1...>((std::__1::get<_Indx>(__uj))))...));
}
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>typename /*DTS*/_MetaBase<expression>::template _EnableIfImpl<__invoke_of<__xcodeml_template_type_0_0&,__xcodeml_template_type_0_1...>/*packsize1*/>::type __mu(__xcodeml_template_type_0_0&__ti,tuple<__xcodeml_template_type_0_1...>/*packsize1*/&__uj)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __make_tuple_indices<expression,0>::type __indices;
return(__mu_expand(__ti,__uj,__xcodeml_identity<typename __make_tuple_indices<expression,0>::type>::t()));
}
template<bool IsPh,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __mu_return2{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __mu_return2<1,__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>{public:typedef typename tuple_element<expression,__xcodeml_template_type_0_1>::type type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename enable_if<expression,typename __mu_return2<expression,__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::type>::type __mu(__xcodeml_template_type_0_0&,__xcodeml_template_type_0_1&__uj)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{unsigned long const _Indx=operator-(is_placeholder<__xcodeml_template_type_0_0>::value,1);
return(std::__1::forward<typename tuple_element<expression,__xcodeml_template_type_0_1>::type>((std::__1::get<_Indx>(__uj))));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename enable_if<expression,__xcodeml_template_type_0_0&>::type __mu(__xcodeml_template_type_0_0&__ti,__xcodeml_template_type_0_1&)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __ti;
}
template<typename __xcodeml_template_type_0_0,bool IsReferenceWrapper,bool IsBindEx,bool IsPh,typename __xcodeml_template_type_0_4>class __mu_return_impl;
;
template<bool _Invokable,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __mu_return_invokable{public:typedef class::std::__1::__nat type;
}
;
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>class __mu_return_invokable<1,__xcodeml_template_type_0_0,__xcodeml_template_type_0_1...>/*packsize1*/{public:typedef typename __invoke_of<__xcodeml_template_type_0_0&,__xcodeml_template_type_0_1...>/*packsize1*/::type type;
}
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>class __mu_return_impl<__xcodeml_template_type_0_0,0,1,0,tuple<__xcodeml_template_type_0_1...>/*packsize1*/>:public __mu_return_invokable<expression,__xcodeml_template_type_0_0,__xcodeml_template_type_0_1...>/*packsize1*/{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __mu_return_impl<__xcodeml_template_type_0_0,0,0,1,__xcodeml_template_type_0_1>{public:typedef typename tuple_element<expression,__xcodeml_template_type_0_1>::type&& type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __mu_return_impl<__xcodeml_template_type_0_0,1,0,0,__xcodeml_template_type_0_1>{public:typedef typename __xcodeml_template_type_0_0::type&type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __mu_return_impl<__xcodeml_template_type_0_0,0,0,0,__xcodeml_template_type_0_1>{public:typedef __xcodeml_template_type_0_0&type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __mu_return:public __mu_return_impl<__xcodeml_template_type_0_0,expression,expression,expression,__xcodeml_template_type_0_1>{}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __is_valid_bind_return{public:static bool const value=false;
}
;
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __is_valid_bind_return<__xcodeml_template_type_0_0,tuple<__xcodeml_template_type_0_1...>/*packsize1*/,__xcodeml_template_type_0_2>{public:static bool const value=__invokable_r<void,__xcodeml_template_type_0_0,typename __mu_return<__xcodeml_template_type_0_1...,__xcodeml_template_type_0_2>::type>/*packsize1*/::value;
}
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __is_valid_bind_return<__xcodeml_template_type_0_0,tuple<__xcodeml_template_type_0_1...>/*packsize1*/const,__xcodeml_template_type_0_2>{public:static bool const value=__invokable_r<void,__xcodeml_template_type_0_0,typename __mu_return<__xcodeml_template_type_0_1 const...,__xcodeml_template_type_0_2>::type>/*packsize1*/::value;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,bool=__is_valid_bind_return<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>::value>class __bind_return;
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __bind_return<__xcodeml_template_type_0_0,tuple<__xcodeml_template_type_0_1...>/*packsize1*/,__xcodeml_template_type_0_2,1>{public:typedef typename __invoke_of<__xcodeml_template_type_0_0&,typename __mu_return<__xcodeml_template_type_0_1...,__xcodeml_template_type_0_2>::type>/*packsize1*/::type type;
}
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>class __bind_return<__xcodeml_template_type_0_0,tuple<__xcodeml_template_type_0_1...>/*packsize1*/const,__xcodeml_template_type_0_2,1>{public:typedef typename __invoke_of<__xcodeml_template_type_0_0&,typename __mu_return<__xcodeml_template_type_0_1 const...,__xcodeml_template_type_0_2>::type>/*packsize1*/::type type;
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,unsigned long _Indx...,typename __xcodeml_template_type_0_3>typename __bind_return<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_3,expression>::type __apply_functor(__xcodeml_template_type_0_0&__f,__xcodeml_template_type_0_1&__bound_args,__tuple_indices<expression>/*packsize1*/,__xcodeml_template_type_0_3&& __args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::__invoke(__f,(std::__1::__mu((std::__1::get<_Indx>(__bound_args)),__args))...));
}
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>class __bind:public __weak_result_type<typename decay<__xcodeml_template_type_0_0>::type>{protected:
protected:typedef typename decay<__xcodeml_template_type_0_0>::type _Fd;
protected:typedef tuple<typename decay<__xcodeml_template_type_0_1...>::type>/*packsize1*/_Td;
private:
private:typename decay<__xcodeml_template_type_0_0>::type __f_;
private:tuple<typename decay<__xcodeml_template_type_0_1...>::type>/*packsize1*/__bound_args_;
private:typedef typename __make_tuple_indices<expression,0>::type __indices;
public:
public:template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1,typename __xcodeml_template_type_1_2>__bind(__xcodeml_template_type_1_0&& __f,__xcodeml_template_type_1_1&& ...__bound_args):__f_((std::__1::forward<__xcodeml_template_type_1_0>(__f))),__bound_args_((std::__1::forward<__xcodeml_template_type_1_1...>(__bound_args))...)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename...__xcodeml_template_type_1_0>typename __bind_return<typename decay<__xcodeml_template_type_0_0>::type,tuple<typename decay<__xcodeml_template_type_0_1...>::type>/*packsize1*/,tuple<__xcodeml_template_type_1_0&& ...>/*packsize1*/,expression>::type operator()(__xcodeml_template_type_1_0&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::__apply_functor(this->__f_,this->__bound_args_,__xcodeml_identity<typename __make_tuple_indices<expression,0>::type>::t(),__xcodeml_identity<tuple<__xcodeml_template_type_1_0&& ...>/*packsize1*/>::t((std::__1::forward<__xcodeml_template_type_1_0...>(__args))...)));
}
public:template<typename...__xcodeml_template_type_1_0>typename __bind_return<typename decay<__xcodeml_template_type_0_0>::type const,tuple<typename decay<__xcodeml_template_type_0_1...>::type>/*packsize1*/const,tuple<__xcodeml_template_type_1_0&& ...>/*packsize1*/,expression>::type operator()(__xcodeml_template_type_1_0&& ...__args)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::__apply_functor(this->__f_,this->__bound_args_,__xcodeml_identity<typename __make_tuple_indices<expression,0>::type>::t(),__xcodeml_identity<tuple<__xcodeml_template_type_1_0&& ...>/*packsize1*/>::t((std::__1::forward<__xcodeml_template_type_1_0...>(__args))...)));
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>class __is_bind_expression<__bind<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1...>/*packsize1*/>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __bind_r:public __bind<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/{private:typedef __bind<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/base;
private:typedef typename __bind<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/::_Fd _Fd;
private:typedef typename __bind<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/::_Td _Td;
public:
public:typedef __xcodeml_template_type_0_0 result_type;
public:template<typename __xcodeml_template_type_1_0,typename...__xcodeml_template_type_1_1,typename __xcodeml_template_type_1_2>__bind_r(__xcodeml_template_type_1_0&& __f,__xcodeml_template_type_1_1&& ...__bound_args):((std::__1::forward<__xcodeml_template_type_1_0>(__f))(std::__1::forward<__xcodeml_template_type_1_1...>(__bound_args))...)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename...__xcodeml_template_type_1_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type operator()(__xcodeml_template_type_1_0&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef __invoke_void_return_wrapper<__xcodeml_template_type_0_0>_Invoker;
return(__invoke_void_return_wrapper<__xcodeml_template_type_0_0>::.__call(static_cast<__bind<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/&>((*this)),(std::__1::forward<__xcodeml_template_type_1_0...>(__args))...));
}
public:template<typename...__xcodeml_template_type_1_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type operator()(__xcodeml_template_type_1_0&& ...__args)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef __invoke_void_return_wrapper<__xcodeml_template_type_0_0>_Invoker;
return(__invoke_void_return_wrapper<__xcodeml_template_type_0_0>::.__call(static_cast<__bind<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/const&>((*this)),(std::__1::forward<__xcodeml_template_type_1_0...>(__args))...));
}
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>class __is_bind_expression<__bind_r<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/>:public integral_constant<bool,1>{}
;
template<typename __xcodeml_template_type_0_0,typename...__xcodeml_template_type_0_1>__bind<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1...>/*packsize1*/bind(__xcodeml_template_type_0_0&& __f,__xcodeml_template_type_0_1&& ...__bound_args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef __bind<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1...>/*packsize1*/type;
return __xcodeml_identity<__bind<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1...>/*packsize1*/>::t((std::__1::forward<__xcodeml_template_type_0_0>(__f)),(std::__1::forward<__xcodeml_template_type_0_1...>(__bound_args))...);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename...__xcodeml_template_type_0_2>__bind_r<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/bind(__xcodeml_template_type_0_1&& __f,__xcodeml_template_type_0_2&& ...__bound_args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef __bind_r<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/type;
return __xcodeml_identity<__bind_r<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1,__xcodeml_template_type_0_2...>/*packsize1*/>::t((std::__1::forward<__xcodeml_template_type_0_1>(__f)),(std::__1::forward<__xcodeml_template_type_0_2...>(__bound_args))...);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_1>__search(__xcodeml_template_type_0_1 __first1,__xcodeml_template_type_0_1 __last1,__xcodeml_template_type_0_2 __first2,__xcodeml_template_type_0_2 __last2,__xcodeml_template_type_0_0 __pred,class::std::__1::forward_iterator_tag,class::std::__1::forward_iterator_tag){if(operator==(__first2,__last2)){return(make_pair(__first1,__first1));};
while(true){{while(true){{if(operator==(__first1,__last1)){return(make_pair(__last1,__last1));};
if((__pred((*__first1),(*__first2)))){break;};
(++__first1);
};};
__xcodeml_template_type_0_1 __m1=__first1;
__xcodeml_template_type_0_2 __m2=__first2;
while(true){{if(operator==((++__m2),__last2)){return(make_pair(__first1,__m1));};
if(operator==((++__m1),__last1)){return(make_pair(__last1,__last1));};
if((!(__pred((*__m1),(*__m2))))){{(++__first1);
break;
};};
};};
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_1>__search(__xcodeml_template_type_0_1 __first1,__xcodeml_template_type_0_1 __last1,__xcodeml_template_type_0_2 __first2,__xcodeml_template_type_0_2 __last2,__xcodeml_template_type_0_0 __pred,class::std::__1::random_access_iterator_tag,class::std::__1::random_access_iterator_tag){typedef typename iterator_traits<__xcodeml_template_type_0_1>::difference_type _D1;
typedef typename iterator_traits<__xcodeml_template_type_0_2>::difference_type _D2;
typename iterator_traits<__xcodeml_template_type_0_2>::difference_type const __len2=operator-(__last2,__first2);
if(operator==(__len2,0)){return(make_pair(__first1,__first1));};
typename iterator_traits<__xcodeml_template_type_0_1>::difference_type const __len1=operator-(__last1,__first1);
if(operator<(__len1,__len2)){return(make_pair(__last1,__last1));};
__xcodeml_template_type_0_1 const __s=operator-(__last1,operator-(__len2,1));
while(true){{while(true){{if(operator==(__first1,__s)){return(make_pair(__last1,__last1));};
if((__pred((*__first1),(*__first2)))){break;};
(++__first1);
};};
__xcodeml_template_type_0_1 __m1=__first1;
__xcodeml_template_type_0_2 __m2=__first2;
while(true){{if(operator==((++__m2),__last2)){return(make_pair(__first1,operator+(__first1,__len2)));};
(++__m1);
if((!(__pred((*__m1),(*__m2))))){{(++__first1);
break;
};};
};};
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void __libcpp_erase_if_container(__xcodeml_template_type_0_0&__c,__xcodeml_template_type_0_1 __pred){{typename __xcodeml_template_type_0_0::iterator __iter=(__c.begin());typename __xcodeml_template_type_0_0::iterator __last=(__c.end());for(;operator!=(__iter,__last);){{if((__pred((*__iter)))){(__iter=(__c.erase(__iter)));}else{(++__iter);};
};}};
}
}
}
namespace std{namespace __1{template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __equal_to{public:bool operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==(__x,__y);
}
public:bool operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_1 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==(__x,__y);
}
public:bool operator()(__xcodeml_template_type_0_1 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==(__x,__y);
}
public:bool operator()(__xcodeml_template_type_0_1 const&__x,__xcodeml_template_type_0_1 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==(__x,__y);
}
}
;
;
template<typename __xcodeml_template_type_0_0>class __equal_to<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>{public:bool operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==(__x,__y);
}
}
;
template<typename __xcodeml_template_type_0_0>class __equal_to<__xcodeml_template_type_0_0 const,__xcodeml_template_type_0_0>{public:bool operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==(__x,__y);
}
}
;
template<typename __xcodeml_template_type_0_0>class __equal_to<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0 const>{public:bool operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==(__x,__y);
}
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __less{public:bool operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(__x,__y);
}
public:bool operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_1 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(__x,__y);
}
public:bool operator()(__xcodeml_template_type_0_1 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(__x,__y);
}
public:bool operator()(__xcodeml_template_type_0_1 const&__x,__xcodeml_template_type_0_1 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(__x,__y);
}
}
;
;
template<typename __xcodeml_template_type_0_0>class __less<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>{public:bool operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(__x,__y);
}
}
;
template<typename __xcodeml_template_type_0_0>class __less<__xcodeml_template_type_0_0 const,__xcodeml_template_type_0_0>{public:bool operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(__x,__y);
}
}
;
template<typename __xcodeml_template_type_0_0>class __less<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0 const>{public:bool operator()(__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_0 const&__y)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(__x,__y);
}
}
;
template<typename __xcodeml_template_type_0_0>class __invert{private:
private:__xcodeml_template_type_0_0 __p_;
public:
public:__invert()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:__invert(__xcodeml_template_type_0_0 __p):__p_(__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:template<typename __xcodeml_template_type_1_0>bool operator()(__xcodeml_template_type_1_0 const&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!(this->__p_(__x)));
}
public:template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>bool operator()(__xcodeml_template_type_1_0 const&__x,__xcodeml_template_type_1_1 const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__p_(__y,__x));
}
}
;
;
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type __half_positive(__xcodeml_template_type_0_0 __value)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<__xcodeml_template_type_0_0>((static_cast<typename make_unsigned<__xcodeml_template_type_0_0>::type>(__value)/2));
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0>::type __half_positive(__xcodeml_template_type_0_0 __value)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__value/2);
}
template<typename __xcodeml_template_type_0_0>class __comp_ref_type{public:typedef typename add_lvalue_reference<__xcodeml_template_type_0_0>::type type;
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool all_of(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first,__last);(++__first)){if((!(__pred((*__first))))){return false;};}};
return true;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool any_of(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first,__last);(++__first)){if((__pred((*__first)))){return true;};}};
return false;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool none_of(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first,__last);(++__first)){if((__pred((*__first)))){return false;};}};
return true;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 for_each(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __f)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first,__last);(++__first)){(__f((*__first)));}};
return __f;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 find(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 const&__value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first,__last);(++__first)){if(operator==((*__first),__value_)){break;};}};
return __first;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 find_if(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first,__last);(++__first)){if((__pred((*__first)))){break;};}};
return __first;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 find_if_not(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first,__last);(++__first)){if((!(__pred((*__first))))){break;};}};
return __first;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_1 __find_end(__xcodeml_template_type_0_1 __first1,__xcodeml_template_type_0_1 __last1,__xcodeml_template_type_0_2 __first2,__xcodeml_template_type_0_2 __last2,__xcodeml_template_type_0_0 __pred,class::std::__1::forward_iterator_tag,class::std::__1::forward_iterator_tag){__xcodeml_template_type_0_1 __r=__last1;
if(operator==(__first2,__last2)){return __r;};
while(true){{while(true){{if(operator==(__first1,__last1)){return __r;};
if((__pred((*__first1),(*__first2)))){break;};
(++__first1);
};};
__xcodeml_template_type_0_1 __m1=__first1;
__xcodeml_template_type_0_2 __m2=__first2;
while(true){{if(operator==((++__m2),__last2)){{(__r=__first1);
(++__first1);
break;
};};
if(operator==((++__m1),__last1)){return __r;};
if((!(__pred((*__m1),(*__m2))))){{(++__first1);
break;
};};
};};
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_1 __find_end(__xcodeml_template_type_0_1 __first1,__xcodeml_template_type_0_1 __last1,__xcodeml_template_type_0_2 __first2,__xcodeml_template_type_0_2 __last2,__xcodeml_template_type_0_0 __pred,class::std::__1::bidirectional_iterator_tag,class::std::__1::bidirectional_iterator_tag){if(operator==(__first2,__last2)){return __last1;};
__xcodeml_template_type_0_1 __l1=__last1;
__xcodeml_template_type_0_2 __l2=__last2;
(--__l2);
while(true){{while(true){{if(operator==(__first1,__l1)){return __last1;};
if((__pred((*(--__l1)),(*__l2)))){break;};
};};
__xcodeml_template_type_0_1 __m1=__l1;
__xcodeml_template_type_0_2 __m2=__l2;
while(true){{if(operator==(__m2,__first2)){return __m1;};
if(operator==(__m1,__first1)){return __last1;};
if((!(__pred((*(--__m1)),(*(--__m2)))))){{break;
};};
};};
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_1 __find_end(__xcodeml_template_type_0_1 __first1,__xcodeml_template_type_0_1 __last1,__xcodeml_template_type_0_2 __first2,__xcodeml_template_type_0_2 __last2,__xcodeml_template_type_0_0 __pred,class::std::__1::random_access_iterator_tag,class::std::__1::random_access_iterator_tag){typename iterator_traits<__xcodeml_template_type_0_2>::difference_type __len2=operator-(__last2,__first2);
if(operator==(__len2,0)){return __last1;};
typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len1=operator-(__last1,__first1);
if(operator<(__len1,__len2)){return __last1;};
__xcodeml_template_type_0_1 const __s=operator+(__first1,operator-(__len2,1));
__xcodeml_template_type_0_1 __l1=__last1;
__xcodeml_template_type_0_2 __l2=__last2;
(--__l2);
while(true){{while(true){{if(operator==(__s,__l1)){return __last1;};
if((__pred((*(--__l1)),(*__l2)))){break;};
};};
__xcodeml_template_type_0_1 __m1=__l1;
__xcodeml_template_type_0_2 __m2=__l2;
while(true){{if(operator==(__m2,__first2)){return __m1;};
if((!(__pred((*(--__m1)),(*(--__m2)))))){{break;
};};
};};
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_0 find_end(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_1 __last2,__xcodeml_template_type_0_2 __pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::__find_end<typename add_lvalue_reference<__xcodeml_template_type_0_2>::type>(__first1,__last1,__first2,__last2,__pred,__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_0>::iterator_category>::t(),__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::iterator_category>::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 find_end(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_1 __last2)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type __v1;
typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type __v2;
return(std::__1::find_end(__first1,__last1,__first2,__last2,__xcodeml_identity<__equal_to<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_1>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_0 __find_first_of_ce(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_1 __last2,__xcodeml_template_type_0_2 __pred){{;for(;operator!=(__first1,__last1);(++__first1)){{__xcodeml_template_type_0_1 __j=__first2;for(;operator!=(__j,__last2);(++__j)){if((__pred((*__first1),(*__j)))){return __first1;};}};}};
return __last1;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_0 find_first_of(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_1 __last2,__xcodeml_template_type_0_2 __pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::__find_first_of_ce(__first1,__last1,__first2,__last2,__pred));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 find_first_of(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_1 __last2)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type __v1;
typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type __v2;
return(std::__1::__find_first_of_ce(__first1,__last1,__first2,__last2,__xcodeml_identity<__equal_to<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_1>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 adjacent_find(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator!=(__first,__last)){{__xcodeml_template_type_0_0 __i=__first;
while(operator!=((++__i),__last)){{if((__pred((*__first),(*__i)))){return __first;};
(__first=__i);
};};
};};
return __last;
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 adjacent_find(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type __v;
return(std::__1::adjacent_find(__first,__last,__xcodeml_identity<__equal_to<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename iterator_traits<__xcodeml_template_type_0_0>::difference_type count(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 const&__value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __r=0;
{;for(;operator!=(__first,__last);(++__first)){if(operator==((*__first),__value_)){(++__r);};}};
return __r;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename iterator_traits<__xcodeml_template_type_0_0>::difference_type count_if(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __r=0;
{;for(;operator!=(__first,__last);(++__first)){if((__pred((*__first)))){(++__r);};}};
return __r;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>mismatch(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_2 __pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first1,__last1);((++__first1),((void)(++__first2)))){if((!(__pred((*__first1),(*__first2))))){break;};}};
return __xcodeml_identity<pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1> >::t(__first1,__first2);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>mismatch(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type __v1;
typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type __v2;
return(std::__1::mismatch(__first1,__last1,__first2,__xcodeml_identity<__equal_to<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_1>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>bool equal(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_2 __pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first1,__last1);((++__first1),((void)(++__first2)))){if((!(__pred((*__first1),(*__first2))))){return false;};}};
return true;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool equal(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type __v1;
typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type __v2;
return(std::__1::equal(__first1,__last1,__first2,__xcodeml_identity<__equal_to<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_1>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>bool is_permutation(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_2 __pred){{;for(;operator!=(__first1,__last1);((++__first1),((void)(++__first2)))){if((!(__pred((*__first1),(*__first2))))){break;};}};
if(operator==(__first1,__last1)){return true;};
typedef typename iterator_traits<__xcodeml_template_type_0_0>::difference_type _D1;
typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __l1=(std::__1::distance(__first1,__last1));
if(operator==(__l1,__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_0>::difference_type>::t(1))){return false;};
__xcodeml_template_type_0_1 __last2=(std::__1::next(__first2,__l1));
{__xcodeml_template_type_0_0 __i=__first1;for(;operator!=(__i,__last1);(++__i)){{__xcodeml_template_type_0_0 __match=__first1;
{;for(;operator!=(__match,__i);(++__match)){if((__pred((*__match),(*__i)))){break;};}};
if(operator==(__match,__i)){{typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __c2=0;
{__xcodeml_template_type_0_1 __j=__first2;for(;operator!=(__j,__last2);(++__j)){if((__pred((*__i),(*__j)))){(++__c2);};}};
if(operator==(__c2,0)){return false;};
typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __c1=1;
{__xcodeml_template_type_0_0 __j=(std::__1::next(__i));for(;operator!=(__j,__last1);(++__j)){if((__pred((*__i),(*__j)))){(++__c1);};}};
if(operator!=(__c1,__c2)){return false;};
};};
};}};
return true;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool is_permutation(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type __v1;
typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type __v2;
return(std::__1::is_permutation(__first1,__last1,__first2,__xcodeml_identity<__equal_to<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_1>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_0 search(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_1 __last2,__xcodeml_template_type_0_2 __pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::__search<typename add_lvalue_reference<__xcodeml_template_type_0_2>::type>(__first1,__last1,__first2,__last2,__pred,__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_0>::iterator_category>::t(),__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::iterator_category>::t())).first;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 search(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_1 __last2)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type __v1;
typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type __v2;
return(std::__1::search(__first1,__last1,__first2,__last2,__xcodeml_identity<__equal_to<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_1>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>__xcodeml_template_type_0_1 __search_n(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_2 __count,__xcodeml_template_type_0_3 const&__value_,__xcodeml_template_type_0_0 __pred,class::std::__1::forward_iterator_tag){if(operator<=(__count,0)){return __first;};
while(true){{while(true){{if(operator==(__first,__last)){return __last;};
if((__pred((*__first),__value_))){break;};
(++__first);
};};
__xcodeml_template_type_0_1 __m=__first;
__xcodeml_template_type_0_2 __c=0;
while(true){{if(operator==((++__c),__count)){return __first;};
if(operator==((++__m),__last)){return __last;};
if((!(__pred((*__m),__value_)))){{(__first=__m);
(++__first);
break;
};};
};};
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>__xcodeml_template_type_0_1 __search_n(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_2 __count,__xcodeml_template_type_0_3 const&__value_,__xcodeml_template_type_0_0 __pred,class::std::__1::random_access_iterator_tag){if(operator<=(__count,0)){return __first;};
__xcodeml_template_type_0_2 __len=static_cast<__xcodeml_template_type_0_2>(operator-(__last,__first));
if(operator<(__len,__count)){return __last;};
__xcodeml_template_type_0_1 const __s=operator-(__last,operator-(__count,1));
while(true){{while(true){{if(operator>=(__first,__s)){return __last;};
if((__pred((*__first),__value_))){break;};
(++__first);
};};
__xcodeml_template_type_0_1 __m=__first;
__xcodeml_template_type_0_2 __c=0;
while(true){{if(operator==((++__c),__count)){return __first;};
(++__m);
if((!(__pred((*__m),__value_)))){{(__first=__m);
(++__first);
break;
};};
};};
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>__xcodeml_template_type_0_0 search_n(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __count,__xcodeml_template_type_0_2 const&__value_,__xcodeml_template_type_0_3 __pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::__search_n<typename add_lvalue_reference<__xcodeml_template_type_0_3>::type>(__first,__last,(__convert_to_integral(__count)),__value_,__pred,__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_0>::iterator_category>::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_0 search_n(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __count,__xcodeml_template_type_0_2 const&__value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type __v;
return(std::__1::search_n(__first,__last,(__convert_to_integral(__count)),__value_,__xcodeml_identity<__equal_to<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,__xcodeml_template_type_0_2> >::t()));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __unwrap_iter(__xcodeml_template_type_0_0 __i)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __i;
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0(*)>::type __unwrap_iter(move_iterator<__xcodeml_template_type_0_0(*)>__i)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__i.base());
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0(*)>::type __unwrap_iter(__wrap_iter<__xcodeml_template_type_0_0(*)>__i)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__i.base());
}
template<typename __xcodeml_template_type_0_0>typename enable_if<expression,__xcodeml_template_type_0_0 const(*)>::type __unwrap_iter(__wrap_iter<__xcodeml_template_type_0_0 const(*)>__i)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__i.base());
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 __copy(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first,__last);((++__first),((void)(++__result)))){((*__result)=(*__first));}};
return __result;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename enable_if<expression,__xcodeml_template_type_0_1(*)>::type __copy(__xcodeml_template_type_0_0(*__first),__xcodeml_template_type_0_0(*__last),__xcodeml_template_type_0_1(*__result))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{unsigned long const __n=static_cast<unsigned long>(operator-(__last,__first));
if((__n>0)){(std::__1::memmove(__result,__first,(__n*(sizeof(__xcodeml_template_type_0_1)))));};
return operator+(__result,__n);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 copy(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::__copy((__unwrap_iter(__first)),(__unwrap_iter(__last)),(__unwrap_iter(__result))));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 __copy_backward(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{while(operator!=(__first,__last)){((*(--__result))=(*(--__last)));};
return __result;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename enable_if<expression,__xcodeml_template_type_0_1(*)>::type __copy_backward(__xcodeml_template_type_0_0(*__first),__xcodeml_template_type_0_0(*__last),__xcodeml_template_type_0_1(*__result))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{unsigned long const __n=static_cast<unsigned long>(operator-(__last,__first));
if((__n>0)){{(__result-=__n);
(std::__1::memmove(__result,__first,(__n*(sizeof(__xcodeml_template_type_0_1)))));
};};
return __result;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 copy_backward(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::__copy_backward((__unwrap_iter(__first)),(__unwrap_iter(__last)),(__unwrap_iter(__result))));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_1 copy_if(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __result,__xcodeml_template_type_0_2 __pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first,__last);(++__first)){{if((__pred((*__first)))){{((*__result)=(*__first));
(++__result);
};};
};}};
return __result;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>typename enable_if<expression,__xcodeml_template_type_0_2>::type copy_n(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_1 __orig_n,__xcodeml_template_type_0_2 __result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef decltype ()_IntegralSize;
decltype ()__n=__orig_n;
if(operator>(__n,0)){{((*__result)=(*__first));
(++__result);
{(--__n);for(;operator>(__n,0);(--__n)){{(++__first);
((*__result)=(*__first));
(++__result);
};}};
};};
return __result;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>typename enable_if<expression,__xcodeml_template_type_0_2>::type copy_n(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_1 __orig_n,__xcodeml_template_type_0_2 __result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef decltype ()_IntegralSize;
decltype ()__n=__orig_n;
return(std::__1::copy(__first,operator+(__first,__n),__result));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 __move(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first,__last);((++__first),((void)(++__result)))){((*__result)=(std::__1::move((*__first))));}};
return __result;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename enable_if<expression,__xcodeml_template_type_0_1(*)>::type __move(__xcodeml_template_type_0_0(*__first),__xcodeml_template_type_0_0(*__last),__xcodeml_template_type_0_1(*__result))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{unsigned long const __n=static_cast<unsigned long>(operator-(__last,__first));
if((__n>0)){(std::__1::memmove(__result,__first,(__n*(sizeof(__xcodeml_template_type_0_1)))));};
return operator+(__result,__n);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 move(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::__move((__unwrap_iter(__first)),(__unwrap_iter(__last)),(__unwrap_iter(__result))));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 __move_backward(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{while(operator!=(__first,__last)){((*(--__result))=(std::__1::move((*(--__last)))));};
return __result;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>typename enable_if<expression,__xcodeml_template_type_0_1(*)>::type __move_backward(__xcodeml_template_type_0_0(*__first),__xcodeml_template_type_0_0(*__last),__xcodeml_template_type_0_1(*__result))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{unsigned long const __n=static_cast<unsigned long>(operator-(__last,__first));
if((__n>0)){{(__result-=__n);
(std::__1::memmove(__result,__first,(__n*(sizeof(__xcodeml_template_type_0_1)))));
};};
return __result;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 move_backward(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::__move_backward((__unwrap_iter(__first)),(__unwrap_iter(__last)),(__unwrap_iter(__result))));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_1 transform(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __result,__xcodeml_template_type_0_2 __op)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first,__last);((++__first),((void)(++__result)))){((*__result)=(__op((*__first))));}};
return __result;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>__xcodeml_template_type_0_2 transform(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_2 __result,__xcodeml_template_type_0_3 __binary_op)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first1,__last1);(((++__first1),((void)(++__first2))),(++__result))){((*__result)=(__binary_op((*__first1),(*__first2))));}};
return __result;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void replace(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 const&__old_value,__xcodeml_template_type_0_1 const&__new_value)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first,__last);(++__first)){if(operator==((*__first),__old_value)){((*__first)=__new_value);};}};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>void replace_if(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __pred,__xcodeml_template_type_0_2 const&__new_value)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first,__last);(++__first)){if((__pred((*__first)))){((*__first)=__new_value);};}};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_1 replace_copy(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __result,__xcodeml_template_type_0_2 const&__old_value,__xcodeml_template_type_0_2 const&__new_value)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first,__last);((++__first),((void)(++__result)))){if(operator==((*__first),__old_value)){((*__result)=__new_value);}else{((*__result)=(*__first));};}};
return __result;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>__xcodeml_template_type_0_1 replace_copy_if(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __result,__xcodeml_template_type_0_2 __pred,__xcodeml_template_type_0_3 const&__new_value)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first,__last);((++__first),((void)(++__result)))){if((__pred((*__first)))){((*__result)=__new_value);}else{((*__result)=(*__first));};}};
return __result;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_0 __fill_n(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_1 __n,__xcodeml_template_type_0_2 const&__value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator>(__n,0);((++__first),((void)(--__n)))){((*__first)=__value_);}};
return __first;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_0 fill_n(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_1 __n,__xcodeml_template_type_0_2 const&__value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::__fill_n(__first,(__convert_to_integral(__n)),__value_));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void __fill(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 const&__value_,class::std::__1::forward_iterator_tag)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first,__last);(++__first)){((*__first)=__value_);}};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void __fill(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 const&__value_,class::std::__1::random_access_iterator_tag)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::fill_n(__first,operator-(__last,__first),__value_));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void fill(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 const&__value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::__fill(__first,__last,__value_,__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_0>::iterator_category>::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void generate(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __gen)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first,__last);(++__first)){((*__first)=(__gen()));}};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_0 generate_n(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_1 __orig_n,__xcodeml_template_type_0_2 __gen)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef decltype ()_IntegralSize;
decltype ()__n=__orig_n;
{;for(;operator>(__n,0);((++__first),((void)(--__n)))){((*__first)=(__gen()));}};
return __first;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 remove(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 const&__value_){(__first=(std::__1::find(__first,__last,__value_)));
if(operator!=(__first,__last)){{__xcodeml_template_type_0_0 __i=__first;
while(operator!=((++__i),__last)){{if((!operator==((*__i),__value_))){{((*__first)=(std::__1::move((*__i))));
(++__first);
};};
};};
};};
return __first;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 remove_if(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __pred){(__first=(std::__1::find_if<__xcodeml_template_type_0_0,typename add_lvalue_reference<__xcodeml_template_type_0_1>::type>(__first,__last,__pred)));
if(operator!=(__first,__last)){{__xcodeml_template_type_0_0 __i=__first;
while(operator!=((++__i),__last)){{if((!(__pred((*__i))))){{((*__first)=(std::__1::move((*__i))));
(++__first);
};};
};};
};};
return __first;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_1 remove_copy(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __result,__xcodeml_template_type_0_2 const&__value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first,__last);(++__first)){{if((!operator==((*__first),__value_))){{((*__result)=(*__first));
(++__result);
};};
};}};
return __result;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_1 remove_copy_if(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __result,__xcodeml_template_type_0_2 __pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first,__last);(++__first)){{if((!(__pred((*__first))))){{((*__result)=(*__first));
(++__result);
};};
};}};
return __result;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 unique(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __pred){(__first=(std::__1::adjacent_find<__xcodeml_template_type_0_0,typename add_lvalue_reference<__xcodeml_template_type_0_1>::type>(__first,__last,__pred)));
if(operator!=(__first,__last)){{__xcodeml_template_type_0_0 __i=__first;
{(++__i);for(;operator!=((++__i),__last);){if((!(__pred((*__first),(*__i))))){((*(++__first))=(std::__1::move((*__i))));};}};
(++__first);
};};
return __first;
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 unique(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type __v;
return(std::__1::unique(__first,__last,__xcodeml_identity<__equal_to<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_2 __unique_copy(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_2 __result,__xcodeml_template_type_0_0 __pred,class::std::__1::input_iterator_tag,class::std::__1::output_iterator_tag){if(operator!=(__first,__last)){{typename iterator_traits<__xcodeml_template_type_0_1>::value_type __t=(*__first);
((*__result)=__t);
(++__result);
while(operator!=((++__first),__last)){{if((!(__pred(__t,(*__first))))){{(__t=(*__first));
((*__result)=__t);
(++__result);
};};
};};
};};
return __result;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_2 __unique_copy(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_2 __result,__xcodeml_template_type_0_0 __pred,class::std::__1::forward_iterator_tag,class::std::__1::output_iterator_tag){if(operator!=(__first,__last)){{__xcodeml_template_type_0_1 __i=__first;
((*__result)=(*__i));
(++__result);
while(operator!=((++__first),__last)){{if((!(__pred((*__i),(*__first))))){{((*__result)=(*__first));
(++__result);
(__i=__first);
};};
};};
};};
return __result;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_2 __unique_copy(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_2 __result,__xcodeml_template_type_0_0 __pred,class::std::__1::input_iterator_tag,class::std::__1::forward_iterator_tag){if(operator!=(__first,__last)){{((*__result)=(*__first));
while(operator!=((++__first),__last)){if((!(__pred((*__result),(*__first))))){((*(++__result))=(*__first));};};
(++__result);
};};
return __result;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_1 unique_copy(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __result,__xcodeml_template_type_0_2 __pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::__unique_copy<typename add_lvalue_reference<__xcodeml_template_type_0_2>::type>(__first,__last,__result,__pred,__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_0>::iterator_category>::t(),__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::iterator_category>::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 unique_copy(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type __v;
return(std::__1::unique_copy(__first,__last,__result,__xcodeml_identity<__equal_to<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0>void __reverse(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,class::std::__1::bidirectional_iterator_tag)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{while(operator!=(__first,__last)){{if(operator==(__first,(--__last))){break;};
(std::__1::iter_swap(__first,__last));
(++__first);
};};
}
template<typename __xcodeml_template_type_0_0>void __reverse(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,class::std::__1::random_access_iterator_tag)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator!=(__first,__last)){{;for(;operator<(__first,(--__last));(++__first)){(std::__1::iter_swap(__first,__last));}};};
}
template<typename __xcodeml_template_type_0_0>void reverse(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::__reverse(__first,__last,__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_0>::iterator_category>::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 reverse_copy(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{{;for(;operator!=(__first,__last);(++__result)){((*__result)=(*(--__last)));}};
return __result;
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __rotate_left(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last){typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type value_type;
typename iterator_traits<__xcodeml_template_type_0_0>::value_type __tmp=(std::__1::move((*__first)));
__xcodeml_template_type_0_0 __lm1=(std::__1::move((std::__1::next(__first)),__last,__first));
((*__lm1)=(std::__1::move(__tmp)));
return __lm1;
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __rotate_right(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last){typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type value_type;
__xcodeml_template_type_0_0 __lm1=(std::__1::prev(__last));
typename iterator_traits<__xcodeml_template_type_0_0>::value_type __tmp=(std::__1::move((*__lm1)));
__xcodeml_template_type_0_0 __fp1=(std::__1::move_backward(__first,__lm1,__last));
((*__first)=(std::__1::move(__tmp)));
return __fp1;
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __rotate_forward(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __middle,__xcodeml_template_type_0_0 __last){__xcodeml_template_type_0_0 __i=__middle;
while(true){{(swap((*__first),(*__i)));
(++__first);
if(operator==((++__i),__last)){break;};
if(operator==(__first,__middle)){(__middle=__i);};
};};
__xcodeml_template_type_0_0 __r=__first;
if(operator!=(__first,__middle)){{(__i=__middle);
while(true){{(swap((*__first),(*__i)));
(++__first);
if(operator==((++__i),__last)){{if(operator==(__first,__middle)){break;};
(__i=__middle);
};}else{if(operator==(__first,__middle)){(__middle=__i);};};
};};
};};
return __r;
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __algo_gcd(__xcodeml_template_type_0_0 __x,__xcodeml_template_type_0_0 __y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{do{{__xcodeml_template_type_0_0 __t=(__x%__y);
(__x=__y);
(__y=__t);
};}while(__y);
return __x;
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __rotate_gcd(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __middle,__xcodeml_template_type_0_0 __last){typedef typename iterator_traits<__xcodeml_template_type_0_0>::difference_type difference_type;
typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type value_type;
typename iterator_traits<__xcodeml_template_type_0_0>::difference_type const __m1=operator-(__middle,__first);
typename iterator_traits<__xcodeml_template_type_0_0>::difference_type const __m2=operator-(__last,__middle);
if(operator==(__m1,__m2)){{(std::__1::swap_ranges(__first,__middle,__middle));
return __middle;
};};
typename iterator_traits<__xcodeml_template_type_0_0>::difference_type const __g=(std::__1::__algo_gcd(__m1,__m2));
{__xcodeml_template_type_0_0 __p=operator+(__first,__g);for(;operator!=(__p,__first);){{typename iterator_traits<__xcodeml_template_type_0_0>::value_type __t=(std::__1::move((*(--__p))));
__xcodeml_template_type_0_0 __p1=__p;
__xcodeml_template_type_0_0 __p2=operator+(__p1,__m1);
do{{((*__p1)=(std::__1::move((*__p2))));
(__p1=__p2);
typename iterator_traits<__xcodeml_template_type_0_0>::difference_type const __d=operator-(__last,__p2);
if(operator<(__m1,__d)){(__p2+=__m1);}else{(__p2=operator+(__first,operator-(__m1,__d)));};
};}while(operator!=(__p2,__p));
((*__p1)=(std::__1::move(__t)));
};}};
return operator+(__first,__m2);
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __rotate(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __middle,__xcodeml_template_type_0_0 __last,class::std::__1::forward_iterator_tag)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type value_type;
if(std::__1::is_trivially_move_assignable<typename iterator_traits<__xcodeml_template_type_0_0>::value_type>::value){{if(operator==((std::__1::next(__first)),__middle)){return(std::__1::__rotate_left(__first,__last));};
};};
return(std::__1::__rotate_forward(__first,__middle,__last));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __rotate(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __middle,__xcodeml_template_type_0_0 __last,class::std::__1::bidirectional_iterator_tag)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type value_type;
if(std::__1::is_trivially_move_assignable<typename iterator_traits<__xcodeml_template_type_0_0>::value_type>::value){{if(operator==((std::__1::next(__first)),__middle)){return(std::__1::__rotate_left(__first,__last));};
if(operator==((std::__1::next(__middle)),__last)){return(std::__1::__rotate_right(__first,__last));};
};};
return(std::__1::__rotate_forward(__first,__middle,__last));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 __rotate(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __middle,__xcodeml_template_type_0_0 __last,class::std::__1::random_access_iterator_tag)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type value_type;
if(std::__1::is_trivially_move_assignable<typename iterator_traits<__xcodeml_template_type_0_0>::value_type>::value){{if(operator==((std::__1::next(__first)),__middle)){return(std::__1::__rotate_left(__first,__last));};
if(operator==((std::__1::next(__middle)),__last)){return(std::__1::__rotate_right(__first,__last));};
return(std::__1::__rotate_gcd(__first,__middle,__last));
};};
return(std::__1::__rotate_forward(__first,__middle,__last));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 rotate(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __middle,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator==(__first,__middle)){return __last;};
if(operator==(__middle,__last)){return __first;};
return(std::__1::__rotate(__first,__middle,__last,__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_0>::iterator_category>::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 rotate_copy(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __middle,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::copy(__first,__middle,(std::__1::copy(__middle,__last,__result))));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 min_element(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert(__is_forward_iterator<__xcodeml_template_type_0_0>::value,"std::min_element requires a ForwardIterator");
if(operator!=(__first,__last)){{__xcodeml_template_type_0_0 __i=__first;
while(operator!=((++__i),__last)){if((__comp((*__i),(*__first)))){(__first=__i);};};
};};
return __first;
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 min_element(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::min_element(__first,__last,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 const&min(__xcodeml_template_type_0_0 const&__a,__xcodeml_template_type_0_0 const&__b,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((__comp(__b,__a))?__b:__a);
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 const&min(__xcodeml_template_type_0_0 const&__a,__xcodeml_template_type_0_0 const&__b)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::min(__a,__b,__xcodeml_identity<__less<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 min(initializer_list<__xcodeml_template_type_0_0>__t,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*(std::__1::min_element((__t.begin()),(__t.end()),__comp)));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 min(initializer_list<__xcodeml_template_type_0_0>__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*(std::__1::min_element((__t.begin()),(__t.end()),__xcodeml_identity<__less<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0> >::t())));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 max_element(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{static_assert(__is_forward_iterator<__xcodeml_template_type_0_0>::value,"std::max_element requires a ForwardIterator");
if(operator!=(__first,__last)){{__xcodeml_template_type_0_0 __i=__first;
while(operator!=((++__i),__last)){if((__comp((*__first),(*__i)))){(__first=__i);};};
};};
return __first;
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 max_element(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::max_element(__first,__last,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 const&max(__xcodeml_template_type_0_0 const&__a,__xcodeml_template_type_0_0 const&__b,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((__comp(__a,__b))?__b:__a);
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 const&max(__xcodeml_template_type_0_0 const&__a,__xcodeml_template_type_0_0 const&__b)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::max(__a,__b,__xcodeml_identity<__less<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 max(initializer_list<__xcodeml_template_type_0_0>__t,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*(std::__1::max_element((__t.begin()),(__t.end()),__comp)));
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 max(initializer_list<__xcodeml_template_type_0_0>__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*(std::__1::max_element((__t.begin()),(__t.end()),__xcodeml_identity<__less<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0> >::t())));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>minmax_element(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __comp){static_assert(__is_forward_iterator<__xcodeml_template_type_0_0>::value,"std::minmax_element requires a ForwardIterator");
pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>__result=__first __first;
if(operator!=(__first,__last)){{if(operator!=((++__first),__last)){{if((__comp((*__first),(*__result.first)))){(__result.first=__first);}else{(__result.second=__first);};
while(operator!=((++__first),__last)){{__xcodeml_template_type_0_0 __i=__first;
if(operator==((++__first),__last)){{if((__comp((*__i),(*__result.first)))){(__result.first=__i);}else{if((!(__comp((*__i),(*__result.second))))){(__result.second=__i);};};
break;
};}else{{if((__comp((*__first),(*__i)))){{if((__comp((*__first),(*__result.first)))){(__result.first=__first);};
if((!(__comp((*__i),(*__result.second))))){(__result.second=__i);};
};}else{{if((__comp((*__i),(*__result.first)))){(__result.first=__i);};
if((!(__comp((*__first),(*__result.second))))){(__result.second=__first);};
};};
};};
};};
};};
};};
return __result;
}
template<typename __xcodeml_template_type_0_0>pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>minmax_element(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::minmax_element(__first,__last,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>pair<__xcodeml_template_type_0_0 const&,__xcodeml_template_type_0_0 const&>minmax(__xcodeml_template_type_0_0 const&__a,__xcodeml_template_type_0_0 const&__b,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((__comp(__b,__a))?__xcodeml_identity<pair<__xcodeml_template_type_0_0 const&,__xcodeml_template_type_0_0 const&> >::t(__b,__a):__xcodeml_identity<pair<__xcodeml_template_type_0_0 const&,__xcodeml_template_type_0_0 const&> >::t(__a,__b));
}
template<typename __xcodeml_template_type_0_0>pair<__xcodeml_template_type_0_0 const&,__xcodeml_template_type_0_0 const&>minmax(__xcodeml_template_type_0_0 const&__a,__xcodeml_template_type_0_0 const&__b)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::minmax(__a,__b,__xcodeml_identity<__less<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>minmax(initializer_list<__xcodeml_template_type_0_0>__t,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename initializer_list<__xcodeml_template_type_0_0>::const_iterator _Iter;
typename initializer_list<__xcodeml_template_type_0_0>::const_iterator __first=(__t.begin());
typename initializer_list<__xcodeml_template_type_0_0>::const_iterator __last=(__t.end());
pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>__result=(*__first)(*__first);
(++__first);
if(operator==(((__t.size())%2),0)){{if((__comp((*__first),__result.first))){(__result.first=(*__first));}else{(__result.second=(*__first));};
(++__first);
};};
while(operator!=(__first,__last)){{__xcodeml_template_type_0_0 __prev=(*(__first++));
if((__comp((*__first),__prev))){{if((__comp((*__first),__result.first))){(__result.first=(*__first));};
if((!(__comp(__prev,__result.second)))){(__result.second=__prev);};
};}else{{if((__comp(__prev,__result.first))){(__result.first=__prev);};
if((!(__comp((*__first),__result.second)))){(__result.second=(*__first));};
};};
(__first++);
};};
return __result;
}
template<typename __xcodeml_template_type_0_0>pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>minmax(initializer_list<__xcodeml_template_type_0_0>__t)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::minmax(__t,__xcodeml_identity<__less<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0> >::t()));
}
template<unsigned long long _Xp,unsigned long _Rp>class __log2_imp{public:static unsigned long const value=((_Xp&(((unsigned long long)1)<<_Rp))?_Rp:__log2_imp<expression,expression>::value);
}
;
;
template<unsigned long long _Xp>class __log2_imp<expression,0>{public:static unsigned long const value=0;
}
;
template<unsigned long _Rp>class __log2_imp<0,expression>{public:static unsigned long const value=(_Rp+1);
}
;
template<typename __xcodeml_template_type_0_0,__xcodeml_template_type_0_0 _Xp>class __log2{public:static unsigned long const value=__log2_imp<expression,expression>::value;
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __independent_bits_engine{public:
public:typedef __xcodeml_template_type_0_1 result_type;
private:
private:typedef typename __xcodeml_template_type_0_0::result_type _Engine_result_type;
private:typedef typename conditional<expression,__xcodeml_template_type_0_1,typename __xcodeml_template_type_0_0::result_type>::type _Working_result_type;
private:__xcodeml_template_type_0_0&__e_;
private:unsigned long __w_;
private:unsigned long __w0_;
private:unsigned long __n_;
private:unsigned long __n0_;
private:typename conditional<expression,__xcodeml_template_type_0_1,typename __xcodeml_template_type_0_0::result_type>::type __y0_;
private:typename conditional<expression,__xcodeml_template_type_0_1,typename __xcodeml_template_type_0_0::result_type>::type __y1_;
private:typename __xcodeml_template_type_0_0::result_type __mask0_;
private:typename __xcodeml_template_type_0_0::result_type __mask1_;
private:constexpr static typename conditional<expression,__xcodeml_template_type_0_1,typename __xcodeml_template_type_0_0::result_type>::type const _Rp=operator+(operator-((__xcodeml_template_type_0_0::max()),(__xcodeml_template_type_0_0::min())),__xcodeml_identity<typename conditional<expression,__xcodeml_template_type_0_1,typename __xcodeml_template_type_0_0::result_type>::type>::t(1));
private:constexpr static unsigned long const __m=__log2<typename conditional<expression,__xcodeml_template_type_0_1,typename __xcodeml_template_type_0_0::result_type>::type,expression>::value;
private:constexpr static unsigned long const _WDt=numeric_limits<typename conditional<expression,__xcodeml_template_type_0_1,typename __xcodeml_template_type_0_0::result_type>::type>::digits;
private:constexpr static unsigned long const _EDt=numeric_limits<typename __xcodeml_template_type_0_0::result_type>::digits;
public:
public:__independent_bits_engine(__xcodeml_template_type_0_0&__e,unsigned long __w);
public:__xcodeml_template_type_0_1 operator()(){return(this->__eval(__xcodeml_identity<integral_constant<bool,expression> >::t()));
}
private:
private:__xcodeml_template_type_0_1 __eval(class::std::__1::integral_constant<bool,0>);
private:__xcodeml_template_type_0_1 __eval(class::std::__1::integral_constant<bool,1>);
}
;
;
__independent_bits_engine::__independent_bits_engine(__xcodeml_template_type_0_0&__e,unsigned long __w):__e_(__e),__w_(__w){(this->__n_=operator+((this->__w_/__m),operator!=((this->__w_%__m),0)));
(this->__w0_=(this->__w_/this->__n_));
if(operator==(_Rp,0)){(this->__y0_=_Rp);}else{if(operator<(this->__w0_,_WDt)){(this->__y0_=operator<<((_Rp>>this->__w0_),this->__w0_));}else{(this->__y0_=0);};};
if(operator>(operator-(_Rp,this->__y0_),(this->__y0_/this->__n_))){{(++this->__n_);
(this->__w0_=(this->__w_/this->__n_));
if(operator<(this->__w0_,_WDt)){(this->__y0_=operator<<((_Rp>>this->__w0_),this->__w0_));}else{(this->__y0_=0);};
};};
(this->__n0_=operator-(this->__n_,(this->__w_%this->__n_)));
if(operator<(this->__w0_,(_WDt-1))){(this->__y1_=operator<<((_Rp>>operator+(this->__w0_,1)),operator+(this->__w0_,1)));}else{(this->__y1_=0);};
(this->__mask0_=(operator>(this->__w0_,0)?(__xcodeml_identity<typename __xcodeml_template_type_0_0::result_type>::t((~0))>>operator-(_EDt,this->__w0_)):__xcodeml_identity<typename __xcodeml_template_type_0_0::result_type>::t(0)));
(this->__mask1_=(operator<(this->__w0_,(_EDt-1))?(__xcodeml_identity<typename __xcodeml_template_type_0_0::result_type>::t((~0))>>operator-(_EDt,operator+(this->__w0_,1))):__xcodeml_identity<typename __xcodeml_template_type_0_0::result_type>::t((~0))));
}
__xcodeml_template_type_0_1 __independent_bits_engine::__eval(class::std::__1::integral_constant<bool,0>){return static_cast<__xcodeml_template_type_0_1>(((this->__e_())&this->__mask0_));
}
__xcodeml_template_type_0_1 __independent_bits_engine::__eval(class::std::__1::integral_constant<bool,1>){unsigned long const _WRt=numeric_limits<__xcodeml_template_type_0_1>::.digits;
__xcodeml_template_type_0_1 _Sp=0;
{unsigned long __k=0;for(;operator<(__k,this->__n0_);(++__k)){{typename __xcodeml_template_type_0_0::result_type __u;
do{{(__u=operator-((this->__e_()),(__xcodeml_template_type_0_0::.min())));
};}while(operator>=(__u,this->__y0_));
if(operator<(this->__w0_,_WRt)){(_Sp<<=this->__w0_);}else{(_Sp=0);};
(_Sp+=(__u&this->__mask0_));
};}};
{unsigned long __k=this->__n0_;for(;operator<(__k,this->__n_);(++__k)){{typename __xcodeml_template_type_0_0::result_type __u;
do{{(__u=operator-((this->__e_()),(__xcodeml_template_type_0_0::.min())));
};}while(operator>=(__u,this->__y1_));
if(operator<(this->__w0_,(_WRt-1))){(_Sp<<=operator+(this->__w0_,1));}else{(_Sp=0);};
(_Sp+=(__u&this->__mask1_));
};}};
return _Sp;
}
template<typename __xcodeml_template_type_0_0>class uniform_int_distribution{public:
public:typedef __xcodeml_template_type_0_0 result_type;
public:class param_type{private:__xcodeml_template_type_0_0 __a_;
private:__xcodeml_template_type_0_0 __b_;
public:
public:typedef class uniform_int_distribution distribution_type;
public:param_type(__xcodeml_template_type_0_0 __a,__xcodeml_template_type_0_0 __b):__a_(__a),__b_(__b){}
public:__xcodeml_template_type_0_0 a()const{return this->__a_;
}
public:__xcodeml_template_type_0_0 b()const{return this->__b_;
}
public:friend bool operator==(class param_type const&__x,class param_type const&__y){return(operator==(__x.__a_,__y.__a_)&&operator==(__x.__b_,__y.__b_));
};
public:friend bool operator!=(class param_type const&__x,class param_type const&__y){return(!operator==(__x,__y));
};
}
;
private:
private:class::std::__1::uniform_int_distribution::param_type __p_;
public:
public:uniform_int_distribution(__xcodeml_template_type_0_0 __a,__xcodeml_template_type_0_0 __b):__p_(__xcodeml_identity<class::std::__1::uniform_int_distribution::param_type>::t(__a,__b)){}
public:uniform_int_distribution(class param_type const&__p):__p_(__p){}
public:void reset(){}
public:template<typename __xcodeml_template_type_1_0>__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_1_0&__g){return((*this)(__g,this->__p_));
}
public:template<typename __xcodeml_template_type_1_0>__xcodeml_template_type_0_0 operator()(__xcodeml_template_type_1_0&__g,class param_type const&__p)
public:__xcodeml_template_type_0_0 a()const{return(this->__p_.a());
}
public:__xcodeml_template_type_0_0 b()const{return(this->__p_.b());
}
public:class::std::__1::uniform_int_distribution::param_type param()const{return this->__p_;
}
public:void param(class param_type const&__p){(this->__p_=__p);
}
public:__xcodeml_template_type_0_0 min()const{return(this->a());
}
public:__xcodeml_template_type_0_0 max()const{return(this->b());
}
public:friend bool operator==(class uniform_int_distribution const&__x,class uniform_int_distribution const&__y){return operator==(__x.__p_,__y.__p_);
};
public:friend bool operator!=(class uniform_int_distribution const&__x,class uniform_int_distribution const&__y){return(!operator==(__x,__y));
};
}
;
;
template<typename __xcodeml_template_type_1_0>__xcodeml_template_type_0_0 uniform_int_distribution::operator()(__xcodeml_template_type_1_0&__g,class param_type const&__p)/*gccattr no_sanitize:*/{typedef typename conditional<expression,unsigned int,unsigned long>::type _UIntType;
typename conditional<expression,unsigned int,unsigned long>::type const _Rp=operator+(operator-(__xcodeml_identity<typename conditional<expression,unsigned int,unsigned long>::type>::t((__p.b())),__xcodeml_identity<typename conditional<expression,unsigned int,unsigned long>::type>::t((__p.a()))),__xcodeml_identity<typename conditional<expression,unsigned int,unsigned long>::type>::t(1));
if(operator==(_Rp,1)){return(__p.a());};
unsigned long const _Dt=numeric_limits<typename conditional<expression,unsigned int,unsigned long>::type>::.digits;
typedef __independent_bits_engine<__xcodeml_template_type_1_0,typename conditional<expression,unsigned int,unsigned long>::type>_Eng;
if(operator==(_Rp,0)){return static_cast<__xcodeml_template_type_0_0>((__xcodeml_identity<__independent_bits_engine<__xcodeml_template_type_1_0,typename conditional<expression,unsigned int,unsigned long>::type> >::t(__g,_Dt)()));};
unsigned long __w=operator-(operator-(_Dt,(__libcpp_clz(_Rp))),1);
if(operator!=((_Rp&((std::numeric_limits<typename conditional<expression,unsigned int,unsigned long>::type>::.max())>>(_Dt-__w))),0)){(++__w);};
__independent_bits_engine<__xcodeml_template_type_1_0,typename conditional<expression,unsigned int,unsigned long>::type>__e=__g __w;
typename conditional<expression,unsigned int,unsigned long>::type __u;
do{{(__u=(__e()));
};}while(operator>=(__u,_Rp));
return static_cast<__xcodeml_template_type_0_0>(operator+(__u,(__p.a())));
}
class __rs_default/*gccattr visibility:*/;
class::std::__1::__rs_default __rs_get()/*gccattr visibility:*/;
class __rs_default{private:static unsigned int __c_;
private:__rs_default();
public:
public:typedef unsigned int result_type;
public:static unsigned int const _Min=0;
public:static unsigned int const _Max=0xFFFFFFFF;
public:__rs_default(class __rs_default const&);
public:~__rs_default();
public:unsigned int operator()();
public:static unsigned int min(){return _Min;
}
public:static unsigned int max(){return _Max;
}
public:friend class::std::__1::__rs_default __rs_get()/*gccattr visibility:*/;
}
;
class::std::__1::__rs_default __rs_get()/*gccattr visibility:*/;
template<typename __xcodeml_template_type_0_0>void random_shuffle(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last){typedef typename iterator_traits<__xcodeml_template_type_0_0>::difference_type difference_type;
typedef class::std::__1::uniform_int_distribution<long>_Dp;
typedef class::std::__1::uniform_int_distribution<long>::param_type _Pp;
typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __d=operator-(__last,__first);
if(operator>(__d,1)){{class::std::__1::uniform_int_distribution<long>__uid(0,(numeric_limits::max()));
class::std::__1::__rs_default __g=(__rs_get());
{((--__last),((void)(--__d)));for(;operator<(__first,__last);((++__first),((void)(--__d)))){{typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __i=__uid.operator()(__g,__xcodeml_identity<class::std::__1::uniform_int_distribution<long>::param_type>::t(0,__d));
if(operator!=(__i,__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_0>::difference_type>::t(0))){(swap((*__first),(*operator+(__first,__i))));};
};}};
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void random_shuffle(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1&& __rand){typedef typename iterator_traits<__xcodeml_template_type_0_0>::difference_type difference_type;
typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __d=operator-(__last,__first);
if(operator>(__d,1)){{{(--__last);for(;operator<(__first,__last);((++__first),((void)(--__d)))){{typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __i=(__rand(__d));
if(operator!=(__i,__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_0>::difference_type>::t(0))){(swap((*__first),(*operator+(__first,__i))));};
};}};
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>__xcodeml_template_type_0_1 __sample(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __output_iter,__xcodeml_template_type_0_2 __n,__xcodeml_template_type_0_3&__g,class::std::__1::input_iterator_tag)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{__xcodeml_template_type_0_2 __k=0;
{;for(;(operator!=(__first,__last)&&operator<(__k,__n));((++__first),((void)(++__k)))){((__output_iter)[__k]=(*__first));}};
__xcodeml_template_type_0_2 __sz=__k;
{;for(;operator!=(__first,__last);((++__first),((void)(++__k)))){{__xcodeml_template_type_0_2 __r=(__xcodeml_identity<uniform_int_distribution<__xcodeml_template_type_0_2> >::t(0,__k)(__g));
if(operator<(__r,__sz)){((__output_iter)[__r]=(*__first));};
};}};
return operator+(__output_iter,(std::__1::min(__n,__k)));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>__xcodeml_template_type_0_1 __sample(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __output_iter,__xcodeml_template_type_0_2 __n,__xcodeml_template_type_0_3&__g,class::std::__1::forward_iterator_tag)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{__xcodeml_template_type_0_2 __unsampled_sz=(std::__1::distance(__first,__last));
{(__n=(std::__1::min(__n,__unsampled_sz)));for(;operator!=(__n,0);(++__first)){{__xcodeml_template_type_0_2 __r=(__xcodeml_identity<uniform_int_distribution<__xcodeml_template_type_0_2> >::t(0,(--__unsampled_sz))(__g));
if(operator<(__r,__n)){{((*(__output_iter++))=(*__first));
(--__n);
};};
};}};
return __output_iter;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>__xcodeml_template_type_0_1 __sample(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __output_iter,__xcodeml_template_type_0_2 __n,__xcodeml_template_type_0_3&__g)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename iterator_traits<__xcodeml_template_type_0_0>::iterator_category _PopCategory;
typedef typename iterator_traits<__xcodeml_template_type_0_0>::difference_type _Difference;
static_assert((__is_forward_iterator<__xcodeml_template_type_0_0>::value||__is_random_access_iterator<__xcodeml_template_type_0_1>::value),"SampleIterator must meet the requirements of RandomAccessIterator");
typedef typename common_type<__xcodeml_template_type_0_2,typename iterator_traits<__xcodeml_template_type_0_0>::difference_type>/*packsize2*/::type _CommonType;
((void)0);
return(std::__1::__sample(__first,__last,__output_iter,__xcodeml_identity<typename common_type<__xcodeml_template_type_0_2,typename iterator_traits<__xcodeml_template_type_0_0>::difference_type>/*packsize2*/::type>::t(__n),__g,__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_0>::iterator_category>::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void shuffle(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1&& __g){typedef typename iterator_traits<__xcodeml_template_type_0_0>::difference_type difference_type;
typedef class::std::__1::uniform_int_distribution<long>_Dp;
typedef class::std::__1::uniform_int_distribution<long>::param_type _Pp;
typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __d=operator-(__last,__first);
if(operator>(__d,1)){{class::std::__1::uniform_int_distribution<long>__uid(0,(numeric_limits::max()));
{((--__last),(--__d));for(;operator<(__first,__last);((++__first),(--__d))){{typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __i=(__uid(__g,__xcodeml_identity<class::std::__1::uniform_int_distribution<long>::param_type>::t(0,__d)));
if(operator!=(__i,__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_0>::difference_type>::t(0))){(swap((*__first),(*operator+(__first,__i))));};
};}};
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool is_partitioned(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __pred){{;for(;operator!=(__first,__last);(++__first)){if((!(__pred((*__first))))){break;};}};
if(operator==(__first,__last)){return true;};
(++__first);
{;for(;operator!=(__first,__last);(++__first)){if((__pred((*__first)))){return false;};}};
return true;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 __partition(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __pred,class::std::__1::forward_iterator_tag){while(true){{if(operator==(__first,__last)){return __first;};
if((!(__pred((*__first))))){break;};
(++__first);
};};
{__xcodeml_template_type_0_1 __p=__first;for(;operator!=((++__p),__last);){{if((__pred((*__p)))){{(swap((*__first),(*__p)));
(++__first);
};};
};}};
return __first;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 __partition(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __pred,class::std::__1::bidirectional_iterator_tag){while(true){{while(true){{if(operator==(__first,__last)){return __first;};
if((!(__pred((*__first))))){break;};
(++__first);
};};
do{{if(operator==(__first,(--__last))){return __first;};
};}while((!(__pred((*__last)))));
(swap((*__first),(*__last)));
(++__first);
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 partition(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::__partition<typename add_lvalue_reference<__xcodeml_template_type_0_1>::type>(__first,__last,__pred,__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_0>::iterator_category>::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2>partition_copy(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __out_true,__xcodeml_template_type_0_2 __out_false,__xcodeml_template_type_0_3 __pred){{;for(;operator!=(__first,__last);(++__first)){{if((__pred((*__first)))){{((*__out_true)=(*__first));
(++__out_true);
};}else{{((*__out_false)=(*__first));
(++__out_false);
};};
};}};
return __xcodeml_identity<pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_2> >::t(__out_true,__out_false);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 partition_point(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __pred){typedef typename iterator_traits<__xcodeml_template_type_0_0>::difference_type difference_type;
typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __len=(std::__1::distance(__first,__last));
while(operator!=(__len,0)){{typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __l2=(std::__1::__half_positive(__len));
__xcodeml_template_type_0_0 __m=__first;
(std::__1::advance(__m,__l2));
if((__pred((*__m)))){{(__first=(++__m));
(__len-=operator+(__l2,1));
};}else{(__len=__l2);};
};};
return __first;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>__xcodeml_template_type_0_1 __stable_partition(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __pred,__xcodeml_template_type_0_2 __len,__xcodeml_template_type_0_3 __p,class::std::__1::forward_iterator_tag __fit){if(operator==(__len,1)){return __first;};
if(operator==(__len,2)){{__xcodeml_template_type_0_1 __m=__first;
if((__pred((*(++__m))))){{(swap((*__first),(*__m)));
return __m;
};};
return __first;
};};
if(operator<=(__len,__p.second)){{typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type value_type;
class::std::__1::__destruct_n __d(0);
unique_ptr<typename iterator_traits<__xcodeml_template_type_0_1>::value_type,class::std::__1::__destruct_n&>__h=__p.first __d;
typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*__t)=__p.first;
::new(__t)__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::t((std::__1::move((*__first))));
(__d.__incr(((typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*))0)));
(++__t);
__xcodeml_template_type_0_1 __i=__first;
while(operator!=((++__i),__last)){{if((__pred((*__i)))){{((*__first)=(std::__1::move((*__i))));
(++__first);
};}else{{::new(__t)__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::t((std::__1::move((*__i))));
(__d.__incr(((typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*))0)));
(++__t);
};};
};};
(__i=__first);
{typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*__t2)=__p.first;for(;operator<(__t2,__t);((++__t2),(++__i))){((*__i)=(std::__1::move((*__t2))));}};
return __first;
};};
__xcodeml_template_type_0_1 __m=__first;
__xcodeml_template_type_0_2 __len2=(__len/2);
(std::__1::advance(__m,__len2));
typedef typename add_lvalue_reference<__xcodeml_template_type_0_0>::type _PredRef;
__xcodeml_template_type_0_1 __first_false=(__stable_partition<typename add_lvalue_reference<__xcodeml_template_type_0_0>::type>(__first,__m,__pred,__len2,__p,__fit));
__xcodeml_template_type_0_1 __m1=__m;
__xcodeml_template_type_0_1 __second_false=__last;
__xcodeml_template_type_0_2 __len_half=operator-(__len,__len2);
while((__pred((*__m1)))){{if(operator==((++__m1),__last)){goto __second_half_done;};
(--__len_half);
};};
(__second_false=(__stable_partition<typename add_lvalue_reference<__xcodeml_template_type_0_0>::type>(__m1,__last,__pred,__len_half,__p,__fit)));
__second_half_done:return(std::__1::rotate(__first_false,__m,__second_false));
}
class __return_temporary_buffer{public:template<typename __xcodeml_template_type_0_0>void operator()(__xcodeml_template_type_0_0(*__p))const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::return_temporary_buffer(__p));
}
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 __stable_partition(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __pred,class::std::__1::forward_iterator_tag){unsigned int const __alloc_limit=3;
while(true){{if(operator==(__first,__last)){return __first;};
if((!(__pred((*__first))))){break;};
(++__first);
};};
typedef typename iterator_traits<__xcodeml_template_type_0_1>::difference_type difference_type;
typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type value_type;
typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len=(std::__1::distance(__first,__last));
pair<typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*),long>__p=0 0;
unique_ptr<typename iterator_traits<__xcodeml_template_type_0_1>::value_type,class::std::__1::__return_temporary_buffer>__h;
if(operator>=(__len,__alloc_limit)){{(__p=(std::__1::get_temporary_buffer<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>(__len)));
(__h.reset(__p.first));
};};
return(__stable_partition<typename add_lvalue_reference<__xcodeml_template_type_0_0>::type>(__first,__last,__pred,__len,__p,__xcodeml_identity<class::std::__1::forward_iterator_tag>::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>__xcodeml_template_type_0_1 __stable_partition(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __pred,__xcodeml_template_type_0_2 __len,__xcodeml_template_type_0_3 __p,class::std::__1::bidirectional_iterator_tag __bit){if(operator==(__len,2)){{(swap((*__first),(*__last)));
return __last;
};};
if(operator==(__len,3)){{__xcodeml_template_type_0_1 __m=__first;
if((__pred((*(++__m))))){{(swap((*__first),(*__m)));
(swap((*__m),(*__last)));
return __last;
};};
(swap((*__m),(*__last)));
(swap((*__first),(*__m)));
return __m;
};};
if(operator<=(__len,__p.second)){{typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type value_type;
class::std::__1::__destruct_n __d(0);
unique_ptr<typename iterator_traits<__xcodeml_template_type_0_1>::value_type,class::std::__1::__destruct_n&>__h=__p.first __d;
typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*__t)=__p.first;
::new(__t)__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::t((std::__1::move((*__first))));
(__d.__incr(((typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*))0)));
(++__t);
__xcodeml_template_type_0_1 __i=__first;
while(operator!=((++__i),__last)){{if((__pred((*__i)))){{((*__first)=(std::__1::move((*__i))));
(++__first);
};}else{{::new(__t)__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::t((std::__1::move((*__i))));
(__d.__incr(((typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*))0)));
(++__t);
};};
};};
((*__first)=(std::__1::move((*__i))));
(__i=(++__first));
{typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*__t2)=__p.first;for(;operator<(__t2,__t);((++__t2),(++__i))){((*__i)=(std::__1::move((*__t2))));}};
return __first;
};};
__xcodeml_template_type_0_1 __m=__first;
__xcodeml_template_type_0_2 __len2=(__len/2);
(std::__1::advance(__m,__len2));
__xcodeml_template_type_0_1 __m1=__m;
__xcodeml_template_type_0_1 __first_false=__first;
__xcodeml_template_type_0_2 __len_half=__len2;
while((!(__pred((*(--__m1)))))){{if(operator==(__m1,__first)){goto __first_half_done;};
(--__len_half);
};};
typedef typename add_lvalue_reference<__xcodeml_template_type_0_0>::type _PredRef;
(__first_false=(__stable_partition<typename add_lvalue_reference<__xcodeml_template_type_0_0>::type>(__first,__m1,__pred,__len_half,__p,__bit)));
__first_half_done:(__m1=__m);
__xcodeml_template_type_0_1 __second_false=__last;
(++__second_false);
(__len_half=operator-(__len,__len2));
while((__pred((*__m1)))){{if(operator==((++__m1),__last)){goto __second_half_done;};
(--__len_half);
};};
(__second_false=(__stable_partition<typename add_lvalue_reference<__xcodeml_template_type_0_0>::type>(__m1,__last,__pred,__len_half,__p,__bit)));
__second_half_done:return(std::__1::rotate(__first_false,__m,__second_false));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 __stable_partition(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __pred,class::std::__1::bidirectional_iterator_tag){typedef typename iterator_traits<__xcodeml_template_type_0_1>::difference_type difference_type;
typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type value_type;
typename iterator_traits<__xcodeml_template_type_0_1>::difference_type const __alloc_limit=4;
while(true){{if(operator==(__first,__last)){return __first;};
if((!(__pred((*__first))))){break;};
(++__first);
};};
do{{if(operator==(__first,(--__last))){return __first;};
};}while((!(__pred((*__last)))));
typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len=operator+((std::__1::distance(__first,__last)),1);
pair<typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*),long>__p=0 0;
unique_ptr<typename iterator_traits<__xcodeml_template_type_0_1>::value_type,class::std::__1::__return_temporary_buffer>__h;
if(operator>=(__len,__alloc_limit)){{(__p=(std::__1::get_temporary_buffer<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>(__len)));
(__h.reset(__p.first));
};};
return(__stable_partition<typename add_lvalue_reference<__xcodeml_template_type_0_0>::type>(__first,__last,__pred,__len,__p,__xcodeml_identity<class::std::__1::bidirectional_iterator_tag>::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 stable_partition(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __pred)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__stable_partition<typename add_lvalue_reference<__xcodeml_template_type_0_1>::type>(__first,__last,__pred,__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_0>::iterator_category>::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 is_sorted_until(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __comp){if(operator!=(__first,__last)){{__xcodeml_template_type_0_0 __i=__first;
while(operator!=((++__i),__last)){{if((__comp((*__i),(*__first)))){return __i;};
(__first=__i);
};};
};};
return __last;
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 is_sorted_until(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::is_sorted_until(__first,__last,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool is_sorted(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==((std::__1::is_sorted_until(__first,__last,__comp)),__last);
}
template<typename __xcodeml_template_type_0_0>bool is_sorted(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::is_sorted(__first,__last,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>unsigned int __sort3(__xcodeml_template_type_0_1 __x,__xcodeml_template_type_0_1 __y,__xcodeml_template_type_0_1 __z,__xcodeml_template_type_0_0 __c){unsigned int __r=0;
if((!(__c((*__y),(*__x))))){{if((!(__c((*__z),(*__y))))){return __r;};
(swap((*__y),(*__z)));
(__r=1);
if((__c((*__y),(*__x)))){{(swap((*__x),(*__y)));
(__r=2);
};};
return __r;
};};
if((__c((*__z),(*__y)))){{(swap((*__x),(*__z)));
(__r=1);
return __r;
};};
(swap((*__x),(*__y)));
(__r=1);
if((__c((*__z),(*__y)))){{(swap((*__y),(*__z)));
(__r=2);
};};
return __r;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>unsigned int __sort4(__xcodeml_template_type_0_1 __x1,__xcodeml_template_type_0_1 __x2,__xcodeml_template_type_0_1 __x3,__xcodeml_template_type_0_1 __x4,__xcodeml_template_type_0_0 __c){unsigned int __r=(__sort3<__xcodeml_template_type_0_0>(__x1,__x2,__x3,__c));
if((__c((*__x4),(*__x3)))){{(swap((*__x3),(*__x4)));
(++__r);
if((__c((*__x3),(*__x2)))){{(swap((*__x2),(*__x3)));
(++__r);
if((__c((*__x2),(*__x1)))){{(swap((*__x1),(*__x2)));
(++__r);
};};
};};
};};
return __r;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>unsigned int __sort5(__xcodeml_template_type_0_1 __x1,__xcodeml_template_type_0_1 __x2,__xcodeml_template_type_0_1 __x3,__xcodeml_template_type_0_1 __x4,__xcodeml_template_type_0_1 __x5,__xcodeml_template_type_0_0 __c)/*gccattr visibility:*/{unsigned int __r=(__sort4<__xcodeml_template_type_0_0>(__x1,__x2,__x3,__x4,__c));
if((__c((*__x5),(*__x4)))){{(swap((*__x4),(*__x5)));
(++__r);
if((__c((*__x4),(*__x3)))){{(swap((*__x3),(*__x4)));
(++__r);
if((__c((*__x3),(*__x2)))){{(swap((*__x2),(*__x3)));
(++__r);
if((__c((*__x2),(*__x1)))){{(swap((*__x1),(*__x2)));
(++__r);
};};
};};
};};
};};
return __r;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void __selection_sort(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __comp){__xcodeml_template_type_0_1 __lm1=__last;
{(--__lm1);for(;operator!=(__first,__lm1);(++__first)){{__xcodeml_template_type_0_1 __i=(std::__1::min_element<__xcodeml_template_type_0_1,typename add_lvalue_reference<__xcodeml_template_type_0_0>::type>(__first,__last,__comp));
if(operator!=(__i,__first)){(swap((*__first),(*__i)));};
};}};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void __insertion_sort(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __comp){typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type value_type;
if(operator!=(__first,__last)){{__xcodeml_template_type_0_1 __i=__first;
{(++__i);for(;operator!=(__i,__last);(++__i)){{__xcodeml_template_type_0_1 __j=__i;
typename iterator_traits<__xcodeml_template_type_0_1>::value_type __t=(std::__1::move((*__j)));
{__xcodeml_template_type_0_1 __k=__i;for(;(operator!=(__k,__first)&&(__comp(__t,(*(--__k)))));(--__j)){((*__j)=(std::__1::move((*__k))));}};
((*__j)=(std::__1::move(__t)));
};}};
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void __insertion_sort_3(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __comp){typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type value_type;
__xcodeml_template_type_0_1 __j=operator+(__first,2);
(__sort3<__xcodeml_template_type_0_0>(__first,operator+(__first,1),__j,__comp));
{__xcodeml_template_type_0_1 __i=operator+(__j,1);for(;operator!=(__i,__last);(++__i)){{if((__comp((*__i),(*__j)))){{typename iterator_traits<__xcodeml_template_type_0_1>::value_type __t=(std::__1::move((*__i)));
__xcodeml_template_type_0_1 __k=__j;
(__j=__i);
do{{((*__j)=(std::__1::move((*__k))));
(__j=__k);
};}while((operator!=(__j,__first)&&(__comp(__t,(*(--__k))))));
((*__j)=(std::__1::move(__t)));
};};
(__j=__i);
};}};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool __insertion_sort_incomplete(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __comp){switch(operator-(__last,__first)){case 0:case 1:return true;
case 2:if((__comp((*(--__last)),(*__first)))){(swap((*__first),(*__last)));};
return true;
case 3:(std::__1::__sort3<__xcodeml_template_type_0_0>(__first,operator+(__first,1),(--__last),__comp));
return true;
case 4:(std::__1::__sort4<__xcodeml_template_type_0_0>(__first,operator+(__first,1),operator+(__first,2),(--__last),__comp));
return true;
case 5:(std::__1::__sort5<__xcodeml_template_type_0_0>(__first,operator+(__first,1),operator+(__first,2),operator+(__first,3),(--__last),__comp));
return true;
};
typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type value_type;
__xcodeml_template_type_0_1 __j=operator+(__first,2);
(__sort3<__xcodeml_template_type_0_0>(__first,operator+(__first,1),__j,__comp));
unsigned int const __limit=8;
unsigned int __count=0;
{__xcodeml_template_type_0_1 __i=operator+(__j,1);for(;operator!=(__i,__last);(++__i)){{if((__comp((*__i),(*__j)))){{typename iterator_traits<__xcodeml_template_type_0_1>::value_type __t=(std::__1::move((*__i)));
__xcodeml_template_type_0_1 __k=__j;
(__j=__i);
do{{((*__j)=(std::__1::move((*__k))));
(__j=__k);
};}while((operator!=(__j,__first)&&(__comp(__t,(*(--__k))))));
((*__j)=(std::__1::move(__t)));
if(((++__count)==__limit)){return operator==((++__i),__last);};
};};
(__j=__i);
};}};
return true;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void __insertion_sort_move(__xcodeml_template_type_0_1 __first1,__xcodeml_template_type_0_1 __last1,typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*__first2),__xcodeml_template_type_0_0 __comp){typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type value_type;
if(operator!=(__first1,__last1)){{class::std::__1::__destruct_n __d(0);
unique_ptr<typename iterator_traits<__xcodeml_template_type_0_1>::value_type,class::std::__1::__destruct_n&>__h=__first2 __d;
typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*__last2)=__first2;
::new(__last2)__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::t((std::__1::move((*__first1))));
(__d.__incr(((typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*))0)));
{(++__last2);for(;operator!=((++__first1),__last1);(++__last2)){{typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*__j2)=__last2;
typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*__i2)=__j2;
if((__comp((*__first1),(*(--__i2))))){{::new(__j2)__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::t((std::__1::move((*__i2))));
(__d.__incr(((typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*))0)));
{(--__j2);for(;(operator!=(__i2,__first2)&&(__comp((*__first1),(*(--__i2)))));(--__j2)){((*__j2)=(std::__1::move((*__i2))));}};
((*__j2)=(std::__1::move((*__first1))));
};}else{{::new(__j2)__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::t((std::__1::move((*__first1))));
(__d.__incr(((typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*))0)));
};};
};}};
(__h.release());
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void __sort(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __comp){typedef typename iterator_traits<__xcodeml_template_type_0_1>::difference_type difference_type;
typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type value_type;
typename iterator_traits<__xcodeml_template_type_0_1>::difference_type const __limit=((is_trivially_copy_constructible<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::value&&is_trivially_copy_assignable<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::value)?30:6);
while(true){{__restart:typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len=operator-(__last,__first);
switch(__len){case 0:case 1:return;
case 2:if((__comp((*(--__last)),(*__first)))){(swap((*__first),(*__last)));};
return;
case 3:(std::__1::__sort3<__xcodeml_template_type_0_0>(__first,operator+(__first,1),(--__last),__comp));
return;
case 4:(std::__1::__sort4<__xcodeml_template_type_0_0>(__first,operator+(__first,1),operator+(__first,2),(--__last),__comp));
return;
case 5:(std::__1::__sort5<__xcodeml_template_type_0_0>(__first,operator+(__first,1),operator+(__first,2),operator+(__first,3),(--__last),__comp));
return;
};
if(operator<=(__len,__limit)){{(std::__1::__insertion_sort_3<__xcodeml_template_type_0_0>(__first,__last,__comp));
return;
};};
__xcodeml_template_type_0_1 __m=__first;
__xcodeml_template_type_0_1 __lm1=__last;
(--__lm1);
unsigned int __n_swaps;
{typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __delta;
if(operator>=(__len,1000)){{(__delta=(__len/2));
(__m+=__delta);
(__delta/=2);
(__n_swaps=(std::__1::__sort5<__xcodeml_template_type_0_0>(__first,operator+(__first,__delta),__m,operator+(__m,__delta),__lm1,__comp)));
};}else{{(__delta=(__len/2));
(__m+=__delta);
(__n_swaps=(std::__1::__sort3<__xcodeml_template_type_0_0>(__first,__m,__lm1,__comp)));
};};
};
__xcodeml_template_type_0_1 __i=__first;
__xcodeml_template_type_0_1 __j=__lm1;
if((!(__comp((*__i),(*__m))))){{while(true){{if(operator==(__i,(--__j))){{(++__i);
(__j=__last);
if((!(__comp((*__first),(*(--__j)))))){{while(true){{if(operator==(__i,__j)){return;};
if((__comp((*__first),(*__i)))){{(swap((*__i),(*__j)));
(++__n_swaps);
(++__i);
break;
};};
(++__i);
};};
};};
if(operator==(__i,__j)){return;};
while(true){{while((!(__comp((*__first),(*__i))))){(++__i);};
while((__comp((*__first),(*(--__j))))){;};
if(operator>=(__i,__j)){break;};
(swap((*__i),(*__j)));
(++__n_swaps);
(++__i);
};};
(__first=__i);
goto __restart;
};};
if((__comp((*__j),(*__m)))){{(swap((*__i),(*__j)));
(++__n_swaps);
break;
};};
};};
};};
(++__i);
if(operator<(__i,__j)){{while(true){{while((__comp((*__i),(*__m)))){(++__i);};
while((!(__comp((*(--__j)),(*__m))))){;};
if(operator>(__i,__j)){break;};
(swap((*__i),(*__j)));
(++__n_swaps);
if(operator==(__m,__i)){(__m=__j);};
(++__i);
};};
};};
if((operator!=(__i,__m)&&(__comp((*__m),(*__i))))){{(swap((*__i),(*__m)));
(++__n_swaps);
};};
if((__n_swaps==0)){{bool __fs=(std::__1::__insertion_sort_incomplete<__xcodeml_template_type_0_0>(__first,__i,__comp));
if((std::__1::__insertion_sort_incomplete<__xcodeml_template_type_0_0>(operator+(__i,1),__last,__comp))){{if(__fs){return;};
(__last=__i);
continue;
};}else{{if(__fs){{(__first=(++__i));
continue;
};};
};};
};};
if(operator<(operator-(__i,__first),operator-(__last,__i))){{(std::__1::__sort<__xcodeml_template_type_0_0>(__first,__i,__comp));
(__first=(++__i));
};}else{{(std::__1::__sort<__xcodeml_template_type_0_0>(operator+(__i,1),__last,__comp));
(__last=__i);
};};
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void sort(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __comp_ref_type<__xcodeml_template_type_0_1>::type _Comp_ref;
(std::__1::__sort<typename __comp_ref_type<__xcodeml_template_type_0_1>::type>(__first,__last,__xcodeml_identity<typename __comp_ref_type<__xcodeml_template_type_0_1>::type>::t(__comp)));
}
template<typename __xcodeml_template_type_0_0>void sort(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::sort(__first,__last,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0>void sort(__xcodeml_template_type_0_0(*(*__first)),__xcodeml_template_type_0_0(*(*__last)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::sort(((unsigned long(*))__first),((unsigned long(*))__last),__xcodeml_identity<class::std::__1::__less<unsigned long,unsigned long> >::t()));
}
template<typename __xcodeml_template_type_0_0>void sort(__wrap_iter<__xcodeml_template_type_0_0(*)>__first,__wrap_iter<__xcodeml_template_type_0_0(*)>__last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::sort((__first.base()),(__last.base())));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void sort(__wrap_iter<__xcodeml_template_type_0_0(*)>__first,__wrap_iter<__xcodeml_template_type_0_0(*)>__last,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename add_lvalue_reference<__xcodeml_template_type_0_1>::type _Comp_ref;
(std::__1::sort<__xcodeml_template_type_0_0(*),typename add_lvalue_reference<__xcodeml_template_type_0_1>::type>((__first.base()),(__last.base()),__comp));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_1 __lower_bound(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_2 const&__value_,__xcodeml_template_type_0_0 __comp){typedef typename iterator_traits<__xcodeml_template_type_0_1>::difference_type difference_type;
typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len=(std::__1::distance(__first,__last));
while(operator!=(__len,0)){{typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __l2=(std::__1::__half_positive(__len));
__xcodeml_template_type_0_1 __m=__first;
(std::__1::advance(__m,__l2));
if((__comp((*__m),__value_))){{(__first=(++__m));
(__len-=operator+(__l2,1));
};}else{(__len=__l2);};
};};
return __first;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_0 lower_bound(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 const&__value_,__xcodeml_template_type_0_2 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename add_lvalue_reference<__xcodeml_template_type_0_2>::type _Comp_ref;
return(__lower_bound<typename add_lvalue_reference<__xcodeml_template_type_0_2>::type>(__first,__last,__value_,__comp));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 lower_bound(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 const&__value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::lower_bound(__first,__last,__value_,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,__xcodeml_template_type_0_1> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_1 __upper_bound(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_2 const&__value_,__xcodeml_template_type_0_0 __comp){typedef typename iterator_traits<__xcodeml_template_type_0_1>::difference_type difference_type;
typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len=(std::__1::distance(__first,__last));
while(operator!=(__len,0)){{typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __l2=(std::__1::__half_positive(__len));
__xcodeml_template_type_0_1 __m=__first;
(std::__1::advance(__m,__l2));
if((__comp(__value_,(*__m)))){(__len=__l2);}else{{(__first=(++__m));
(__len-=operator+(__l2,1));
};};
};};
return __first;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_0 upper_bound(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 const&__value_,__xcodeml_template_type_0_2 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename add_lvalue_reference<__xcodeml_template_type_0_2>::type _Comp_ref;
return(__upper_bound<typename add_lvalue_reference<__xcodeml_template_type_0_2>::type>(__first,__last,__value_,__comp));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 upper_bound(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 const&__value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::upper_bound(__first,__last,__value_,__xcodeml_identity<__less<__xcodeml_template_type_0_1,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_1>__equal_range(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_2 const&__value_,__xcodeml_template_type_0_0 __comp){typedef typename iterator_traits<__xcodeml_template_type_0_1>::difference_type difference_type;
typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len=(std::__1::distance(__first,__last));
while(operator!=(__len,0)){{typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __l2=(std::__1::__half_positive(__len));
__xcodeml_template_type_0_1 __m=__first;
(std::__1::advance(__m,__l2));
if((__comp((*__m),__value_))){{(__first=(++__m));
(__len-=operator+(__l2,1));
};}else{if((__comp(__value_,(*__m)))){{(__last=__m);
(__len=__l2);
};}else{{__xcodeml_template_type_0_1 __mp1=__m;
return __xcodeml_identity<pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_1> >::t((__lower_bound<__xcodeml_template_type_0_0>(__first,__m,__value_,__comp)),(__upper_bound<__xcodeml_template_type_0_0>((++__mp1),__last,__value_,__comp)));
};};};
};};
return __xcodeml_identity<pair<__xcodeml_template_type_0_1,__xcodeml_template_type_0_1> >::t(__first,__first);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>equal_range(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 const&__value_,__xcodeml_template_type_0_2 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __comp_ref_type<__xcodeml_template_type_0_2>::type _Comp_ref;
return(__equal_range<typename __comp_ref_type<__xcodeml_template_type_0_2>::type>(__first,__last,__value_,__comp));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>pair<__xcodeml_template_type_0_0,__xcodeml_template_type_0_0>equal_range(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 const&__value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::equal_range(__first,__last,__value_,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,__xcodeml_template_type_0_1> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>bool __binary_search(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_2 const&__value_,__xcodeml_template_type_0_0 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__first=(__lower_bound<__xcodeml_template_type_0_0>(__first,__last,__value_,__comp)));
return(operator!=(__first,__last)&&(!(__comp(__value_,(*__first)))));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>bool binary_search(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 const&__value_,__xcodeml_template_type_0_2 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __comp_ref_type<__xcodeml_template_type_0_2>::type _Comp_ref;
return(__binary_search<typename __comp_ref_type<__xcodeml_template_type_0_2>::type>(__first,__last,__value_,__comp));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool binary_search(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 const&__value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::binary_search(__first,__last,__value_,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,__xcodeml_template_type_0_1> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>__xcodeml_template_type_0_3 __merge(__xcodeml_template_type_0_1 __first1,__xcodeml_template_type_0_1 __last1,__xcodeml_template_type_0_2 __first2,__xcodeml_template_type_0_2 __last2,__xcodeml_template_type_0_3 __result,__xcodeml_template_type_0_0 __comp){{;for(;operator!=(__first1,__last1);(++__result)){{if(operator==(__first2,__last2)){return(std::__1::copy(__first1,__last1,__result));};
if((__comp((*__first2),(*__first1)))){{((*__result)=(*__first2));
(++__first2);
};}else{{((*__result)=(*__first1));
(++__first1);
};};
};}};
return(std::__1::copy(__first2,__last2,__result));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>__xcodeml_template_type_0_2 merge(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_1 __last2,__xcodeml_template_type_0_2 __result,__xcodeml_template_type_0_3 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __comp_ref_type<__xcodeml_template_type_0_3>::type _Comp_ref;
return(std::__1::__merge<typename __comp_ref_type<__xcodeml_template_type_0_3>::type>(__first1,__last1,__first2,__last2,__result,__comp));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_2 merge(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_1 __last2,__xcodeml_template_type_0_2 __result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type __v1;
typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type __v2;
return(merge(__first1,__last1,__first2,__last2,__result,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_1>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>void __half_inplace_merge(__xcodeml_template_type_0_1 __first1,__xcodeml_template_type_0_1 __last1,__xcodeml_template_type_0_2 __first2,__xcodeml_template_type_0_2 __last2,__xcodeml_template_type_0_3 __result,__xcodeml_template_type_0_0 __comp){{;for(;operator!=(__first1,__last1);(++__result)){{if(operator==(__first2,__last2)){{(std::__1::move(__first1,__last1,__result));
return;
};};
if((__comp((*__first2),(*__first1)))){{((*__result)=(std::__1::move((*__first2))));
(++__first2);
};}else{{((*__result)=(std::__1::move((*__first1))));
(++__first1);
};};
};}};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void __buffered_inplace_merge(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __middle,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __comp,typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len1,typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len2,typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*__buff)){typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type value_type;
class::std::__1::__destruct_n __d(0);
unique_ptr<typename iterator_traits<__xcodeml_template_type_0_1>::value_type,class::std::__1::__destruct_n&>__h2=__buff __d;
if(operator<=(__len1,__len2)){{typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*__p)=__buff;
{__xcodeml_template_type_0_1 __i=__first;for(;operator!=(__i,__middle);(((__d.__incr(((typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*))0))),((void)(++__i))),(++__p))){::new(__p)__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::t((std::__1::move((*__i))));}};
(__half_inplace_merge(__buff,__p,__middle,__last,__first,__comp));
};}else{{typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*__p)=__buff;
{__xcodeml_template_type_0_1 __i=__middle;for(;operator!=(__i,__last);(((__d.__incr(((typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*))0))),((void)(++__i))),(++__p))){::new(__p)__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::t((std::__1::move((*__i))));}};
typedef reverse_iterator<__xcodeml_template_type_0_1>_RBi;
typedef reverse_iterator<typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*)>_Rv;
(__half_inplace_merge(__xcodeml_identity<reverse_iterator<typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*)> >::t(__p),__xcodeml_identity<reverse_iterator<typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*)> >::t(__buff),__xcodeml_identity<reverse_iterator<__xcodeml_template_type_0_1> >::t(__middle),__xcodeml_identity<reverse_iterator<__xcodeml_template_type_0_1> >::t(__first),__xcodeml_identity<reverse_iterator<__xcodeml_template_type_0_1> >::t(__last),__xcodeml_identity<__invert<__xcodeml_template_type_0_0> >::t(__comp)));
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void __inplace_merge(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __middle,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __comp,typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len1,typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len2,typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*__buff),long __buff_size){typedef typename iterator_traits<__xcodeml_template_type_0_1>::difference_type difference_type;
while(true){{if(operator==(__len2,0)){return;};
if((operator<=(__len1,__buff_size)||operator<=(__len2,__buff_size))){return(__buffered_inplace_merge<__xcodeml_template_type_0_0>(__first,__middle,__last,__comp,__len1,__len2,__buff));};
{;for(;true;((++__first),((void)(--__len1)))){{if(operator==(__len1,0)){return;};
if((__comp((*__middle),(*__first)))){break;};
};}};
__xcodeml_template_type_0_1 __m1;
__xcodeml_template_type_0_1 __m2;
typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len11;
typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len21;
if(operator<(__len1,__len2)){{(__len21=(__len2/2));
(__m2=__middle);
(std::__1::advance(__m2,__len21));
(__m1=(__upper_bound<__xcodeml_template_type_0_0>(__first,__middle,(*__m2),__comp)));
(__len11=(std::__1::distance(__first,__m1)));
};}else{{if(operator==(__len1,1)){{(swap((*__first),(*__middle)));
return;
};};
(__len11=(__len1/2));
(__m1=__first);
(std::__1::advance(__m1,__len11));
(__m2=(__lower_bound<__xcodeml_template_type_0_0>(__middle,__last,(*__m1),__comp)));
(__len21=(std::__1::distance(__middle,__m2)));
};};
typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len12=operator-(__len1,__len11);
typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len22=operator-(__len2,__len21);
(__middle=(std::__1::rotate(__m1,__middle,__m2)));
if(operator<(operator+(__len11,__len21),operator+(__len12,__len22))){{(__inplace_merge<__xcodeml_template_type_0_0>(__first,__m1,__middle,__comp,__len11,__len21,__buff,__buff_size));
(__first=__middle);
(__middle=__m2);
(__len1=__len12);
(__len2=__len22);
};}else{{(__inplace_merge<__xcodeml_template_type_0_0>(__middle,__m2,__last,__comp,__len12,__len22,__buff,__buff_size));
(__last=__middle);
(__middle=__m1);
(__len1=__len11);
(__len2=__len21);
};};
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void inplace_merge(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __middle,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type value_type;
typedef typename iterator_traits<__xcodeml_template_type_0_0>::difference_type difference_type;
typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __len1=(std::__1::distance(__first,__middle));
typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __len2=(std::__1::distance(__middle,__last));
typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __buf_size=(std::__1::min(__len1,__len2));
pair<typename iterator_traits<__xcodeml_template_type_0_0>::value_type(*),long>__buf=(std::__1::get_temporary_buffer<typename iterator_traits<__xcodeml_template_type_0_0>::value_type>(__buf_size));
unique_ptr<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,class::std::__1::__return_temporary_buffer>__h=__buf.first;
typedef typename __comp_ref_type<__xcodeml_template_type_0_1>::type _Comp_ref;
return(std::__1::__inplace_merge<typename __comp_ref_type<__xcodeml_template_type_0_1>::type>(__first,__middle,__last,__comp,__len1,__len2,__buf.first,__buf.second));
}
template<typename __xcodeml_template_type_0_0>void inplace_merge(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __middle,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::inplace_merge(__first,__middle,__last,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>void __merge_move_construct(__xcodeml_template_type_0_1 __first1,__xcodeml_template_type_0_1 __last1,__xcodeml_template_type_0_2 __first2,__xcodeml_template_type_0_2 __last2,typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*__result),__xcodeml_template_type_0_0 __comp){typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type value_type;
class::std::__1::__destruct_n __d(0);
unique_ptr<typename iterator_traits<__xcodeml_template_type_0_1>::value_type,class::std::__1::__destruct_n&>__h=__result __d;
{;for(;true;(++__result)){{if(operator==(__first1,__last1)){{{;for(;operator!=(__first2,__last2);(((++__first2),(++__result)),(__d.__incr(((typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*))0))))){::new(__result)__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::t((std::__1::move((*__first2))));}};
(__h.release());
return;
};};
if(operator==(__first2,__last2)){{{;for(;operator!=(__first1,__last1);(((++__first1),(++__result)),(__d.__incr(((typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*))0))))){::new(__result)__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::t((std::__1::move((*__first1))));}};
(__h.release());
return;
};};
if((__comp((*__first2),(*__first1)))){{::new(__result)__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::t((std::__1::move((*__first2))));
(__d.__incr(((typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*))0)));
(++__first2);
};}else{{::new(__result)__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::t((std::__1::move((*__first1))));
(__d.__incr(((typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*))0)));
(++__first1);
};};
};}};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>void __merge_move_assign(__xcodeml_template_type_0_1 __first1,__xcodeml_template_type_0_1 __last1,__xcodeml_template_type_0_2 __first2,__xcodeml_template_type_0_2 __last2,__xcodeml_template_type_0_3 __result,__xcodeml_template_type_0_0 __comp){{;for(;operator!=(__first1,__last1);(++__result)){{if(operator==(__first2,__last2)){{{;for(;operator!=(__first1,__last1);((++__first1),(++__result))){((*__result)=(std::__1::move((*__first1))));}};
return;
};};
if((__comp((*__first2),(*__first1)))){{((*__result)=(std::__1::move((*__first2))));
(++__first2);
};}else{{((*__result)=(std::__1::move((*__first1))));
(++__first1);
};};
};}};
{;for(;operator!=(__first2,__last2);((++__first2),(++__result))){((*__result)=(std::__1::move((*__first2))));}};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void __stable_sort(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __comp,typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len,typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*__buff),long __buff_size)
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void __stable_sort_move(__xcodeml_template_type_0_1 __first1,__xcodeml_template_type_0_1 __last1,__xcodeml_template_type_0_0 __comp,typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len,typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*__first2)){typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type value_type;
switch(__len){case 0:return;
case 1: ::new(__first2)__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::t((std::__1::move((*__first1))));
return;
case 2:class::std::__1::__destruct_n __d(0);
unique_ptr<typename iterator_traits<__xcodeml_template_type_0_1>::value_type,class::std::__1::__destruct_n&>__h2=__first2 __d;
if((__comp((*(--__last1)),(*__first1)))){{::new(__first2)__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::t((std::__1::move((*__last1))));
(__d.__incr(((typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*))0)));
(++__first2);
::new(__first2)__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::t((std::__1::move((*__first1))));
};}else{{::new(__first2)__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::t((std::__1::move((*__first1))));
(__d.__incr(((typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*))0)));
(++__first2);
::new(__first2)__xcodeml_identity<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::t((std::__1::move((*__last1))));
};};
(__h2.release());
return;
};
if(operator<=(__len,8)){{(__insertion_sort_move<__xcodeml_template_type_0_0>(__first1,__last1,__first2,__comp));
return;
};};
typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __l2=(__len/2);
__xcodeml_template_type_0_1 __m=operator+(__first1,__l2);
(__stable_sort<__xcodeml_template_type_0_0>(__first1,__m,__comp,__l2,__first2,__l2));
(__stable_sort<__xcodeml_template_type_0_0>(__m,__last1,__comp,operator-(__len,__l2),operator+(__first2,__l2),operator-(__len,__l2)));
(__merge_move_construct<__xcodeml_template_type_0_0>(__first1,__m,__m,__last1,__first2,__comp));
}
template<typename __xcodeml_template_type_0_0>class __stable_sort_switch{public:static unsigned int const value=(128*is_trivially_copy_assignable<__xcodeml_template_type_0_0>::value);
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void __stable_sort(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __comp,typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len,typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*__buff),long __buff_size){typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type value_type;
typedef typename iterator_traits<__xcodeml_template_type_0_1>::difference_type difference_type;
switch(__len){case 0:case 1:return;
case 2:if((__comp((*(--__last)),(*__first)))){(swap((*__first),(*__last)));};
return;
};
if(operator<=(__len,static_cast<typename iterator_traits<__xcodeml_template_type_0_1>::difference_type>(__stable_sort_switch<typename iterator_traits<__xcodeml_template_type_0_1>::value_type>::value))){{(__insertion_sort<__xcodeml_template_type_0_0>(__first,__last,__comp));
return;
};};
typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __l2=(__len/2);
__xcodeml_template_type_0_1 __m=operator+(__first,__l2);
if(operator<=(__len,__buff_size)){{class::std::__1::__destruct_n __d(0);
unique_ptr<typename iterator_traits<__xcodeml_template_type_0_1>::value_type,class::std::__1::__destruct_n&>__h2=__buff __d;
(__stable_sort_move<__xcodeml_template_type_0_0>(__first,__m,__comp,__l2,__buff));
(__d.__set(__l2,((typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*))0)));
(__stable_sort_move<__xcodeml_template_type_0_0>(__m,__last,__comp,operator-(__len,__l2),operator+(__buff,__l2)));
(__d.__set(__len,((typename iterator_traits<__xcodeml_template_type_0_1>::value_type(*))0)));
(__merge_move_assign<__xcodeml_template_type_0_0>(__buff,operator+(__buff,__l2),operator+(__buff,__l2),operator+(__buff,__len),__first,__comp));
return;
};};
(__stable_sort<__xcodeml_template_type_0_0>(__first,__m,__comp,__l2,__buff,__buff_size));
(__stable_sort<__xcodeml_template_type_0_0>(__m,__last,__comp,operator-(__len,__l2),__buff,__buff_size));
(__inplace_merge<__xcodeml_template_type_0_0>(__first,__m,__last,__comp,__l2,operator-(__len,__l2),__buff,__buff_size));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void stable_sort(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename iterator_traits<__xcodeml_template_type_0_0>::value_type value_type;
typedef typename iterator_traits<__xcodeml_template_type_0_0>::difference_type difference_type;
typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __len=operator-(__last,__first);
pair<typename iterator_traits<__xcodeml_template_type_0_0>::value_type(*),long>__buf=0 0;
unique_ptr<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,class::std::__1::__return_temporary_buffer>__h;
if(operator>(__len,static_cast<typename iterator_traits<__xcodeml_template_type_0_0>::difference_type>(__stable_sort_switch<typename iterator_traits<__xcodeml_template_type_0_0>::value_type>::value))){{(__buf=(std::__1::get_temporary_buffer<typename iterator_traits<__xcodeml_template_type_0_0>::value_type>(__len)));
(__h.reset(__buf.first));
};};
typedef typename __comp_ref_type<__xcodeml_template_type_0_1>::type _Comp_ref;
(__stable_sort<typename __comp_ref_type<__xcodeml_template_type_0_1>::type>(__first,__last,__comp,__len,__buf.first,__buf.second));
}
template<typename __xcodeml_template_type_0_0>void stable_sort(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::stable_sort(__first,__last,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_0 is_heap_until(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __comp){typedef typename iterator_traits<__xcodeml_template_type_0_0>::difference_type difference_type;
typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __len=operator-(__last,__first);
typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __p=0;
typename iterator_traits<__xcodeml_template_type_0_0>::difference_type __c=1;
__xcodeml_template_type_0_0 __pp=__first;
while(operator<(__c,__len)){{__xcodeml_template_type_0_0 __cp=operator+(__first,__c);
if((__comp((*__pp),(*__cp)))){return __cp;};
(++__c);
(++__cp);
if(operator==(__c,__len)){return __last;};
if((__comp((*__pp),(*__cp)))){return __cp;};
(++__p);
(++__pp);
(__c=operator+((2*__p),1));
};};
return __last;
}
template<typename __xcodeml_template_type_0_0>__xcodeml_template_type_0_0 is_heap_until(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::is_heap_until(__first,__last,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool is_heap(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==((std::__1::is_heap_until(__first,__last,__comp)),__last);
}
template<typename __xcodeml_template_type_0_0>bool is_heap(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::is_heap(__first,__last,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void __sift_up(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __comp,typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len){typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type value_type;
if(operator>(__len,1)){{(__len=(operator-(__len,2)/2));
__xcodeml_template_type_0_1 __ptr=operator+(__first,__len);
if((__comp((*__ptr),(*(--__last))))){{typename iterator_traits<__xcodeml_template_type_0_1>::value_type __t=(std::__1::move((*__last)));
do{{((*__last)=(std::__1::move((*__ptr))));
(__last=__ptr);
if(operator==(__len,0)){break;};
(__len=(operator-(__len,1)/2));
(__ptr=operator+(__first,__len));
};}while((__comp((*__ptr),__t)));
((*__last)=(std::__1::move(__t)));
};};
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void push_heap(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __comp_ref_type<__xcodeml_template_type_0_1>::type _Comp_ref;
(__sift_up<typename __comp_ref_type<__xcodeml_template_type_0_1>::type>(__first,__last,__comp,operator-(__last,__first)));
}
template<typename __xcodeml_template_type_0_0>void push_heap(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::push_heap(__first,__last,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void __sift_down(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1,__xcodeml_template_type_0_0 __comp,typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len,__xcodeml_template_type_0_1 __start){typedef typename iterator_traits<__xcodeml_template_type_0_1>::difference_type difference_type;
typedef typename iterator_traits<__xcodeml_template_type_0_1>::value_type value_type;
typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __child=operator-(__start,__first);
if((operator<(__len,2)||operator<((operator-(__len,2)/2),__child))){return;};
(__child=operator+((2*__child),1));
__xcodeml_template_type_0_1 __child_i=operator+(__first,__child);
if((operator<(operator+(__child,1),__len)&&(__comp((*__child_i),(*operator+(__child_i,1)))))){{(++__child_i);
(++__child);
};};
if((__comp((*__child_i),(*__start)))){return;};
typename iterator_traits<__xcodeml_template_type_0_1>::value_type __top=(std::__1::move((*__start)));
do{{((*__start)=(std::__1::move((*__child_i))));
(__start=__child_i);
if(operator<((operator-(__len,2)/2),__child)){break;};
(__child=operator+((2*__child),1));
(__child_i=operator+(__first,__child));
if((operator<(operator+(__child,1),__len)&&(__comp((*__child_i),(*operator+(__child_i,1)))))){{(++__child_i);
(++__child);
};};
};}while((!(__comp((*__child_i),__top))));
((*__start)=(std::__1::move(__top)));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void __pop_heap(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __comp,typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator>(__len,1)){{(swap((*__first),(*(--__last))));
(__sift_down<__xcodeml_template_type_0_0>(__first,__last,__comp,operator-(__len,1),__first));
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void pop_heap(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __comp_ref_type<__xcodeml_template_type_0_1>::type _Comp_ref;
(__pop_heap<typename __comp_ref_type<__xcodeml_template_type_0_1>::type>(__first,__last,__comp,operator-(__last,__first)));
}
template<typename __xcodeml_template_type_0_0>void pop_heap(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::pop_heap(__first,__last,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void __make_heap(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __comp){typedef typename iterator_traits<__xcodeml_template_type_0_1>::difference_type difference_type;
typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __n=operator-(__last,__first);
if(operator>(__n,1)){{{typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __start=(operator-(__n,2)/2);for(;operator>=(__start,0);(--__start)){{(__sift_down<__xcodeml_template_type_0_0>(__first,__last,__comp,__n,operator+(__first,__start)));
};}};
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void make_heap(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __comp_ref_type<__xcodeml_template_type_0_1>::type _Comp_ref;
(__make_heap<typename __comp_ref_type<__xcodeml_template_type_0_1>::type>(__first,__last,__comp));
}
template<typename __xcodeml_template_type_0_0>void make_heap(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::make_heap(__first,__last,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void __sort_heap(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __comp){typedef typename iterator_traits<__xcodeml_template_type_0_1>::difference_type difference_type;
{typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __n=operator-(__last,__first);for(;operator>(__n,1);((--__last),(--__n))){(__pop_heap<__xcodeml_template_type_0_0>(__first,__last,__comp,__n));}};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void sort_heap(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __comp_ref_type<__xcodeml_template_type_0_1>::type _Comp_ref;
(__sort_heap<typename __comp_ref_type<__xcodeml_template_type_0_1>::type>(__first,__last,__comp));
}
template<typename __xcodeml_template_type_0_0>void sort_heap(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::sort_heap(__first,__last,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void __partial_sort(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __middle,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __comp){(__make_heap<__xcodeml_template_type_0_0>(__first,__middle,__comp));
typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len=operator-(__middle,__first);
{__xcodeml_template_type_0_1 __i=__middle;for(;operator!=(__i,__last);(++__i)){{if((__comp((*__i),(*__first)))){{(swap((*__i),(*__first)));
(__sift_down<__xcodeml_template_type_0_0>(__first,__middle,__comp,__len,__first));
};};
};}};
(__sort_heap<__xcodeml_template_type_0_0>(__first,__middle,__comp));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void partial_sort(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __middle,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __comp_ref_type<__xcodeml_template_type_0_1>::type _Comp_ref;
(__partial_sort<typename __comp_ref_type<__xcodeml_template_type_0_1>::type>(__first,__middle,__last,__comp));
}
template<typename __xcodeml_template_type_0_0>void partial_sort(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __middle,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::partial_sort(__first,__middle,__last,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_2 __partial_sort_copy(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_2 __result_first,__xcodeml_template_type_0_2 __result_last,__xcodeml_template_type_0_0 __comp){__xcodeml_template_type_0_2 __r=__result_first;
if(operator!=(__r,__result_last)){{{;for(;(operator!=(__first,__last)&&operator!=(__r,__result_last));(((void)(++__first)),(++__r))){((*__r)=(*__first));}};
(__make_heap<__xcodeml_template_type_0_0>(__result_first,__r,__comp));
typename iterator_traits<__xcodeml_template_type_0_2>::difference_type __len=operator-(__r,__result_first);
{;for(;operator!=(__first,__last);(++__first)){if((__comp((*__first),(*__result_first)))){{((*__result_first)=(*__first));
(__sift_down<__xcodeml_template_type_0_0>(__result_first,__r,__comp,__len,__result_first));
};};}};
(__sort_heap<__xcodeml_template_type_0_0>(__result_first,__r,__comp));
};};
return __r;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_1 partial_sort_copy(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __result_first,__xcodeml_template_type_0_1 __result_last,__xcodeml_template_type_0_2 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __comp_ref_type<__xcodeml_template_type_0_2>::type _Comp_ref;
return(__partial_sort_copy<typename __comp_ref_type<__xcodeml_template_type_0_2>::type>(__first,__last,__result_first,__result_last,__comp));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__xcodeml_template_type_0_1 partial_sort_copy(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __result_first,__xcodeml_template_type_0_1 __result_last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::partial_sort_copy(__first,__last,__result_first,__result_last,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_1>::value_type,typename iterator_traits<__xcodeml_template_type_0_1>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void __nth_element(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __nth,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __comp){typedef typename iterator_traits<__xcodeml_template_type_0_1>::difference_type difference_type;
typename iterator_traits<__xcodeml_template_type_0_1>::difference_type const __limit=7;
while(true){{__restart:if(operator==(__nth,__last)){return;};
typename iterator_traits<__xcodeml_template_type_0_1>::difference_type __len=operator-(__last,__first);
switch(__len){case 0:case 1:return;
case 2:if((__comp((*(--__last)),(*__first)))){(swap((*__first),(*__last)));};
return;
case 3:{__xcodeml_template_type_0_1 __m=__first;
(std::__1::__sort3<__xcodeml_template_type_0_0>(__first,(++__m),(--__last),__comp));
return;
};
};
if(operator<=(__len,__limit)){{(__selection_sort<__xcodeml_template_type_0_0>(__first,__last,__comp));
return;
};};
__xcodeml_template_type_0_1 __m=operator+(__first,(__len/2));
__xcodeml_template_type_0_1 __lm1=__last;
unsigned int __n_swaps=(std::__1::__sort3<__xcodeml_template_type_0_0>(__first,__m,(--__lm1),__comp));
__xcodeml_template_type_0_1 __i=__first;
__xcodeml_template_type_0_1 __j=__lm1;
if((!(__comp((*__i),(*__m))))){{while(true){{if(operator==(__i,(--__j))){{(++__i);
(__j=__last);
if((!(__comp((*__first),(*(--__j)))))){{while(true){{if(operator==(__i,__j)){return;};
if((__comp((*__first),(*__i)))){{(swap((*__i),(*__j)));
(++__n_swaps);
(++__i);
break;
};};
(++__i);
};};
};};
if(operator==(__i,__j)){return;};
while(true){{while((!(__comp((*__first),(*__i))))){(++__i);};
while((__comp((*__first),(*(--__j))))){;};
if(operator>=(__i,__j)){break;};
(swap((*__i),(*__j)));
(++__n_swaps);
(++__i);
};};
if(operator<(__nth,__i)){return;};
(__first=__i);
goto __restart;
};};
if((__comp((*__j),(*__m)))){{(swap((*__i),(*__j)));
(++__n_swaps);
break;
};};
};};
};};
(++__i);
if(operator<(__i,__j)){{while(true){{while((__comp((*__i),(*__m)))){(++__i);};
while((!(__comp((*(--__j)),(*__m))))){;};
if(operator>=(__i,__j)){break;};
(swap((*__i),(*__j)));
(++__n_swaps);
if(operator==(__m,__i)){(__m=__j);};
(++__i);
};};
};};
if((operator!=(__i,__m)&&(__comp((*__m),(*__i))))){{(swap((*__i),(*__m)));
(++__n_swaps);
};};
if(operator==(__nth,__i)){return;};
if((__n_swaps==0)){{if(operator<(__nth,__i)){{(__j=(__m=__first));
while(operator!=((++__j),__i)){{if((__comp((*__j),(*__m)))){goto not_sorted;};
(__m=__j);
};};
return;
};}else{{(__j=(__m=__i));
while(operator!=((++__j),__last)){{if((__comp((*__j),(*__m)))){goto not_sorted;};
(__m=__j);
};};
return;
};};
};};
not_sorted:if(operator<(__nth,__i)){{(__last=__i);
};}else{{(__first=(++__i));
};};
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void nth_element(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __nth,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __comp_ref_type<__xcodeml_template_type_0_1>::type _Comp_ref;
(__nth_element<typename __comp_ref_type<__xcodeml_template_type_0_1>::type>(__first,__nth,__last,__comp));
}
template<typename __xcodeml_template_type_0_0>void nth_element(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __nth,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::nth_element(__first,__nth,__last,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>bool __includes(__xcodeml_template_type_0_1 __first1,__xcodeml_template_type_0_1 __last1,__xcodeml_template_type_0_2 __first2,__xcodeml_template_type_0_2 __last2,__xcodeml_template_type_0_0 __comp){{;for(;operator!=(__first2,__last2);(++__first1)){{if((operator==(__first1,__last1)||(__comp((*__first2),(*__first1))))){return false;};
if((!(__comp((*__first1),(*__first2))))){(++__first2);};
};}};
return true;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>bool includes(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_1 __last2,__xcodeml_template_type_0_2 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __comp_ref_type<__xcodeml_template_type_0_2>::type _Comp_ref;
return(__includes<typename __comp_ref_type<__xcodeml_template_type_0_2>::type>(__first1,__last1,__first2,__last2,__comp));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool includes(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_1 __last2)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::includes(__first1,__last1,__first2,__last2,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_1>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>__xcodeml_template_type_0_3 __set_union(__xcodeml_template_type_0_1 __first1,__xcodeml_template_type_0_1 __last1,__xcodeml_template_type_0_2 __first2,__xcodeml_template_type_0_2 __last2,__xcodeml_template_type_0_3 __result,__xcodeml_template_type_0_0 __comp){{;for(;operator!=(__first1,__last1);(++__result)){{if(operator==(__first2,__last2)){return(std::__1::copy(__first1,__last1,__result));};
if((__comp((*__first2),(*__first1)))){{((*__result)=(*__first2));
(++__first2);
};}else{{if((!(__comp((*__first1),(*__first2))))){(++__first2);};
((*__result)=(*__first1));
(++__first1);
};};
};}};
return(std::__1::copy(__first2,__last2,__result));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>__xcodeml_template_type_0_2 set_union(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_1 __last2,__xcodeml_template_type_0_2 __result,__xcodeml_template_type_0_3 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __comp_ref_type<__xcodeml_template_type_0_3>::type _Comp_ref;
return(__set_union<typename __comp_ref_type<__xcodeml_template_type_0_3>::type>(__first1,__last1,__first2,__last2,__result,__comp));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_2 set_union(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_1 __last2,__xcodeml_template_type_0_2 __result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::set_union(__first1,__last1,__first2,__last2,__result,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_1>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>__xcodeml_template_type_0_3 __set_intersection(__xcodeml_template_type_0_1 __first1,__xcodeml_template_type_0_1 __last1,__xcodeml_template_type_0_2 __first2,__xcodeml_template_type_0_2 __last2,__xcodeml_template_type_0_3 __result,__xcodeml_template_type_0_0 __comp){while((operator!=(__first1,__last1)&&operator!=(__first2,__last2))){{if((__comp((*__first1),(*__first2)))){(++__first1);}else{{if((!(__comp((*__first2),(*__first1))))){{((*__result)=(*__first1));
(++__result);
(++__first1);
};};
(++__first2);
};};
};};
return __result;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>__xcodeml_template_type_0_2 set_intersection(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_1 __last2,__xcodeml_template_type_0_2 __result,__xcodeml_template_type_0_3 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __comp_ref_type<__xcodeml_template_type_0_3>::type _Comp_ref;
return(__set_intersection<typename __comp_ref_type<__xcodeml_template_type_0_3>::type>(__first1,__last1,__first2,__last2,__result,__comp));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_2 set_intersection(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_1 __last2,__xcodeml_template_type_0_2 __result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::set_intersection(__first1,__last1,__first2,__last2,__result,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_1>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>__xcodeml_template_type_0_3 __set_difference(__xcodeml_template_type_0_1 __first1,__xcodeml_template_type_0_1 __last1,__xcodeml_template_type_0_2 __first2,__xcodeml_template_type_0_2 __last2,__xcodeml_template_type_0_3 __result,__xcodeml_template_type_0_0 __comp){while(operator!=(__first1,__last1)){{if(operator==(__first2,__last2)){return(std::__1::copy(__first1,__last1,__result));};
if((__comp((*__first1),(*__first2)))){{((*__result)=(*__first1));
(++__result);
(++__first1);
};}else{{if((!(__comp((*__first2),(*__first1))))){(++__first1);};
(++__first2);
};};
};};
return __result;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>__xcodeml_template_type_0_2 set_difference(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_1 __last2,__xcodeml_template_type_0_2 __result,__xcodeml_template_type_0_3 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __comp_ref_type<__xcodeml_template_type_0_3>::type _Comp_ref;
return(__set_difference<typename __comp_ref_type<__xcodeml_template_type_0_3>::type>(__first1,__last1,__first2,__last2,__result,__comp));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_2 set_difference(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_1 __last2,__xcodeml_template_type_0_2 __result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::set_difference(__first1,__last1,__first2,__last2,__result,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_1>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>__xcodeml_template_type_0_3 __set_symmetric_difference(__xcodeml_template_type_0_1 __first1,__xcodeml_template_type_0_1 __last1,__xcodeml_template_type_0_2 __first2,__xcodeml_template_type_0_2 __last2,__xcodeml_template_type_0_3 __result,__xcodeml_template_type_0_0 __comp){while(operator!=(__first1,__last1)){{if(operator==(__first2,__last2)){return(std::__1::copy(__first1,__last1,__result));};
if((__comp((*__first1),(*__first2)))){{((*__result)=(*__first1));
(++__result);
(++__first1);
};}else{{if((__comp((*__first2),(*__first1)))){{((*__result)=(*__first2));
(++__result);
};}else{(++__first1);};
(++__first2);
};};
};};
return(std::__1::copy(__first2,__last2,__result));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2,typename __xcodeml_template_type_0_3>__xcodeml_template_type_0_2 set_symmetric_difference(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_1 __last2,__xcodeml_template_type_0_2 __result,__xcodeml_template_type_0_3 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __comp_ref_type<__xcodeml_template_type_0_3>::type _Comp_ref;
return(__set_symmetric_difference<typename __comp_ref_type<__xcodeml_template_type_0_3>::type>(__first1,__last1,__first2,__last2,__result,__comp));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>__xcodeml_template_type_0_2 set_symmetric_difference(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_1 __last2,__xcodeml_template_type_0_2 __result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::set_symmetric_difference(__first1,__last1,__first2,__last2,__result,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_1>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>bool __lexicographical_compare(__xcodeml_template_type_0_1 __first1,__xcodeml_template_type_0_1 __last1,__xcodeml_template_type_0_2 __first2,__xcodeml_template_type_0_2 __last2,__xcodeml_template_type_0_0 __comp){{;for(;operator!=(__first2,__last2);((++__first1),((void)(++__first2)))){{if((operator==(__first1,__last1)||(__comp((*__first1),(*__first2))))){return true;};
if((__comp((*__first2),(*__first1)))){return false;};
};}};
return false;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1,typename __xcodeml_template_type_0_2>bool lexicographical_compare(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_1 __last2,__xcodeml_template_type_0_2 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __comp_ref_type<__xcodeml_template_type_0_2>::type _Comp_ref;
return(__lexicographical_compare<typename __comp_ref_type<__xcodeml_template_type_0_2>::type>(__first1,__last1,__first2,__last2,__comp));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool lexicographical_compare(__xcodeml_template_type_0_0 __first1,__xcodeml_template_type_0_0 __last1,__xcodeml_template_type_0_1 __first2,__xcodeml_template_type_0_1 __last2)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::lexicographical_compare(__first1,__last1,__first2,__last2,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_1>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool __next_permutation(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __comp){__xcodeml_template_type_0_1 __i=__last;
if((operator==(__first,__last)||operator==(__first,(--__i)))){return false;};
while(true){{__xcodeml_template_type_0_1 __ip1=__i;
if((__comp((*(--__i)),(*__ip1)))){{__xcodeml_template_type_0_1 __j=__last;
while((!(__comp((*__i),(*(--__j)))))){;};
(swap((*__i),(*__j)));
(std::__1::reverse(__ip1,__last));
return true;
};};
if(operator==(__i,__first)){{(std::__1::reverse(__first,__last));
return false;
};};
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool next_permutation(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __comp_ref_type<__xcodeml_template_type_0_1>::type _Comp_ref;
return(__next_permutation<typename __comp_ref_type<__xcodeml_template_type_0_1>::type>(__first,__last,__comp));
}
template<typename __xcodeml_template_type_0_0>bool next_permutation(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::next_permutation(__first,__last,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool __prev_permutation(__xcodeml_template_type_0_1 __first,__xcodeml_template_type_0_1 __last,__xcodeml_template_type_0_0 __comp){__xcodeml_template_type_0_1 __i=__last;
if((operator==(__first,__last)||operator==(__first,(--__i)))){return false;};
while(true){{__xcodeml_template_type_0_1 __ip1=__i;
if((__comp((*__ip1),(*(--__i))))){{__xcodeml_template_type_0_1 __j=__last;
while((!(__comp((*(--__j)),(*__i))))){;};
(swap((*__i),(*__j)));
(std::__1::reverse(__ip1,__last));
return true;
};};
if(operator==(__i,__first)){{(std::__1::reverse(__first,__last));
return false;
};};
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool prev_permutation(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last,__xcodeml_template_type_0_1 __comp)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typedef typename __comp_ref_type<__xcodeml_template_type_0_1>::type _Comp_ref;
return(__prev_permutation<typename __comp_ref_type<__xcodeml_template_type_0_1>::type>(__first,__last,__comp));
}
template<typename __xcodeml_template_type_0_0>bool prev_permutation(__xcodeml_template_type_0_0 __first,__xcodeml_template_type_0_0 __last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::prev_permutation(__first,__last,__xcodeml_identity<__less<typename iterator_traits<__xcodeml_template_type_0_0>::value_type,typename iterator_traits<__xcodeml_template_type_0_0>::value_type> >::t()));
}
}
}
namespace std{namespace __1{template<typename __xcodeml_template_type_0_0,bool _IsConst,typename __xcodeml_template_type_0_0::__storage_type=0>class __bit_iterator;
;
template<typename __xcodeml_template_type_0_0>class __bit_const_reference;
;
template<typename __xcodeml_template_type_0_0>class __has_storage_type{public:static bool const value=false;
}
;
;
template<typename __xcodeml_template_type_0_0,bool=__has_storage_type<__xcodeml_template_type_0_0>::value>class __bit_reference{private:typedef typename __xcodeml_template_type_0_0::__storage_type __storage_type;
private:typedef typename __xcodeml_template_type_0_0::__storage_pointer __storage_pointer;
private:typename __xcodeml_template_type_0_0::__storage_pointer __seg_;
private:typename __xcodeml_template_type_0_0::__storage_type __mask_;
public:friend typename __xcodeml_template_type_0_0::__self;
public:friend __bit_const_reference<__xcodeml_template_type_0_0>;
public:friend __bit_iterator<__xcodeml_template_type_0_0,0,expression>;
public:
public:operator bool()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<bool>(((*this->__seg_)&this->__mask_));
}
public:bool operator~()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!static_cast<bool>((*this)));
}
public:class __bit_reference&operator=(bool __x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(__x){((*this->__seg_)|=this->__mask_);}else{((*this->__seg_)&=(~this->__mask_));};
return(*this);
}
public:class __bit_reference&operator=(class __bit_reference const&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->operator=(static_cast<bool>(__x)));
}
public:void flip()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((*this->__seg_)^=this->__mask_);
}
public:__bit_iterator<__xcodeml_template_type_0_0,0,expression>operator&()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__bit_iterator<__xcodeml_template_type_0_0,0,expression> >::t(this->__seg_,static_cast<unsigned int>((__libcpp_ctz(this->__mask_))));
}
private:
private:__bit_reference(typename __xcodeml_template_type_0_0::__storage_pointer __s,typename __xcodeml_template_type_0_0::__storage_type __m):__seg_(__s),__mask_(__m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
}
;
;
template<typename __xcodeml_template_type_0_0>class __bit_reference<__xcodeml_template_type_0_0,0>{}
;
template<typename __xcodeml_template_type_0_0>void swap(__bit_reference<__xcodeml_template_type_0_0,expression>__x,__bit_reference<__xcodeml_template_type_0_0,expression>__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{bool __t=__x;
(__x=__y);
(__y=__t);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void swap(__bit_reference<__xcodeml_template_type_0_0,expression>__x,__bit_reference<__xcodeml_template_type_0_1,expression>__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{bool __t=__x;
(__x=__y);
(__y=__t);
}
template<typename __xcodeml_template_type_0_0>void swap(__bit_reference<__xcodeml_template_type_0_0,expression>__x,bool&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{bool __t=__x;
(__x=__y);
(__y=__t);
}
template<typename __xcodeml_template_type_0_0>void swap(bool&__x,__bit_reference<__xcodeml_template_type_0_0,expression>__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{bool __t=__x;
(__x=__y);
(__y=__t);
}
template<typename __xcodeml_template_type_0_0>class __bit_const_reference{private:typedef typename __xcodeml_template_type_0_0::__storage_type __storage_type;
private:typedef typename __xcodeml_template_type_0_0::__const_storage_pointer __storage_pointer;
private:typename __xcodeml_template_type_0_0::__const_storage_pointer __seg_;
private:typename __xcodeml_template_type_0_0::__storage_type __mask_;
public:friend typename __xcodeml_template_type_0_0::__self;
public:friend __bit_iterator<__xcodeml_template_type_0_0,1,expression>;
public:
public:__bit_const_reference(__bit_reference<__xcodeml_template_type_0_0,expression>const&__x):__seg_(__x.__seg_),__mask_(__x.__mask_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:operator bool()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<bool>(((*this->__seg_)&this->__mask_));
}
public:__bit_iterator<__xcodeml_template_type_0_0,1,expression>operator&()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__bit_iterator<__xcodeml_template_type_0_0,1,expression> >::t(this->__seg_,static_cast<unsigned int>((__libcpp_ctz(this->__mask_))));
}
private:
private:__bit_const_reference(typename __xcodeml_template_type_0_0::__const_storage_pointer __s,typename __xcodeml_template_type_0_0::__storage_type __m):__seg_(__s),__mask_(__m)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
private:class __bit_const_reference&operator=(class __bit_const_reference const&__x);
}
;
;
template<typename __xcodeml_template_type_0_0,bool _IsConst>__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__find_bool_true(__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__first,typename __xcodeml_template_type_0_0::size_type __n){typedef __bit_iterator<__xcodeml_template_type_0_0,expression,expression>_It;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __storage_type;
static int const __bits_per_word=__bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__bits_per_word;
if(operator!=(__first.__ctz_,0)){{typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __clz_f=static_cast<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>(operator-(__bits_per_word,__first.__ctz_));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __dn=(std::__1::min(__clz_f,__n));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),__first.__ctz_)&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__clz_f,__dn)));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __b=((*__first.__seg_)&__m);
if(__b){return __xcodeml_identity<__bit_iterator<__xcodeml_template_type_0_0,expression,expression> >::t(__first.__seg_,static_cast<unsigned int>((std::__1::__libcpp_ctz(__b))));};
if(operator==(__n,__dn)){return operator+(__first,__n);};
(__n-=__dn);
(++__first.__seg_);
};};
{;for(;operator>=(__n,__bits_per_word);((++__first.__seg_),(__n-=__bits_per_word))){if((*__first.__seg_)){return __xcodeml_identity<__bit_iterator<__xcodeml_template_type_0_0,expression,expression> >::t(__first.__seg_,static_cast<unsigned int>((std::__1::__libcpp_ctz((*__first.__seg_)))));};}};
if(operator>(__n,0)){{typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __m=((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__bits_per_word,__n));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __b=((*__first.__seg_)&__m);
if(__b){return __xcodeml_identity<__bit_iterator<__xcodeml_template_type_0_0,expression,expression> >::t(__first.__seg_,static_cast<unsigned int>((std::__1::__libcpp_ctz(__b))));};
};};
return __xcodeml_identity<__bit_iterator<__xcodeml_template_type_0_0,expression,expression> >::t(__first.__seg_,static_cast<unsigned int>(__n));
}
template<typename __xcodeml_template_type_0_0,bool _IsConst>__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__find_bool_false(__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__first,typename __xcodeml_template_type_0_0::size_type __n){typedef __bit_iterator<__xcodeml_template_type_0_0,expression,expression>_It;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __storage_type;
int const __bits_per_word=__bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__bits_per_word;
if(operator!=(__first.__ctz_,0)){{typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __clz_f=static_cast<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>(operator-(__bits_per_word,__first.__ctz_));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __dn=(std::__1::min(__clz_f,__n));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),__first.__ctz_)&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__clz_f,__dn)));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __b=((~(*__first.__seg_))&__m);
if(__b){return __xcodeml_identity<__bit_iterator<__xcodeml_template_type_0_0,expression,expression> >::t(__first.__seg_,static_cast<unsigned int>((std::__1::__libcpp_ctz(__b))));};
if(operator==(__n,__dn)){return operator+(__first,__n);};
(__n-=__dn);
(++__first.__seg_);
};};
{;for(;operator>=(__n,__bits_per_word);((++__first.__seg_),(__n-=__bits_per_word))){{typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __b=(~(*__first.__seg_));
if(__b){return __xcodeml_identity<__bit_iterator<__xcodeml_template_type_0_0,expression,expression> >::t(__first.__seg_,static_cast<unsigned int>((std::__1::__libcpp_ctz(__b))));};
};}};
if(operator>(__n,0)){{typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __m=((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__bits_per_word,__n));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __b=((~(*__first.__seg_))&__m);
if(__b){return __xcodeml_identity<__bit_iterator<__xcodeml_template_type_0_0,expression,expression> >::t(__first.__seg_,static_cast<unsigned int>((std::__1::__libcpp_ctz(__b))));};
};};
return __xcodeml_identity<__bit_iterator<__xcodeml_template_type_0_0,expression,expression> >::t(__first.__seg_,static_cast<unsigned int>(__n));
}
template<typename __xcodeml_template_type_0_0,bool _IsConst,typename __xcodeml_template_type_0_2>__bit_iterator<__xcodeml_template_type_0_0,expression,expression>find(__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__first,__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__last,__xcodeml_template_type_0_2 const&__value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(static_cast<bool>(__value_)){return(__find_bool_true(__first,static_cast<typename __xcodeml_template_type_0_0::size_type>(operator-(__last,__first))));};
return(__find_bool_false(__first,static_cast<typename __xcodeml_template_type_0_0::size_type>(operator-(__last,__first))));
}
template<typename __xcodeml_template_type_0_0,bool _IsConst>typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type __count_bool_true(__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__first,typename __xcodeml_template_type_0_0::size_type __n){typedef __bit_iterator<__xcodeml_template_type_0_0,expression,expression>_It;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __storage_type;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type difference_type;
int const __bits_per_word=__bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__bits_per_word;
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type __r=0;
if(operator!=(__first.__ctz_,0)){{typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __clz_f=static_cast<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>(operator-(__bits_per_word,__first.__ctz_));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __dn=(std::__1::min(__clz_f,__n));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),__first.__ctz_)&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__clz_f,__dn)));
(__r=(std::__1::__libcpp_popcount(((*__first.__seg_)&__m))));
(__n-=__dn);
(++__first.__seg_);
};};
{;for(;operator>=(__n,__bits_per_word);((++__first.__seg_),(__n-=__bits_per_word))){(__r+=(std::__1::__libcpp_popcount((*__first.__seg_))));}};
if(operator>(__n,0)){{typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __m=((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__bits_per_word,__n));
(__r+=(std::__1::__libcpp_popcount(((*__first.__seg_)&__m))));
};};
return __r;
}
template<typename __xcodeml_template_type_0_0,bool _IsConst>typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type __count_bool_false(__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__first,typename __xcodeml_template_type_0_0::size_type __n){typedef __bit_iterator<__xcodeml_template_type_0_0,expression,expression>_It;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __storage_type;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type difference_type;
int const __bits_per_word=__bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__bits_per_word;
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type __r=0;
if(operator!=(__first.__ctz_,0)){{typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __clz_f=static_cast<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>(operator-(__bits_per_word,__first.__ctz_));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __dn=(std::__1::min(__clz_f,__n));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),__first.__ctz_)&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__clz_f,__dn)));
(__r=(std::__1::__libcpp_popcount(((~(*__first.__seg_))&__m))));
(__n-=__dn);
(++__first.__seg_);
};};
{;for(;operator>=(__n,__bits_per_word);((++__first.__seg_),(__n-=__bits_per_word))){(__r+=(std::__1::__libcpp_popcount((~(*__first.__seg_)))));}};
if(operator>(__n,0)){{typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __m=((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__bits_per_word,__n));
(__r+=(std::__1::__libcpp_popcount(((~(*__first.__seg_))&__m))));
};};
return __r;
}
template<typename __xcodeml_template_type_0_0,bool _IsConst,typename __xcodeml_template_type_0_2>typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type count(__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__first,__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__last,__xcodeml_template_type_0_2 const&__value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(static_cast<bool>(__value_)){return(__count_bool_true(__first,static_cast<typename __xcodeml_template_type_0_0::size_type>(operator-(__last,__first))));};
return(__count_bool_false(__first,static_cast<typename __xcodeml_template_type_0_0::size_type>(operator-(__last,__first))));
}
template<typename __xcodeml_template_type_0_0>void __fill_n_false(__bit_iterator<__xcodeml_template_type_0_0,0,expression>__first,typename __xcodeml_template_type_0_0::size_type __n){typedef __bit_iterator<__xcodeml_template_type_0_0,0,expression>_It;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __storage_type;
int const __bits_per_word=__bit_iterator<__xcodeml_template_type_0_0,0,expression>::__bits_per_word;
if(operator!=(__first.__ctz_,0)){{typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __clz_f=static_cast<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>(operator-(__bits_per_word,__first.__ctz_));
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __dn=(std::__1::min(__clz_f,__n));
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>::t(0)),__first.__ctz_)&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>::t(0))>>operator-(__clz_f,__dn)));
((*__first.__seg_)&=(~__m));
(__n-=__dn);
(++__first.__seg_);
};};
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __nw=(__n/__bits_per_word);
(std::__1::memset((std::__1::__to_raw_pointer(__first.__seg_)),0,(__nw*(sizeof(typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type)))));
(__n-=(__nw*__bits_per_word));
if(operator>(__n,0)){{(__first.__seg_+=__nw);
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __m=((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>::t(0))>>operator-(__bits_per_word,__n));
((*__first.__seg_)&=(~__m));
};};
}
template<typename __xcodeml_template_type_0_0>void __fill_n_true(__bit_iterator<__xcodeml_template_type_0_0,0,expression>__first,typename __xcodeml_template_type_0_0::size_type __n){typedef __bit_iterator<__xcodeml_template_type_0_0,0,expression>_It;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __storage_type;
int const __bits_per_word=__bit_iterator<__xcodeml_template_type_0_0,0,expression>::__bits_per_word;
if(operator!=(__first.__ctz_,0)){{typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __clz_f=static_cast<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>(operator-(__bits_per_word,__first.__ctz_));
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __dn=(std::__1::min(__clz_f,__n));
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>::t(0)),__first.__ctz_)&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>::t(0))>>operator-(__clz_f,__dn)));
((*__first.__seg_)|=__m);
(__n-=__dn);
(++__first.__seg_);
};};
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __nw=(__n/__bits_per_word);
(std::__1::memset((std::__1::__to_raw_pointer(__first.__seg_)),(-1),(__nw*(sizeof(typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type)))));
(__n-=(__nw*__bits_per_word));
if(operator>(__n,0)){{(__first.__seg_+=__nw);
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __m=((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>::t(0))>>operator-(__bits_per_word,__n));
((*__first.__seg_)|=__m);
};};
}
template<typename __xcodeml_template_type_0_0>void fill_n(__bit_iterator<__xcodeml_template_type_0_0,0,expression>__first,typename __xcodeml_template_type_0_0::size_type __n,bool __value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator>(__n,0)){{if(__value_){(__fill_n_true(__first,__n));}else{(__fill_n_false(__first,__n));};
};};
}
template<typename __xcodeml_template_type_0_0>void fill(__bit_iterator<__xcodeml_template_type_0_0,0,expression>__first,__bit_iterator<__xcodeml_template_type_0_0,0,expression>__last,bool __value_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(std::__1::fill_n(__first,static_cast<typename __xcodeml_template_type_0_0::size_type>(operator-(__last,__first)),__value_));
}
template<typename __xcodeml_template_type_0_0,bool _IsConst>__bit_iterator<__xcodeml_template_type_0_0,0,expression>__copy_aligned(__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__first,__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__last,__bit_iterator<__xcodeml_template_type_0_0,0,expression>__result){typedef __bit_iterator<__xcodeml_template_type_0_0,expression,expression>_In;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type difference_type;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __storage_type;
int const __bits_per_word=__bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__bits_per_word;
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type __n=operator-(__last,__first);
if(operator>(__n,0)){{if(operator!=(__first.__ctz_,0)){{unsigned int __clz=operator-(__bits_per_word,__first.__ctz_);
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type __dn=(std::__1::min(static_cast<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type>(__clz),__n));
(__n-=__dn);
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),__first.__ctz_)&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__clz,__dn)));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __b=((*__first.__seg_)&__m);
((*__result.__seg_)&=(~__m));
((*__result.__seg_)|=__b);
(__result.__seg_+=(operator+(__dn,__result.__ctz_)/__bits_per_word));
(__result.__ctz_=static_cast<unsigned int>((operator+(__dn,__result.__ctz_)%__bits_per_word)));
(++__first.__seg_);
};};
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __nw=(__n/__bits_per_word);
(std::__1::memmove((std::__1::__to_raw_pointer(__result.__seg_)),(std::__1::__to_raw_pointer(__first.__seg_)),(__nw*(sizeof(typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type)))));
(__n-=(__nw*__bits_per_word));
(__result.__seg_+=__nw);
if(operator>(__n,0)){{(__first.__seg_+=__nw);
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __m=((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__bits_per_word,__n));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __b=((*__first.__seg_)&__m);
((*__result.__seg_)&=(~__m));
((*__result.__seg_)|=__b);
(__result.__ctz_=static_cast<unsigned int>(__n));
};};
};};
return __result;
}
template<typename __xcodeml_template_type_0_0,bool _IsConst>__bit_iterator<__xcodeml_template_type_0_0,0,expression>__copy_unaligned(__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__first,__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__last,__bit_iterator<__xcodeml_template_type_0_0,0,expression>__result){typedef __bit_iterator<__xcodeml_template_type_0_0,expression,expression>_In;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type difference_type;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __storage_type;
static int const __bits_per_word=__bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__bits_per_word;
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type __n=operator-(__last,__first);
if(operator>(__n,0)){{if(operator!=(__first.__ctz_,0)){{unsigned int __clz_f=operator-(__bits_per_word,__first.__ctz_);
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type __dn=(std::__1::min(static_cast<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type>(__clz_f),__n));
(__n-=__dn);
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),__first.__ctz_)&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__clz_f,__dn)));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __b=((*__first.__seg_)&__m);
unsigned int __clz_r=operator-(__bits_per_word,__result.__ctz_);
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __ddn=(std::__1::min<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>(__dn,__clz_r));
(__m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),__result.__ctz_)&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__clz_r,__ddn))));
((*__result.__seg_)&=(~__m));
if(operator>(__result.__ctz_,__first.__ctz_)){((*__result.__seg_)|=operator<<(__b,operator-(__result.__ctz_,__first.__ctz_)));}else{((*__result.__seg_)|=(__b>>operator-(__first.__ctz_,__result.__ctz_)));};
(__result.__seg_+=(operator+(__ddn,__result.__ctz_)/__bits_per_word));
(__result.__ctz_=static_cast<unsigned int>((operator+(__ddn,__result.__ctz_)%__bits_per_word)));
(__dn-=__ddn);
if(operator>(__dn,0)){{(__m=((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__bits_per_word,__dn)));
((*__result.__seg_)&=(~__m));
((*__result.__seg_)|=(__b>>operator+(__first.__ctz_,__ddn)));
(__result.__ctz_=static_cast<unsigned int>(__dn));
};};
(++__first.__seg_);
};};
unsigned int __clz_r=operator-(__bits_per_word,__result.__ctz_);
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __m=operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),__result.__ctz_);
{;for(;operator>=(__n,__bits_per_word);((__n-=__bits_per_word),(++__first.__seg_))){{typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __b=(*__first.__seg_);
((*__result.__seg_)&=(~__m));
((*__result.__seg_)|=operator<<(__b,__result.__ctz_));
(++__result.__seg_);
((*__result.__seg_)&=__m);
((*__result.__seg_)|=(__b>>__clz_r));
};}};
if(operator>(__n,0)){{(__m=((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__bits_per_word,__n)));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __b=((*__first.__seg_)&__m);
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __dn=(std::__1::min(__n,static_cast<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type>(__clz_r)));
(__m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),__result.__ctz_)&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__clz_r,__dn))));
((*__result.__seg_)&=(~__m));
((*__result.__seg_)|=operator<<(__b,__result.__ctz_));
(__result.__seg_+=(operator+(__dn,__result.__ctz_)/__bits_per_word));
(__result.__ctz_=static_cast<unsigned int>((operator+(__dn,__result.__ctz_)%__bits_per_word)));
(__n-=__dn);
if(operator>(__n,0)){{(__m=((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__bits_per_word,__n)));
((*__result.__seg_)&=(~__m));
((*__result.__seg_)|=(__b>>__dn));
(__result.__ctz_=static_cast<unsigned int>(__n));
};};
};};
};};
return __result;
}
template<typename __xcodeml_template_type_0_0,bool _IsConst>__bit_iterator<__xcodeml_template_type_0_0,0,expression>copy(__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__first,__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__last,__bit_iterator<__xcodeml_template_type_0_0,0,expression>__result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator==(__first.__ctz_,__result.__ctz_)){return(__copy_aligned(__first,__last,__result));};
return(__copy_unaligned(__first,__last,__result));
}
template<typename __xcodeml_template_type_0_0,bool _IsConst>__bit_iterator<__xcodeml_template_type_0_0,0,expression>__copy_backward_aligned(__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__first,__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__last,__bit_iterator<__xcodeml_template_type_0_0,0,expression>__result){typedef __bit_iterator<__xcodeml_template_type_0_0,expression,expression>_In;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type difference_type;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __storage_type;
int const __bits_per_word=__bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__bits_per_word;
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type __n=operator-(__last,__first);
if(operator>(__n,0)){{if(operator!=(__last.__ctz_,0)){{typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type __dn=(std::__1::min(static_cast<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type>(__last.__ctz_),__n));
(__n-=__dn);
unsigned int __clz=operator-(__bits_per_word,__last.__ctz_);
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),operator-(__last.__ctz_,__dn))&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>__clz));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __b=((*__last.__seg_)&__m);
((*__result.__seg_)&=(~__m));
((*__result.__seg_)|=__b);
(__result.__ctz_=static_cast<unsigned int>((operator+((operator-(__dn)&(__bits_per_word-1)),__result.__ctz_)%__bits_per_word)));
};};
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __nw=(__n/__bits_per_word);
(__result.__seg_-=__nw);
(__last.__seg_-=__nw);
(std::__1::memmove((std::__1::__to_raw_pointer(__result.__seg_)),(std::__1::__to_raw_pointer(__last.__seg_)),(__nw*(sizeof(typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type)))));
(__n-=(__nw*__bits_per_word));
if(operator>(__n,0)){{typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __m=operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),operator-(__bits_per_word,__n));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __b=((*(--__last.__seg_))&__m);
((*(--__result.__seg_))&=(~__m));
((*__result.__seg_)|=__b);
(__result.__ctz_=static_cast<unsigned int>((operator-(__n)&(__bits_per_word-1))));
};};
};};
return __result;
}
template<typename __xcodeml_template_type_0_0,bool _IsConst>__bit_iterator<__xcodeml_template_type_0_0,0,expression>__copy_backward_unaligned(__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__first,__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__last,__bit_iterator<__xcodeml_template_type_0_0,0,expression>__result){typedef __bit_iterator<__xcodeml_template_type_0_0,expression,expression>_In;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type difference_type;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __storage_type;
int const __bits_per_word=__bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__bits_per_word;
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type __n=operator-(__last,__first);
if(operator>(__n,0)){{if(operator!=(__last.__ctz_,0)){{typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type __dn=(std::__1::min(static_cast<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type>(__last.__ctz_),__n));
(__n-=__dn);
unsigned int __clz_l=operator-(__bits_per_word,__last.__ctz_);
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),operator-(__last.__ctz_,__dn))&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>__clz_l));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __b=((*__last.__seg_)&__m);
unsigned int __clz_r=operator-(__bits_per_word,__result.__ctz_);
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __ddn=(std::__1::min(__dn,static_cast<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type>(__result.__ctz_)));
if(operator>(__ddn,0)){{(__m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),operator-(__result.__ctz_,__ddn))&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>__clz_r)));
((*__result.__seg_)&=(~__m));
if(operator>(__result.__ctz_,__last.__ctz_)){((*__result.__seg_)|=operator<<(__b,operator-(__result.__ctz_,__last.__ctz_)));}else{((*__result.__seg_)|=(__b>>operator-(__last.__ctz_,__result.__ctz_)));};
(__result.__ctz_=static_cast<unsigned int>((operator+((operator-(__ddn)&(__bits_per_word-1)),__result.__ctz_)%__bits_per_word)));
(__dn-=__ddn);
};};
if(operator>(__dn,0)){{(--__result.__seg_);
(__result.__ctz_=static_cast<unsigned int>((operator-(__dn)&(__bits_per_word-1))));
(__m=operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),__result.__ctz_));
((*__result.__seg_)&=(~__m));
(__last.__ctz_-=operator+(__dn,__ddn));
((*__result.__seg_)|=operator<<(__b,operator-(__result.__ctz_,__last.__ctz_)));
};};
};};
unsigned int __clz_r=operator-(__bits_per_word,__result.__ctz_);
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __m=((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>__clz_r);
{;for(;operator>=(__n,__bits_per_word);(__n-=__bits_per_word)){{typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __b=(*(--__last.__seg_));
((*__result.__seg_)&=(~__m));
((*__result.__seg_)|=(__b>>__clz_r));
((*(--__result.__seg_))&=__m);
((*__result.__seg_)|=operator<<(__b,__result.__ctz_));
};}};
if(operator>(__n,0)){{(__m=operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),operator-(__bits_per_word,__n)));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __b=((*(--__last.__seg_))&__m);
(__clz_r=operator-(__bits_per_word,__result.__ctz_));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __dn=(std::__1::min(__n,static_cast<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type>(__result.__ctz_)));
(__m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),operator-(__result.__ctz_,__dn))&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>__clz_r)));
((*__result.__seg_)&=(~__m));
((*__result.__seg_)|=(__b>>operator-(__bits_per_word,__result.__ctz_)));
(__result.__ctz_=static_cast<unsigned int>((operator+((operator-(__dn)&(__bits_per_word-1)),__result.__ctz_)%__bits_per_word)));
(__n-=__dn);
if(operator>(__n,0)){{(--__result.__seg_);
(__result.__ctz_=static_cast<unsigned int>((operator-(__n)&(__bits_per_word-1))));
(__m=operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),__result.__ctz_));
((*__result.__seg_)&=(~__m));
((*__result.__seg_)|=operator<<(__b,operator-(__result.__ctz_,operator-(operator-(__bits_per_word,__n),__dn))));
};};
};};
};};
return __result;
}
template<typename __xcodeml_template_type_0_0,bool _IsConst>__bit_iterator<__xcodeml_template_type_0_0,0,expression>copy_backward(__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__first,__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__last,__bit_iterator<__xcodeml_template_type_0_0,0,expression>__result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator==(__last.__ctz_,__result.__ctz_)){return(__copy_backward_aligned(__first,__last,__result));};
return(__copy_backward_unaligned(__first,__last,__result));
}
template<typename __xcodeml_template_type_0_0,bool _IsConst>__bit_iterator<__xcodeml_template_type_0_0,0,expression>move(__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__first,__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__last,__bit_iterator<__xcodeml_template_type_0_0,0,expression>__result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::copy(__first,__last,__result));
}
template<typename __xcodeml_template_type_0_0,bool _IsConst>__bit_iterator<__xcodeml_template_type_0_0,0,expression>move_backward(__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__first,__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__last,__bit_iterator<__xcodeml_template_type_0_0,0,expression>__result)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::copy_backward(__first,__last,__result));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__bit_iterator<__xcodeml_template_type_0_1,0,expression>__swap_ranges_aligned(__bit_iterator<__xcodeml_template_type_0_0,0,expression>__first,__bit_iterator<__xcodeml_template_type_0_0,0,expression>__last,__bit_iterator<__xcodeml_template_type_0_1,0,expression>__result){typedef __bit_iterator<__xcodeml_template_type_0_0,0,expression>_I1;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::difference_type difference_type;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __storage_type;
int const __bits_per_word=__bit_iterator<__xcodeml_template_type_0_0,0,expression>::__bits_per_word;
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::difference_type __n=operator-(__last,__first);
if(operator>(__n,0)){{if(operator!=(__first.__ctz_,0)){{unsigned int __clz=operator-(__bits_per_word,__first.__ctz_);
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::difference_type __dn=(std::__1::min(static_cast<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::difference_type>(__clz),__n));
(__n-=__dn);
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>::t(0)),__first.__ctz_)&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>::t(0))>>operator-(__clz,__dn)));
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __b1=((*__first.__seg_)&__m);
((*__first.__seg_)&=(~__m));
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __b2=((*__result.__seg_)&__m);
((*__result.__seg_)&=(~__m));
((*__result.__seg_)|=__b1);
((*__first.__seg_)|=__b2);
(__result.__seg_+=(operator+(__dn,__result.__ctz_)/__bits_per_word));
(__result.__ctz_=static_cast<unsigned int>((operator+(__dn,__result.__ctz_)%__bits_per_word)));
(++__first.__seg_);
};};
{;for(;operator>=(__n,__bits_per_word);(((__n-=__bits_per_word),(++__first.__seg_)),(++__result.__seg_))){(swap((*__first.__seg_),(*__result.__seg_)));}};
if(operator>(__n,0)){{typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __m=((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>::t(0))>>operator-(__bits_per_word,__n));
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __b1=((*__first.__seg_)&__m);
((*__first.__seg_)&=(~__m));
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __b2=((*__result.__seg_)&__m);
((*__result.__seg_)&=(~__m));
((*__result.__seg_)|=__b1);
((*__first.__seg_)|=__b2);
(__result.__ctz_=static_cast<unsigned int>(__n));
};};
};};
return __result;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__bit_iterator<__xcodeml_template_type_0_1,0,expression>__swap_ranges_unaligned(__bit_iterator<__xcodeml_template_type_0_0,0,expression>__first,__bit_iterator<__xcodeml_template_type_0_0,0,expression>__last,__bit_iterator<__xcodeml_template_type_0_1,0,expression>__result){typedef __bit_iterator<__xcodeml_template_type_0_0,0,expression>_I1;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::difference_type difference_type;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __storage_type;
int const __bits_per_word=__bit_iterator<__xcodeml_template_type_0_0,0,expression>::__bits_per_word;
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::difference_type __n=operator-(__last,__first);
if(operator>(__n,0)){{if(operator!=(__first.__ctz_,0)){{unsigned int __clz_f=operator-(__bits_per_word,__first.__ctz_);
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::difference_type __dn=(std::__1::min(static_cast<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::difference_type>(__clz_f),__n));
(__n-=__dn);
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>::t(0)),__first.__ctz_)&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>::t(0))>>operator-(__clz_f,__dn)));
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __b1=((*__first.__seg_)&__m);
((*__first.__seg_)&=(~__m));
unsigned int __clz_r=operator-(__bits_per_word,__result.__ctz_);
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __ddn=(std::__1::min<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>(__dn,__clz_r));
(__m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>::t(0)),__result.__ctz_)&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>::t(0))>>operator-(__clz_r,__ddn))));
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __b2=((*__result.__seg_)&__m);
((*__result.__seg_)&=(~__m));
if(operator>(__result.__ctz_,__first.__ctz_)){{unsigned int __s=operator-(__result.__ctz_,__first.__ctz_);
((*__result.__seg_)|=operator<<(__b1,__s));
((*__first.__seg_)|=(__b2>>__s));
};}else{{unsigned int __s=operator-(__first.__ctz_,__result.__ctz_);
((*__result.__seg_)|=(__b1>>__s));
((*__first.__seg_)|=operator<<(__b2,__s));
};};
(__result.__seg_+=(operator+(__ddn,__result.__ctz_)/__bits_per_word));
(__result.__ctz_=static_cast<unsigned int>((operator+(__ddn,__result.__ctz_)%__bits_per_word)));
(__dn-=__ddn);
if(operator>(__dn,0)){{(__m=((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>::t(0))>>operator-(__bits_per_word,__dn)));
(__b2=((*__result.__seg_)&__m));
((*__result.__seg_)&=(~__m));
unsigned int __s=operator+(__first.__ctz_,__ddn);
((*__result.__seg_)|=(__b1>>__s));
((*__first.__seg_)|=operator<<(__b2,__s));
(__result.__ctz_=static_cast<unsigned int>(__dn));
};};
(++__first.__seg_);
};};
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __m=operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>::t(0)),__result.__ctz_);
unsigned int __clz_r=operator-(__bits_per_word,__result.__ctz_);
{;for(;operator>=(__n,__bits_per_word);((__n-=__bits_per_word),(++__first.__seg_))){{typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __b1=(*__first.__seg_);
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __b2=((*__result.__seg_)&__m);
((*__result.__seg_)&=(~__m));
((*__result.__seg_)|=operator<<(__b1,__result.__ctz_));
((*__first.__seg_)=(__b2>>__result.__ctz_));
(++__result.__seg_);
(__b2=((*__result.__seg_)&(~__m)));
((*__result.__seg_)&=__m);
((*__result.__seg_)|=(__b1>>__clz_r));
((*__first.__seg_)|=operator<<(__b2,__clz_r));
};}};
if(operator>(__n,0)){{(__m=((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>::t(0))>>operator-(__bits_per_word,__n)));
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __b1=((*__first.__seg_)&__m);
((*__first.__seg_)&=(~__m));
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __dn=(std::__1::min<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>(__n,__clz_r));
(__m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>::t(0)),__result.__ctz_)&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>::t(0))>>operator-(__clz_r,__dn))));
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type __b2=((*__result.__seg_)&__m);
((*__result.__seg_)&=(~__m));
((*__result.__seg_)|=operator<<(__b1,__result.__ctz_));
((*__first.__seg_)|=(__b2>>__result.__ctz_));
(__result.__seg_+=(operator+(__dn,__result.__ctz_)/__bits_per_word));
(__result.__ctz_=static_cast<unsigned int>((operator+(__dn,__result.__ctz_)%__bits_per_word)));
(__n-=__dn);
if(operator>(__n,0)){{(__m=((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::__storage_type>::t(0))>>operator-(__bits_per_word,__n)));
(__b2=((*__result.__seg_)&__m));
((*__result.__seg_)&=(~__m));
((*__result.__seg_)|=(__b1>>__dn));
((*__first.__seg_)|=operator<<(__b2,__dn));
(__result.__ctz_=static_cast<unsigned int>(__n));
};};
};};
};};
return __result;
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>__bit_iterator<__xcodeml_template_type_0_1,0,expression>swap_ranges(__bit_iterator<__xcodeml_template_type_0_0,0,expression>__first1,__bit_iterator<__xcodeml_template_type_0_0,0,expression>__last1,__bit_iterator<__xcodeml_template_type_0_1,0,expression>__first2)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator==(__first1.__ctz_,__first2.__ctz_)){return(__swap_ranges_aligned(__first1,__last1,__first2));};
return(__swap_ranges_unaligned(__first1,__last1,__first2));
}
template<typename __xcodeml_template_type_0_0>class __bit_array{public:typedef typename __xcodeml_template_type_0_0::difference_type difference_type;
public:typedef typename __xcodeml_template_type_0_0::__storage_type __storage_type;
public:typedef typename __xcodeml_template_type_0_0::__storage_pointer __storage_pointer;
public:typedef typename __xcodeml_template_type_0_0::iterator iterator;
public:static unsigned int const __bits_per_word=__xcodeml_template_type_0_0::__bits_per_word;
public:static unsigned int const _Np=4;
public:typename __xcodeml_template_type_0_0::difference_type __size_;
public:typename __xcodeml_template_type_0_0::__storage_type __word_[_Np];
public:static typename __xcodeml_template_type_0_0::difference_type capacity()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<typename __xcodeml_template_type_0_0::difference_type>((_Np*__bits_per_word));
}
public:__bit_array(typename __xcodeml_template_type_0_0::difference_type __s):__size_(__s)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:typename __xcodeml_template_type_0_0::iterator begin()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<typename __xcodeml_template_type_0_0::iterator>::t((pointer_traits<typename __xcodeml_template_type_0_0::__storage_pointer>::.pointer_to((this->__word_)[0])),0);
}
public:typename __xcodeml_template_type_0_0::iterator end()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<typename __xcodeml_template_type_0_0::iterator>::t(operator+((pointer_traits<typename __xcodeml_template_type_0_0::__storage_pointer>::.pointer_to((this->__word_)[0])),(this->__size_/__bits_per_word)),static_cast<unsigned int>((this->__size_%__bits_per_word)));
}
}
;
;
template<typename __xcodeml_template_type_0_0>__bit_iterator<__xcodeml_template_type_0_0,0,expression>rotate(__bit_iterator<__xcodeml_template_type_0_0,0,expression>__first,__bit_iterator<__xcodeml_template_type_0_0,0,expression>__middle,__bit_iterator<__xcodeml_template_type_0_0,0,expression>__last){typedef __bit_iterator<__xcodeml_template_type_0_0,0,expression>_I1;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::difference_type difference_type;
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::difference_type __d1=operator-(__middle,__first);
typename __bit_iterator<__xcodeml_template_type_0_0,0,expression>::difference_type __d2=operator-(__last,__middle);
__bit_iterator<__xcodeml_template_type_0_0,0,expression>__r=operator+(__first,__d2);
while((operator!=(__d1,0)&&operator!=(__d2,0))){{if(operator<=(__d1,__d2)){{if(operator<=(__d1,(__bit_array<__xcodeml_template_type_0_0>::capacity()))){{__bit_array<__xcodeml_template_type_0_0>__b=__d1;
(std::__1::copy(__first,__middle,(__b.begin())));
(std::__1::copy((__b.begin()),(__b.end()),(std::__1::copy(__middle,__last,__first))));
break;
};}else{{__bit_iterator<__xcodeml_template_type_0_0,0,expression>__mp=(std::__1::swap_ranges(__first,__middle,__middle));
(__first=__middle);
(__middle=__mp);
(__d2-=__d1);
};};
};}else{{if(operator<=(__d2,(__bit_array<__xcodeml_template_type_0_0>::capacity()))){{__bit_array<__xcodeml_template_type_0_0>__b=__d2;
(std::__1::copy(__middle,__last,(__b.begin())));
(std::__1::copy_backward((__b.begin()),(__b.end()),(std::__1::copy_backward(__first,__middle,__last))));
break;
};}else{{__bit_iterator<__xcodeml_template_type_0_0,0,expression>__mp=operator+(__first,__d2);
(std::__1::swap_ranges(__first,__mp,__middle));
(__first=__mp);
(__d1-=__d2);
};};
};};
};};
return __r;
}
template<typename __xcodeml_template_type_0_0,bool _IC1,bool _IC2>bool __equal_unaligned(__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__first1,__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__last1,__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__first2){typedef __bit_iterator<__xcodeml_template_type_0_0,expression,expression>_It;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type difference_type;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __storage_type;
static int const __bits_per_word=__bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__bits_per_word;
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type __n=operator-(__last1,__first1);
if(operator>(__n,0)){{if(operator!=(__first1.__ctz_,0)){{unsigned int __clz_f=operator-(__bits_per_word,__first1.__ctz_);
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type __dn=(std::__1::min(static_cast<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type>(__clz_f),__n));
(__n-=__dn);
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),__first1.__ctz_)&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__clz_f,__dn)));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __b=((*__first1.__seg_)&__m);
unsigned int __clz_r=operator-(__bits_per_word,__first2.__ctz_);
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __ddn=(std::__1::min<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>(__dn,__clz_r));
(__m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),__first2.__ctz_)&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__clz_r,__ddn))));
if(operator>(__first2.__ctz_,__first1.__ctz_)){{if(operator!=(((*__first2.__seg_)&__m),operator<<(__b,operator-(__first2.__ctz_,__first1.__ctz_)))){return false;};
};}else{{if(operator!=(((*__first2.__seg_)&__m),(__b>>operator-(__first1.__ctz_,__first2.__ctz_)))){return false;};
};};
(__first2.__seg_+=(operator+(__ddn,__first2.__ctz_)/__bits_per_word));
(__first2.__ctz_=static_cast<unsigned int>((operator+(__ddn,__first2.__ctz_)%__bits_per_word)));
(__dn-=__ddn);
if(operator>(__dn,0)){{(__m=((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__bits_per_word,__dn)));
if(operator!=(((*__first2.__seg_)&__m),(__b>>operator+(__first1.__ctz_,__ddn)))){return false;};
(__first2.__ctz_=static_cast<unsigned int>(__dn));
};};
(++__first1.__seg_);
};};
unsigned int __clz_r=operator-(__bits_per_word,__first2.__ctz_);
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __m=operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),__first2.__ctz_);
{;for(;operator>=(__n,__bits_per_word);((__n-=__bits_per_word),(++__first1.__seg_))){{typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __b=(*__first1.__seg_);
if(operator!=(((*__first2.__seg_)&__m),operator<<(__b,__first2.__ctz_))){return false;};
(++__first2.__seg_);
if(operator!=(((*__first2.__seg_)&(~__m)),(__b>>__clz_r))){return false;};
};}};
if(operator>(__n,0)){{(__m=((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__bits_per_word,__n)));
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __b=((*__first1.__seg_)&__m);
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __dn=(std::__1::min(__n,static_cast<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type>(__clz_r)));
(__m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),__first2.__ctz_)&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__clz_r,__dn))));
if(operator!=(((*__first2.__seg_)&__m),operator<<(__b,__first2.__ctz_))){return false;};
(__first2.__seg_+=(operator+(__dn,__first2.__ctz_)/__bits_per_word));
(__first2.__ctz_=static_cast<unsigned int>((operator+(__dn,__first2.__ctz_)%__bits_per_word)));
(__n-=__dn);
if(operator>(__n,0)){{(__m=((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__bits_per_word,__n)));
if(operator!=(((*__first2.__seg_)&__m),(__b>>__dn))){return false;};
};};
};};
};};
return true;
}
template<typename __xcodeml_template_type_0_0,bool _IC1,bool _IC2>bool __equal_aligned(__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__first1,__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__last1,__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__first2){typedef __bit_iterator<__xcodeml_template_type_0_0,expression,expression>_It;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type difference_type;
typedef typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __storage_type;
static int const __bits_per_word=__bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__bits_per_word;
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type __n=operator-(__last1,__first1);
if(operator>(__n,0)){{if(operator!=(__first1.__ctz_,0)){{unsigned int __clz=operator-(__bits_per_word,__first1.__ctz_);
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type __dn=(std::__1::min(static_cast<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::difference_type>(__clz),__n));
(__n-=__dn);
typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __m=(operator<<((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0)),__first1.__ctz_)&((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__clz,__dn)));
if(operator!=(((*__first2.__seg_)&__m),((*__first1.__seg_)&__m))){return false;};
(++__first2.__seg_);
(++__first1.__seg_);
};};
{;for(;operator>=(__n,__bits_per_word);(((__n-=__bits_per_word),(++__first1.__seg_)),(++__first2.__seg_))){if(operator!=((*__first2.__seg_),(*__first1.__seg_))){return false;};}};
if(operator>(__n,0)){{typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type __m=((~__xcodeml_identity<typename __bit_iterator<__xcodeml_template_type_0_0,expression,expression>::__storage_type>::t(0))>>operator-(__bits_per_word,__n));
if(operator!=(((*__first2.__seg_)&__m),((*__first1.__seg_)&__m))){return false;};
};};
};};
return true;
}
template<typename __xcodeml_template_type_0_0,bool _IC1,bool _IC2>bool equal(__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__first1,__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__last1,__bit_iterator<__xcodeml_template_type_0_0,expression,expression>__first2)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator==(__first1.__ctz_,__first2.__ctz_)){return(__equal_aligned(__first1,__last1,__first2));};
return(__equal_unaligned(__first1,__last1,__first2));
}
template<typename __xcodeml_template_type_0_0,bool _IsConst,typename __xcodeml_template_type_0_0::__storage_type>class __bit_iterator{public:
public:typedef typename __xcodeml_template_type_0_0::difference_type difference_type;
public:typedef bool value_type;
public:typedef class __bit_iterator pointer;
public:typedef typename conditional<expression,__bit_const_reference<__xcodeml_template_type_0_0>,__bit_reference<__xcodeml_template_type_0_0,expression> >::type reference;
public:typedef class::std::__1::random_access_iterator_tag iterator_category;
private:
private:typedef typename __xcodeml_template_type_0_0::__storage_type __storage_type;
private:typedef typename conditional<expression,typename __xcodeml_template_type_0_0::__const_storage_pointer,typename __xcodeml_template_type_0_0::__storage_pointer>::type __storage_pointer;
private:static unsigned int const __bits_per_word=__xcodeml_template_type_0_0::__bits_per_word;
private:typename conditional<expression,typename __xcodeml_template_type_0_0::__const_storage_pointer,typename __xcodeml_template_type_0_0::__storage_pointer>::type __seg_;
private:unsigned int __ctz_;
public:
public:__bit_iterator()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}

/* Ignored a member with no access specifier class __private_nat;*/

public:using __type_for_copy_to_const=/*DTS*/_MetaBase<expression>::template _SelectImpl<__bit_iterator<__xcodeml_template_type_0_0,0,expression>,class::std::__1::__private_nat>;
public:__bit_iterator(/*DTS*/_SelectImpl<__bit_iterator<__xcodeml_template_type_0_0,0,expression>,class::std::__1::__private_nat>):__seg_(__it.__seg_),__ctz_(__it.__ctz_)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:typename conditional<expression,__bit_const_reference<__xcodeml_template_type_0_0>,__bit_reference<__xcodeml_template_type_0_0,expression> >::type operator*()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<typename conditional<expression,__bit_const_reference<__xcodeml_template_type_0_0>,__bit_reference<__xcodeml_template_type_0_0,expression> >::type>::t(this->__seg_,operator<<(__xcodeml_identity<typename __xcodeml_template_type_0_0::__storage_type>::t(1),this->__ctz_));
}
public:class __bit_iterator&operator++()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator!=(this->__ctz_,(__bits_per_word-1))){(++this->__ctz_);}else{{(this->__ctz_=0);
(++this->__seg_);
};};
return(*this);
}
public:class __bit_iterator operator++(int)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{class __bit_iterator __tmp=(*this);
(++(*this));
return __tmp;
}
public:class __bit_iterator&operator--()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator!=(this->__ctz_,0)){(--this->__ctz_);}else{{(this->__ctz_=(__bits_per_word-1));
(--this->__seg_);
};};
return(*this);
}
public:class __bit_iterator operator--(int)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{class __bit_iterator __tmp=(*this);
(--(*this));
return __tmp;
}
public:class __bit_iterator&operator+=(typename __xcodeml_template_type_0_0::difference_type __n)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator>=(__n,0)){(this->__seg_+=(operator+(__n,this->__ctz_)/__bits_per_word));}else{(this->__seg_+=(static_cast<typename __xcodeml_template_type_0_0::difference_type>(operator+(operator+(operator-(__n,__bits_per_word),this->__ctz_),1))/static_cast<typename __xcodeml_template_type_0_0::difference_type>(__bits_per_word)));};
(__n&=(__bits_per_word-1));
(this->__ctz_=static_cast<unsigned int>((operator+(__n,this->__ctz_)%__bits_per_word)));
return(*this);
}
public:class __bit_iterator&operator-=(typename __xcodeml_template_type_0_0::difference_type __n)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return((*this)+=operator-(__n));
}
public:class __bit_iterator operator+(typename __xcodeml_template_type_0_0::difference_type __n)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{class __bit_iterator __t=(*this);
(__t+=__n);
return __t;
}
public:class __bit_iterator operator-(typename __xcodeml_template_type_0_0::difference_type __n)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{class __bit_iterator __t=(*this);
(__t-=__n);
return __t;
}
public:friend class __bit_iterator operator+(typename __xcodeml_template_type_0_0::difference_type __n,class __bit_iterator const&__it)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator+(__it,__n);
};
public:friend typename __xcodeml_template_type_0_0::difference_type operator-(class __bit_iterator const&__x,class __bit_iterator const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator-(operator+((operator-(__x.__seg_,__y.__seg_)*__bits_per_word),__x.__ctz_),__y.__ctz_);
};
public:typename conditional<expression,__bit_const_reference<__xcodeml_template_type_0_0>,__bit_reference<__xcodeml_template_type_0_0,expression> >::type operator[](typename __xcodeml_template_type_0_0::difference_type __n)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*operator+((*this),__n));
}
public:friend bool operator==(class __bit_iterator const&__x,class __bit_iterator const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(operator==(__x.__seg_,__y.__seg_)&&operator==(__x.__ctz_,__y.__ctz_));
};
public:friend bool operator!=(class __bit_iterator const&__x,class __bit_iterator const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator==(__x,__y));
};
public:friend bool operator<(class __bit_iterator const&__x,class __bit_iterator const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(operator<(__x.__seg_,__y.__seg_)||(operator==(__x.__seg_,__y.__seg_)&&operator<(__x.__ctz_,__y.__ctz_)));
};
public:friend bool operator>(class __bit_iterator const&__x,class __bit_iterator const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(__y,__x);
};
public:friend bool operator<=(class __bit_iterator const&__x,class __bit_iterator const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(__y,__x));
};
public:friend bool operator>=(class __bit_iterator const&__x,class __bit_iterator const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(__x,__y));
};
private:
private:__bit_iterator(typename conditional<expression,typename __xcodeml_template_type_0_0::__const_storage_pointer,typename __xcodeml_template_type_0_0::__storage_pointer>::type __s,unsigned int __ctz):__seg_(__s),__ctz_(__ctz)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:friend typename __xcodeml_template_type_0_0::__self;
public:friend __bit_reference<__xcodeml_template_type_0_0,expression>;
public:friend __bit_const_reference<__xcodeml_template_type_0_0>;
public:friend __bit_iterator<__xcodeml_template_type_0_0,1,expression>;
public:friend template<typename __xcodeml_template_type_1_0>class __bit_array;
;
public:friend template<typename __xcodeml_template_type_1_0>void __fill_n_false(__bit_iterator<__xcodeml_template_type_1_0,0,expression>__first,typename __xcodeml_template_type_1_0::size_type __n);
public:friend template<typename __xcodeml_template_type_1_0>void __fill_n_true(__bit_iterator<__xcodeml_template_type_1_0,0,expression>__first,typename __xcodeml_template_type_1_0::size_type __n);
public:friend template<typename __xcodeml_template_type_1_0,bool _IC>__bit_iterator<__xcodeml_template_type_1_0,0,expression>__copy_aligned(__bit_iterator<__xcodeml_template_type_1_0,expression,expression>__first,__bit_iterator<__xcodeml_template_type_1_0,expression,expression>__last,__bit_iterator<__xcodeml_template_type_1_0,0,expression>__result);
public:friend template<typename __xcodeml_template_type_1_0,bool _IC>__bit_iterator<__xcodeml_template_type_1_0,0,expression>__copy_unaligned(__bit_iterator<__xcodeml_template_type_1_0,expression,expression>__first,__bit_iterator<__xcodeml_template_type_1_0,expression,expression>__last,__bit_iterator<__xcodeml_template_type_1_0,0,expression>__result);
public:friend template<typename __xcodeml_template_type_1_0,bool _IC>__bit_iterator<__xcodeml_template_type_1_0,0,expression>copy(__bit_iterator<__xcodeml_template_type_1_0,expression,expression>__first,__bit_iterator<__xcodeml_template_type_1_0,expression,expression>__last,__bit_iterator<__xcodeml_template_type_1_0,0,expression>__result);
public:friend template<typename __xcodeml_template_type_1_0,bool _IC>__bit_iterator<__xcodeml_template_type_1_0,0,expression>__copy_backward_aligned(__bit_iterator<__xcodeml_template_type_1_0,expression,expression>__first,__bit_iterator<__xcodeml_template_type_1_0,expression,expression>__last,__bit_iterator<__xcodeml_template_type_1_0,0,expression>__result);
public:friend template<typename __xcodeml_template_type_1_0,bool _IC>__bit_iterator<__xcodeml_template_type_1_0,0,expression>__copy_backward_unaligned(__bit_iterator<__xcodeml_template_type_1_0,expression,expression>__first,__bit_iterator<__xcodeml_template_type_1_0,expression,expression>__last,__bit_iterator<__xcodeml_template_type_1_0,0,expression>__result);
public:friend template<typename __xcodeml_template_type_1_0,bool _IC>__bit_iterator<__xcodeml_template_type_1_0,0,expression>copy_backward(__bit_iterator<__xcodeml_template_type_1_0,expression,expression>__first,__bit_iterator<__xcodeml_template_type_1_0,expression,expression>__last,__bit_iterator<__xcodeml_template_type_1_0,0,expression>__result);
public:friend template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__bit_iterator<__xcodeml_template_type_1_1,0,expression>__swap_ranges_aligned(__bit_iterator<__xcodeml_template_type_1_0,0,expression>,__bit_iterator<__xcodeml_template_type_1_0,0,expression>,__bit_iterator<__xcodeml_template_type_1_1,0,expression>);
public:friend template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__bit_iterator<__xcodeml_template_type_1_1,0,expression>__swap_ranges_unaligned(__bit_iterator<__xcodeml_template_type_1_0,0,expression>,__bit_iterator<__xcodeml_template_type_1_0,0,expression>,__bit_iterator<__xcodeml_template_type_1_1,0,expression>);
public:friend template<typename __xcodeml_template_type_1_0,typename __xcodeml_template_type_1_1>__bit_iterator<__xcodeml_template_type_1_1,0,expression>swap_ranges(__bit_iterator<__xcodeml_template_type_1_0,0,expression>,__bit_iterator<__xcodeml_template_type_1_0,0,expression>,__bit_iterator<__xcodeml_template_type_1_1,0,expression>);
public:friend template<typename __xcodeml_template_type_1_0>__bit_iterator<__xcodeml_template_type_1_0,0,expression>rotate(__bit_iterator<__xcodeml_template_type_1_0,0,expression>,__bit_iterator<__xcodeml_template_type_1_0,0,expression>,__bit_iterator<__xcodeml_template_type_1_0,0,expression>);
public:friend template<typename __xcodeml_template_type_1_0,bool _IC1,bool _IC2>bool __equal_aligned(__bit_iterator<__xcodeml_template_type_1_0,expression,expression>,__bit_iterator<__xcodeml_template_type_1_0,expression,expression>,__bit_iterator<__xcodeml_template_type_1_0,expression,expression>);
public:friend template<typename __xcodeml_template_type_1_0,bool _IC1,bool _IC2>bool __equal_unaligned(__bit_iterator<__xcodeml_template_type_1_0,expression,expression>,__bit_iterator<__xcodeml_template_type_1_0,expression,expression>,__bit_iterator<__xcodeml_template_type_1_0,expression,expression>);
public:friend template<typename __xcodeml_template_type_1_0,bool _IC1,bool _IC2>bool equal(__bit_iterator<__xcodeml_template_type_1_0,expression,expression>,__bit_iterator<__xcodeml_template_type_1_0,expression,expression>,__bit_iterator<__xcodeml_template_type_1_0,expression,expression>);
public:friend template<typename __xcodeml_template_type_1_0,bool _IC>__bit_iterator<__xcodeml_template_type_1_0,expression,expression>__find_bool_true(__bit_iterator<__xcodeml_template_type_1_0,expression,expression>,typename __xcodeml_template_type_1_0::size_type);
public:friend template<typename __xcodeml_template_type_1_0,bool _IC>__bit_iterator<__xcodeml_template_type_1_0,expression,expression>__find_bool_false(__bit_iterator<__xcodeml_template_type_1_0,expression,expression>,typename __xcodeml_template_type_1_0::size_type);
public:friend template<typename __xcodeml_template_type_1_0,bool _IC>typename __bit_iterator<__xcodeml_template_type_1_0,expression,expression>::difference_type __count_bool_true(__bit_iterator<__xcodeml_template_type_1_0,expression,expression>,typename __xcodeml_template_type_1_0::size_type);
public:friend template<typename __xcodeml_template_type_1_0,bool _IC>typename __bit_iterator<__xcodeml_template_type_1_0,expression,expression>::difference_type __count_bool_false(__bit_iterator<__xcodeml_template_type_1_0,expression,expression>,typename __xcodeml_template_type_1_0::size_type);
}
;
;
}
}
namespace std{namespace __1{template<bool>class __split_buffer_common{protected:
protected:void __throw_length_error()const;
protected:void __throw_out_of_range()const;
}
;
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __split_buffer:private __split_buffer_common<1>{private:
private:__split_buffer(class __split_buffer const&);
private:class __split_buffer&operator=(class __split_buffer const&);
public:
public:typedef __xcodeml_template_type_0_0 value_type;
public:typedef __xcodeml_template_type_0_1 allocator_type;
public:typedef typename remove_reference<__xcodeml_template_type_0_1>::type __alloc_rr;
public:typedef allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>__alloc_traits;
public:typedef __xcodeml_template_type_0_0&reference;
public:typedef __xcodeml_template_type_0_0 const&const_reference;
public:typedef typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type size_type;
public:typedef typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::difference_type difference_type;
public:typedef typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer pointer;
public:typedef typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::const_pointer const_pointer;
public:typedef typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer iterator;
public:typedef typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::const_pointer const_iterator;
public:typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer __first_;
public:typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer __begin_;
public:typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer __end_;
public:__compressed_pair<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer,__xcodeml_template_type_0_1>__end_cap_;
public:typedef typename add_lvalue_reference<__xcodeml_template_type_0_1>::type __alloc_ref;
public:typedef typename add_lvalue_reference<__xcodeml_template_type_0_1>::type __alloc_const_ref;
public:typename remove_reference<__xcodeml_template_type_0_1>::type&__alloc()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__end_cap_.second());
}
public:typename remove_reference<__xcodeml_template_type_0_1>::type const&__alloc()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__end_cap_.second());
}
public:typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer&__end_cap()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__end_cap_.first());
}
public:typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer const&__end_cap()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__end_cap_.first());
}
public:__split_buffer();
public:__split_buffer(typename remove_reference<__xcodeml_template_type_0_1>::type&__a);
public:__split_buffer(typename remove_reference<__xcodeml_template_type_0_1>::type const&__a);
public:__split_buffer(typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type __cap,typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type __start,typename remove_reference<__xcodeml_template_type_0_1>::type&__a);
public:~__split_buffer();
public:__split_buffer(class __split_buffer&& __c);
public:__split_buffer(class __split_buffer&& __c,typename remove_reference<__xcodeml_template_type_0_1>::type const&__a);
public:class __split_buffer&operator=(class __split_buffer&& __c);
public:typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer begin()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__begin_;
}
public:typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::const_pointer begin()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__begin_;
}
public:typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer end()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__end_;
}
public:typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::const_pointer end()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__end_;
}
public:void clear()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__destruct_at_end(this->__begin_));
}
public:typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type size()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type>(operator-(this->__end_,this->__begin_));
}
public:bool empty()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==(this->__end_,this->__begin_);
}
public:typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type capacity()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type>(operator-((this->__end_cap()),this->__first_));
}
public:typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type __front_spare()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type>(operator-(this->__begin_,this->__first_));
}
public:typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type __back_spare()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type>(operator-((this->__end_cap()),this->__end_));
}
public:__xcodeml_template_type_0_0&front()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this->__begin_);
}
public:__xcodeml_template_type_0_0 const&front()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*this->__begin_);
}
public:__xcodeml_template_type_0_0&back()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*operator-(this->__end_,1));
}
public:__xcodeml_template_type_0_0 const&back()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(*operator-(this->__end_,1));
}
public:void reserve(typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type __n);
public:void shrink_to_fit();
public:void push_front(__xcodeml_template_type_0_0 const&__x);
public:void push_back(__xcodeml_template_type_0_0 const&__x);
public:void push_front(__xcodeml_template_type_0_0&& __x);
public:void push_back(__xcodeml_template_type_0_0&& __x);
public:template<typename...__xcodeml_template_type_1_0>void emplace_back(__xcodeml_template_type_1_0&& ...__args)
public:void pop_front()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__destruct_at_begin(operator+(this->__begin_,1)));
}
public:void pop_back()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__destruct_at_end(operator-(this->__end_,1)));
}
public:void __construct_at_end(typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type __n);
public:void __construct_at_end(typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type __n,__xcodeml_template_type_0_0 const&__x);
public:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,void>::type __construct_at_end(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last)
public:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,void>::type __construct_at_end(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last)
public:void __destruct_at_begin(typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer __new_begin)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__destruct_at_begin(__new_begin,__xcodeml_identity<is_trivially_destructible<__xcodeml_template_type_0_0> >::t()));
}
public:void __destruct_at_begin(typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer __new_begin,class::std::__1::integral_constant<bool,0>);
public:void __destruct_at_begin(typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer __new_begin,class::std::__1::integral_constant<bool,1>);
public:void __destruct_at_end(typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer __new_last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__destruct_at_end(__new_last,__xcodeml_identity<class::std::__1::integral_constant<bool,0> >::t()));
}
public:void __destruct_at_end(typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer __new_last,class::std::__1::integral_constant<bool,0>);
public:void __destruct_at_end(typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer __new_last,class::std::__1::integral_constant<bool,1>);
public:void swap(class __split_buffer&__x);
public:bool __invariants()const;
private:
private:void __move_assign_alloc(class __split_buffer&__c,class::std::__1::integral_constant<bool,1>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((this->__alloc())=(std::__1::move((__c.__alloc()))));
}
private:void __move_assign_alloc(class __split_buffer&,class::std::__1::integral_constant<bool,0>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
}
;
;
bool __split_buffer::__invariants()const{if(operator==(this->__first_,nullptr)){{if(operator!=(this->__begin_,nullptr)){return false;};
if(operator!=(this->__end_,nullptr)){return false;};
if(operator!=((this->__end_cap()),nullptr)){return false;};
};}else{{if(operator<(this->__begin_,this->__first_)){return false;};
if(operator<(this->__end_,this->__begin_)){return false;};
if(operator<((this->__end_cap()),this->__end_)){return false;};
};};
return true;
}
void __split_buffer::__construct_at_end(typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type __n){typename remove_reference<__xcodeml_template_type_0_1>::type&__a=(this.__alloc());
do{{(allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::.construct(__a,(std::__1::__to_raw_pointer(this.__end_))));
(++this.__end_);
(--__n);
};}while(operator>(__n,0));
}
void __split_buffer::__construct_at_end(typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type __n,__xcodeml_template_type_0_0 const&__x){typename remove_reference<__xcodeml_template_type_0_1>::type&__a=(this.__alloc());
do{{(allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::.construct(__a,(std::__1::__to_raw_pointer(this.__end_)),__x));
(++this.__end_);
(--__n);
};}while(operator>(__n,0));
}
template<typename __xcodeml_template_type_1_0>typename enable_if<expression,void>::type __split_buffer::__construct_at_end(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last){typename remove_reference<__xcodeml_template_type_0_1>::type&__a=(this.__alloc());
{;for(;operator!=(__first,__last);(++__first)){{if(operator==(this->__end_,(this->__end_cap()))){{typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type __old_cap=operator-((this->__end_cap()),this->__first_);
typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type __new_cap=(std::__1::max<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type>((2*__old_cap),8));
class __split_buffer __buf=__new_cap 0 __a;
{typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer __p=this->__begin_;for(;operator!=(__p,this->__end_);((++__p),(++__buf.__end_))){(allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::.construct((__buf.__alloc()),(std::__1::__to_raw_pointer(__buf.__end_)),(std::__1::move((*__p)))));}};
(this->swap(__buf));
};};
(allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::.construct(__a,(std::__1::__to_raw_pointer(this.__end_)),(*__first)));
(++this.__end_);
};}};
}
template<typename __xcodeml_template_type_1_0>typename enable_if<expression,void>::type __split_buffer::__construct_at_end(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last){typename remove_reference<__xcodeml_template_type_0_1>::type&__a=(this.__alloc());
{;for(;operator!=(__first,__last);(++__first)){{(allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::.construct(__a,(std::__1::__to_raw_pointer(this.__end_)),(*__first)));
(++this.__end_);
};}};
}
void __split_buffer::__destruct_at_begin(typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer __new_begin,class::std::__1::integral_constant<bool,0>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{while(operator!=(this->__begin_,__new_begin)){(allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::.destroy((this->__alloc()),(__to_raw_pointer((this->__begin_++)))));};
}
void __split_buffer::__destruct_at_begin(typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer __new_begin,class::std::__1::integral_constant<bool,1>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__begin_=__new_begin);
}
void __split_buffer::__destruct_at_end(typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer __new_last,class::std::__1::integral_constant<bool,0>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{while(operator!=(__new_last,this->__end_)){(allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::.destroy((this->__alloc()),(__to_raw_pointer((--this->__end_)))));};
}
void __split_buffer::__destruct_at_end(typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer __new_last,class::std::__1::integral_constant<bool,1>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__end_=__new_last);
}
__split_buffer::__split_buffer(typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type __cap,typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type __start,typename remove_reference<__xcodeml_template_type_0_1>::type&__a):__end_cap_(nullptr __a){(this->__first_=(operator!=(__cap,0)?(allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::.allocate((this->__alloc()),__cap)):nullptr));
(this->__begin_=(this->__end_=operator+(this->__first_,__start)));
((this->__end_cap())=operator+(this->__first_,__cap));
}
__split_buffer::__split_buffer():__first_(nullptr),__begin_(nullptr),__end_(nullptr),__end_cap_(nullptr)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
__split_buffer::__split_buffer(typename remove_reference<__xcodeml_template_type_0_1>::type&__a):__first_(nullptr),__begin_(nullptr),__end_(nullptr),__end_cap_(nullptr __a)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
__split_buffer::__split_buffer(typename remove_reference<__xcodeml_template_type_0_1>::type const&__a):__first_(nullptr),__begin_(nullptr),__end_(nullptr),__end_cap_(nullptr __a)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
__split_buffer::~__split_buffer(){(this->clear());
if(this->__first_){(allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::.deallocate((this->__alloc()),this->__first_,(this->capacity())));};
}
__split_buffer::__split_buffer(class __split_buffer&& __c):__first_((std::__1::move(__c.__first_))),__begin_((std::__1::move(__c.__begin_))),__end_((std::__1::move(__c.__end_))),__end_cap_((std::__1::move(__c.__end_cap_))){(__c.__first_=nullptr);
(__c.__begin_=nullptr);
(__c.__end_=nullptr);
((__c.__end_cap())=nullptr);
}
__split_buffer::__split_buffer(class __split_buffer&& __c,typename remove_reference<__xcodeml_template_type_0_1>::type const&__a):__end_cap_(__xcodeml_identity<class::std::__1::__second_tag>::t()__a){if(operator==(__a,(__c.__alloc()))){{(this->__first_=__c.__first_);
(this->__begin_=__c.__begin_);
(this->__end_=__c.__end_);
((this->__end_cap())=(__c.__end_cap()));
(__c.__first_=nullptr);
(__c.__begin_=nullptr);
(__c.__end_=nullptr);
((__c.__end_cap())=nullptr);
};}else{{typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type __cap=(__c.size());
(this->__first_=(allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::.allocate((this->__alloc()),__cap)));
(this->__begin_=(this->__end_=this->__first_));
((this->__end_cap())=operator+(this->__first_,__cap));
typedef move_iterator<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer>_Ip;
(this->__construct_at_end(__xcodeml_identity<move_iterator<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer> >::t((__c.begin())),__xcodeml_identity<move_iterator<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer> >::t((__c.end()))));
};};
}
class __split_buffer&__split_buffer::operator=(class __split_buffer&& __c){(this->clear());
(this->shrink_to_fit());
(this->__first_=__c.__first_);
(this->__begin_=__c.__begin_);
(this->__end_=__c.__end_);
((this->__end_cap())=(__c.__end_cap()));
(this->__move_assign_alloc(__c,__xcodeml_identity<integral_constant<bool,expression> >::t()));
(__c.__first_=(__c.__begin_=(__c.__end_=((__c.__end_cap())=nullptr))));
return(*this);
}
void __split_buffer::swap(class __split_buffer&__x){(std::__1::swap(this->__first_,__x.__first_));
(std::__1::swap(this->__begin_,__x.__begin_));
(std::__1::swap(this->__end_,__x.__end_));
(std::__1::swap((this->__end_cap()),(__x.__end_cap())));
(__swap_allocator((this->__alloc()),(__x.__alloc())));
}
void __split_buffer::reserve(typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type __n){if(operator<(__n,(this->capacity()))){{__split_buffer<__xcodeml_template_type_0_0,typename remove_reference<__xcodeml_template_type_0_1>::type&>__t=__n 0(this->__alloc());
(__t.__construct_at_end(__xcodeml_identity<move_iterator<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer> >::t(this->__begin_),__xcodeml_identity<move_iterator<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer> >::t(this->__end_)));
(std::__1::swap(this->__first_,__t.__first_));
(std::__1::swap(this->__begin_,__t.__begin_));
(std::__1::swap(this->__end_,__t.__end_));
(std::__1::swap((this->__end_cap()),(__t.__end_cap())));
};};
}
void __split_buffer::shrink_to_fit(){if(operator>((this->capacity()),(this->size()))){{try{__split_buffer<__xcodeml_template_type_0_0,typename remove_reference<__xcodeml_template_type_0_1>::type&>__t=(this->size())0(this->__alloc());
(__t.__construct_at_end(__xcodeml_identity<move_iterator<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer> >::t(this->__begin_),__xcodeml_identity<move_iterator<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer> >::t(this->__end_)));
(__t.__end_=operator+(__t.__begin_,operator-(this->__end_,this->__begin_)));
(std::__1::swap(this->__first_,__t.__first_));
(std::__1::swap(this->__begin_,__t.__begin_));
(std::__1::swap(this->__end_,__t.__end_));
(std::__1::swap((this->__end_cap()),(__t.__end_cap())));
}catch(...){}
;
};};
}
void __split_buffer::push_front(__xcodeml_template_type_0_0 const&__x){if(operator==(this->__begin_,this->__first_)){{if(operator<(this->__end_,(this->__end_cap()))){{typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::difference_type __d=operator-((this->__end_cap()),this->__end_);
(__d=(operator+(__d,1)/2));
(this->__begin_=(std::__1::move_backward(this->__begin_,this->__end_,operator+(this->__end_,__d))));
(this->__end_+=__d);
};}else{{typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type __c=(max<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type>((2*static_cast<unsigned long>(operator-((this->__end_cap()),this->__first_))),1));
__split_buffer<__xcodeml_template_type_0_0,typename remove_reference<__xcodeml_template_type_0_1>::type&>__t=__c(operator+(__c,3)/4)(this->__alloc());
(__t.__construct_at_end(__xcodeml_identity<move_iterator<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer> >::t(this->__begin_),__xcodeml_identity<move_iterator<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer> >::t(this->__end_)));
(std::__1::swap(this->__first_,__t.__first_));
(std::__1::swap(this->__begin_,__t.__begin_));
(std::__1::swap(this->__end_,__t.__end_));
(std::__1::swap((this->__end_cap()),(__t.__end_cap())));
};};
};};
(allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::.construct((this->__alloc()),(std::__1::__to_raw_pointer(operator-(this->__begin_,1))),__x));
(--this->__begin_);
}
void __split_buffer::push_front(__xcodeml_template_type_0_0&& __x){if(operator==(this->__begin_,this->__first_)){{if(operator<(this->__end_,(this->__end_cap()))){{typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::difference_type __d=operator-((this->__end_cap()),this->__end_);
(__d=(operator+(__d,1)/2));
(this->__begin_=(std::__1::move_backward(this->__begin_,this->__end_,operator+(this->__end_,__d))));
(this->__end_+=__d);
};}else{{typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type __c=(max<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type>((2*static_cast<unsigned long>(operator-((this->__end_cap()),this->__first_))),1));
__split_buffer<__xcodeml_template_type_0_0,typename remove_reference<__xcodeml_template_type_0_1>::type&>__t=__c(operator+(__c,3)/4)(this->__alloc());
(__t.__construct_at_end(__xcodeml_identity<move_iterator<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer> >::t(this->__begin_),__xcodeml_identity<move_iterator<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer> >::t(this->__end_)));
(std::__1::swap(this->__first_,__t.__first_));
(std::__1::swap(this->__begin_,__t.__begin_));
(std::__1::swap(this->__end_,__t.__end_));
(std::__1::swap((this->__end_cap()),(__t.__end_cap())));
};};
};};
(allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::.construct((this->__alloc()),(std::__1::__to_raw_pointer(operator-(this->__begin_,1))),(std::__1::move(__x))));
(--this->__begin_);
}
void __split_buffer::push_back(__xcodeml_template_type_0_0 const&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator==(this->__end_,(this->__end_cap()))){{if(operator>(this->__begin_,this->__first_)){{typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::difference_type __d=operator-(this->__begin_,this->__first_);
(__d=(operator+(__d,1)/2));
(this->__end_=(std::__1::move(this->__begin_,this->__end_,operator-(this->__begin_,__d))));
(this->__begin_-=__d);
};}else{{typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type __c=(max<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type>((2*static_cast<unsigned long>(operator-((this->__end_cap()),this->__first_))),1));
__split_buffer<__xcodeml_template_type_0_0,typename remove_reference<__xcodeml_template_type_0_1>::type&>__t=__c(__c/4)(this->__alloc());
(__t.__construct_at_end(__xcodeml_identity<move_iterator<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer> >::t(this->__begin_),__xcodeml_identity<move_iterator<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer> >::t(this->__end_)));
(std::__1::swap(this->__first_,__t.__first_));
(std::__1::swap(this->__begin_,__t.__begin_));
(std::__1::swap(this->__end_,__t.__end_));
(std::__1::swap((this->__end_cap()),(__t.__end_cap())));
};};
};};
(allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::.construct((this->__alloc()),(std::__1::__to_raw_pointer(this->__end_)),__x));
(++this->__end_);
}
void __split_buffer::push_back(__xcodeml_template_type_0_0&& __x){if(operator==(this->__end_,(this->__end_cap()))){{if(operator>(this->__begin_,this->__first_)){{typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::difference_type __d=operator-(this->__begin_,this->__first_);
(__d=(operator+(__d,1)/2));
(this->__end_=(std::__1::move(this->__begin_,this->__end_,operator-(this->__begin_,__d))));
(this->__begin_-=__d);
};}else{{typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type __c=(max<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type>((2*static_cast<unsigned long>(operator-((this->__end_cap()),this->__first_))),1));
__split_buffer<__xcodeml_template_type_0_0,typename remove_reference<__xcodeml_template_type_0_1>::type&>__t=__c(__c/4)(this->__alloc());
(__t.__construct_at_end(__xcodeml_identity<move_iterator<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer> >::t(this->__begin_),__xcodeml_identity<move_iterator<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer> >::t(this->__end_)));
(std::__1::swap(this->__first_,__t.__first_));
(std::__1::swap(this->__begin_,__t.__begin_));
(std::__1::swap(this->__end_,__t.__end_));
(std::__1::swap((this->__end_cap()),(__t.__end_cap())));
};};
};};
(allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::.construct((this->__alloc()),(std::__1::__to_raw_pointer(this->__end_)),(std::__1::move(__x))));
(++this->__end_);
}
template<typename...__xcodeml_template_type_1_0>void __split_buffer::emplace_back(__xcodeml_template_type_1_0&& ...__args){if(operator==(this->__end_,(this->__end_cap()))){{if(operator>(this->__begin_,this->__first_)){{typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::difference_type __d=operator-(this->__begin_,this->__first_);
(__d=(operator+(__d,1)/2));
(this->__end_=(std::__1::move(this->__begin_,this->__end_,operator-(this->__begin_,__d))));
(this->__begin_-=__d);
};}else{{typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type __c=(max<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::size_type>((2*static_cast<unsigned long>(operator-((this->__end_cap()),this->__first_))),1));
__split_buffer<__xcodeml_template_type_0_0,typename remove_reference<__xcodeml_template_type_0_1>::type&>__t=__c(__c/4)(this->__alloc());
(__t.__construct_at_end(__xcodeml_identity<move_iterator<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer> >::t(this->__begin_),__xcodeml_identity<move_iterator<typename allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::pointer> >::t(this->__end_)));
(std::__1::swap(this->__first_,__t.__first_));
(std::__1::swap(this->__begin_,__t.__begin_));
(std::__1::swap(this->__end_,__t.__end_));
(std::__1::swap((this->__end_cap()),(__t.__end_cap())));
};};
};};
(allocator_traits<typename remove_reference<__xcodeml_template_type_0_1>::type>::.construct((this->__alloc()),(std::__1::__to_raw_pointer(this->__end_)),(std::__1::forward<__xcodeml_template_type_1_0...>(__args))...));
(++this->__end_);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void swap(__split_buffer<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&__x,__split_buffer<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__x.swap(__y));
}
}
}
namespace std{namespace __1{template<bool>class __vector_base_common{protected:
protected:__vector_base_common()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
protected:void __throw_length_error()const;
protected:void __throw_out_of_range()const;
}
;
;
void __vector_base_common::__throw_length_error()const/*gccattr noreturn:*/{(std::__1::__throw_length_error("vector"));
}
void __vector_base_common::__throw_out_of_range()const/*gccattr noreturn:*/{(std::__1::__throw_out_of_range("vector"));
}
template<>class __vector_base_common<1>{}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class __vector_base:protected __vector_base_common<1>{public:
public:typedef __xcodeml_template_type_0_1 allocator_type;
public:typedef allocator_traits<__xcodeml_template_type_0_1>__alloc_traits;
public:typedef typename allocator_traits<__xcodeml_template_type_0_1>::size_type size_type;
protected:
protected:typedef __xcodeml_template_type_0_0 value_type;
protected:typedef __xcodeml_template_type_0_0&reference;
protected:typedef __xcodeml_template_type_0_0 const&const_reference;
protected:typedef typename allocator_traits<__xcodeml_template_type_0_1>::difference_type difference_type;
protected:typedef typename allocator_traits<__xcodeml_template_type_0_1>::pointer pointer;
protected:typedef typename allocator_traits<__xcodeml_template_type_0_1>::const_pointer const_pointer;
protected:typedef typename allocator_traits<__xcodeml_template_type_0_1>::pointer iterator;
protected:typedef typename allocator_traits<__xcodeml_template_type_0_1>::const_pointer const_iterator;
protected:typename allocator_traits<__xcodeml_template_type_0_1>::pointer __begin_;
protected:typename allocator_traits<__xcodeml_template_type_0_1>::pointer __end_;
protected:__compressed_pair<typename allocator_traits<__xcodeml_template_type_0_1>::pointer,__xcodeml_template_type_0_1>__end_cap_;
protected:__xcodeml_template_type_0_1&__alloc()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__end_cap_.second());
}
protected:__xcodeml_template_type_0_1 const&__alloc()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__end_cap_.second());
}
protected:typename allocator_traits<__xcodeml_template_type_0_1>::pointer&__end_cap()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__end_cap_.first());
}
protected:typename allocator_traits<__xcodeml_template_type_0_1>::pointer const&__end_cap()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__end_cap_.first());
}
protected:__vector_base();
protected:__vector_base(__xcodeml_template_type_0_1 const&__a);
protected:__vector_base(__xcodeml_template_type_0_1&& __a);
protected:~__vector_base();
protected:void clear()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__destruct_at_end(this->__begin_));
}
protected:typename allocator_traits<__xcodeml_template_type_0_1>::size_type capacity()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<typename allocator_traits<__xcodeml_template_type_0_1>::size_type>(operator-((this->__end_cap()),this->__begin_));
}
protected:void __destruct_at_end(typename allocator_traits<__xcodeml_template_type_0_1>::pointer __new_last);
protected:void __copy_assign_alloc(class __vector_base const&__c)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__copy_assign_alloc(__c,__xcodeml_identity<integral_constant<bool,expression> >::t()));
}
protected:void __move_assign_alloc(class __vector_base&__c)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__move_assign_alloc(__c,__xcodeml_identity<integral_constant<bool,expression> >::t()));
}
private:
private:void __copy_assign_alloc(class __vector_base const&__c,class::std::__1::integral_constant<bool,1>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator!=((this->__alloc()),(__c.__alloc()))){{(this->clear());
(allocator_traits<__xcodeml_template_type_0_1>::.deallocate((this->__alloc()),this->__begin_,(this->capacity())));
(this->__begin_=(this->__end_=((this->__end_cap())=nullptr)));
};};
((this->__alloc())=(__c.__alloc()));
}
private:void __copy_assign_alloc(class __vector_base const&,class::std::__1::integral_constant<bool,0>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
private:void __move_assign_alloc(class __vector_base&__c,class::std::__1::integral_constant<bool,1>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((this->__alloc())=(std::__1::move((__c.__alloc()))));
}
private:void __move_assign_alloc(class __vector_base&,class::std::__1::integral_constant<bool,0>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
}
;
;
void __vector_base::__destruct_at_end(typename allocator_traits<__xcodeml_template_type_0_1>::pointer __new_last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typename allocator_traits<__xcodeml_template_type_0_1>::pointer __soon_to_be_end=this->__end_;
while(operator!=(__new_last,__soon_to_be_end)){(allocator_traits<__xcodeml_template_type_0_1>::.destroy((this->__alloc()),(std::__1::__to_raw_pointer((--__soon_to_be_end)))));};
(this->__end_=__new_last);
}
__vector_base::__vector_base():__begin_(nullptr),__end_(nullptr),__end_cap_(nullptr)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
__vector_base::__vector_base(__xcodeml_template_type_0_1 const&__a):__begin_(nullptr),__end_(nullptr),__end_cap_(nullptr __a)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
__vector_base::__vector_base(__xcodeml_template_type_0_1&& __a):__begin_(nullptr),__end_(nullptr),__end_cap_(nullptr(std::move(__a)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
__vector_base::~__vector_base(){if(operator!=(this->__begin_,nullptr)){{(this->clear());
(allocator_traits<__xcodeml_template_type_0_1>::.deallocate((this->__alloc()),this->__begin_,(this->capacity())));
};};
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>class vector:private __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>{private:
private:typedef __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>__base;
private:typedef allocator<__xcodeml_template_type_0_0>__default_allocator_type;
public:
public:typedef class vector __self;
public:typedef __xcodeml_template_type_0_0 value_type;
public:typedef __xcodeml_template_type_0_1 allocator_type;
public:typedef typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::__alloc_traits __alloc_traits;
public:typedef typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::reference reference;
public:typedef typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_reference const_reference;
public:typedef typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type size_type;
public:typedef typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::difference_type difference_type;
public:typedef typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer pointer;
public:typedef typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer const_pointer;
public:typedef __wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>iterator;
public:typedef __wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>const_iterator;
public:typedef reverse_iterator<__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer> >reverse_iterator;
public:typedef reverse_iterator<__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer> >const_reverse_iterator;

/* Ignored a member with no access specifier static_assert(is_same<typename __xcodeml_template_type_0_1::value_type,__xcodeml_template_type_0_0>::value,"Allocator::value_type must be same type as value_type");*/

public:vector()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:vector(__xcodeml_template_type_0_1 const&__a):(__a)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:vector(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n);
public:vector(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n,__xcodeml_template_type_0_0 const&__x);
public:vector(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n,__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_1 const&__a);
public:template<typename __xcodeml_template_type_1_0>vector(__xcodeml_template_type_1_0 __first,typename enable_if<expression,__xcodeml_template_type_1_0>::type __last)
public:template<typename __xcodeml_template_type_1_0>vector(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last,__xcodeml_template_type_0_1 const&__a,typename enable_if<expression,void>::type(*))
public:template<typename __xcodeml_template_type_1_0>vector(__xcodeml_template_type_1_0 __first,typename enable_if<expression,__xcodeml_template_type_1_0>::type __last)
public:template<typename __xcodeml_template_type_1_0>vector(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last,__xcodeml_template_type_0_1 const&__a,typename enable_if<expression,void>::type(*))
public:~vector()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__annotate_delete());
}
public:vector(class vector const&__x);
public:vector(class vector const&__x,__xcodeml_template_type_0_1 const&__a);
public:class vector&operator=(class vector const&__x);
public:vector(initializer_list<__xcodeml_template_type_0_0>__il);
public:vector(initializer_list<__xcodeml_template_type_0_0>__il,__xcodeml_template_type_0_1 const&__a);
public:vector(class vector&& __x);
public:vector(class vector&& __x,__xcodeml_template_type_0_1 const&__a);
public:class vector&operator=(class vector&& __x);
public:class vector&operator=(initializer_list<__xcodeml_template_type_0_0>__il)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->assign((__il.begin()),(__il.end())));
return(*this);
}
public:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,void>::type assign(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last)
public:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,void>::type assign(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last)
public:void assign(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_reference __u);
public:void assign(initializer_list<__xcodeml_template_type_0_0>__il)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->assign((__il.begin()),(__il.end())));
}
public:__xcodeml_template_type_0_1 get_allocator()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this.__alloc());
}
public:__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>begin();
public:__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>begin()const;
public:__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>end();
public:__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>end()const;
public:reverse_iterator<__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer> >rbegin()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<reverse_iterator<__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer> > >::t((this->end()));
}
public:reverse_iterator<__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer> >rbegin()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<reverse_iterator<__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer> > >::t((this->end()));
}
public:reverse_iterator<__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer> >rend()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<reverse_iterator<__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer> > >::t((this->begin()));
}
public:reverse_iterator<__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer> >rend()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<reverse_iterator<__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer> > >::t((this->begin()));
}
public:__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>cbegin()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->begin());
}
public:__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>cend()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->end());
}
public:reverse_iterator<__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer> >crbegin()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->rbegin());
}
public:reverse_iterator<__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer> >crend()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->rend());
}
public:typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type size()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return static_cast<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type>(operator-(this.__end_,this.__begin_));
}
public:typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type capacity()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::.capacity());
}
public:bool empty()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==(this.__begin_,this.__end_);
}
public:typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type max_size()const;
public:void reserve(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n);
public:void shrink_to_fit();
public:typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::reference operator[](typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n);
public:typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_reference operator[](typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n)const;
public:typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::reference at(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n);
public:typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_reference at(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n)const;
public:typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::reference front()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((void)0);
return(*this.__begin_);
}
public:typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_reference front()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((void)0);
return(*this.__begin_);
}
public:typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::reference back()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((void)0);
return(*operator-(this.__end_,1));
}
public:typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_reference back()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((void)0);
return(*operator-(this.__end_,1));
}
public:__xcodeml_template_type_0_0(*data())/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::__to_raw_pointer(this.__begin_));
}
public:__xcodeml_template_type_0_0 const(*data()const)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::__to_raw_pointer(this.__begin_));
}
public:template<typename __xcodeml_template_type_1_0>void __emplace_back(__xcodeml_template_type_1_0&& __arg)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->emplace_back((std::__1::forward<__xcodeml_template_type_1_0>(__arg))));
}
public:void push_back(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_reference __x);
public:void push_back(__xcodeml_template_type_0_0&& __x);
public:template<typename...__xcodeml_template_type_1_0>void emplace_back(__xcodeml_template_type_1_0&& ...__args)
public:void pop_back();
public:__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>insert(__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>__position,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_reference __x);
public:__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>insert(__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>__position,__xcodeml_template_type_0_0&& __x);
public:template<typename...__xcodeml_template_type_1_0>__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>emplace(__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>__position,__xcodeml_template_type_1_0&& ...__args)
public:__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>insert(__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>__position,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_reference __x);
public:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer> >::type insert(__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>__position,__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last)
public:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer> >::type insert(__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>__position,__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last)
public:__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>insert(__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>__position,initializer_list<__xcodeml_template_type_0_0>__il)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->insert(__position,(__il.begin()),(__il.end())));
}
public:__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>erase(__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>__position);
public:__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>erase(__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>__first,__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>__last);
public:void clear()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __old_size=(this->size());
(__vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::.clear());
(this->__annotate_shrink(__old_size));
(this->__invalidate_all_iterators());
}
public:void resize(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __sz);
public:void resize(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __sz,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_reference __x);
public:void swap(class vector&);
public:bool __invariants()const;
private:
private:void __invalidate_all_iterators();
private:void __invalidate_iterators_past(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __new_last);
private:void __vallocate(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n);
private:void __vdeallocate();
private:typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __recommend(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __new_size)const;
private:void __construct_at_end(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n);
private:void __construct_at_end(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_reference __x);
private:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,void>::type __construct_at_end(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n)
private:void __append(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n);
private:void __append(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_reference __x);
private:__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>__make_iter(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __p);
private:__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>__make_iter(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer __p)const;
private:void __swap_out_circular_buffer(__split_buffer<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1&>&__v);
private:typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __swap_out_circular_buffer(__split_buffer<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1&>&__v,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __p);
private:void __move_range(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __from_s,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __from_e,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __to);
private:void __move_assign(class vector&__c,class::std::__1::integral_constant<bool,1>);
private:void __move_assign(class vector&__c,class::std::__1::integral_constant<bool,0>);
private:void __destruct_at_end(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __new_last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__invalidate_iterators_past(__new_last));
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __old_size=(this->size());
(__vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::.__destruct_at_end(__new_last));
(this->__annotate_shrink(__old_size));
}
private:template<typename __xcodeml_template_type_1_0>void __push_back_slow_path(__xcodeml_template_type_1_0&& __x)
private:template<typename...__xcodeml_template_type_1_0>void __emplace_back_slow_path(__xcodeml_template_type_1_0&& ...__args)
private:void __annotate_contiguous_container(void const(*),void const(*),void const(*),void const(*))const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
private:void __annotate_new(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __current_size)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__annotate_contiguous_container((this->data()),operator+((this->data()),(this->capacity())),operator+((this->data()),(this->capacity())),operator+((this->data()),__current_size)));
}
private:void __annotate_delete()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__annotate_contiguous_container((this->data()),operator+((this->data()),(this->capacity())),operator+((this->data()),(this->size())),operator+((this->data()),(this->capacity()))));
}
private:void __annotate_increase(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__annotate_contiguous_container((this->data()),operator+((this->data()),(this->capacity())),operator+((this->data()),(this->size())),operator+(operator+((this->data()),(this->size())),__n)));
}
private:void __annotate_shrink(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __old_size)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__annotate_contiguous_container((this->data()),operator+((this->data()),(this->capacity())),operator+((this->data()),__old_size),operator+((this->data()),(this->size()))));
}
private:class __RAII_IncreaseAnnotator{public:__RAII_IncreaseAnnotator(class vector const&,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
public:void __done()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
}
;
}
;
;
void vector::__swap_out_circular_buffer(__split_buffer<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1&>&__v){(this->__annotate_delete());
(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::__alloc_traits::.__construct_backward((this.__alloc()),this.__begin_,this.__end_,__v.__begin_));
(std::__1::swap(this.__begin_,__v.__begin_));
(std::__1::swap(this.__end_,__v.__end_));
(std::__1::swap((this.__end_cap()),(__v.__end_cap())));
(__v.__first_=__v.__begin_);
(this->__annotate_new((this->size())));
(this->__invalidate_all_iterators());
}
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer vector::__swap_out_circular_buffer(__split_buffer<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1&>&__v,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __p){(this->__annotate_delete());
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __r=__v.__begin_;
(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::__alloc_traits::.__construct_backward((this.__alloc()),this.__begin_,__p,__v.__begin_));
(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::__alloc_traits::.__construct_forward((this.__alloc()),__p,this.__end_,__v.__end_));
(std::__1::swap(this.__begin_,__v.__begin_));
(std::__1::swap(this.__end_,__v.__end_));
(std::__1::swap((this.__end_cap()),(__v.__end_cap())));
(__v.__first_=__v.__begin_);
(this->__annotate_new((this->size())));
(this->__invalidate_all_iterators());
return __r;
}
void vector::__vallocate(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n){if(operator>(__n,(this->max_size()))){(this.__throw_length_error());};
(this.__begin_=(this.__end_=(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::__alloc_traits::.allocate((this.__alloc()),__n))));
((this.__end_cap())=operator+(this.__begin_,__n));
(this->__annotate_new(0));
}
void vector::__vdeallocate(){if(operator!=(this.__begin_,nullptr)){{(this->clear());
(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::__alloc_traits::.deallocate((this.__alloc()),this.__begin_,(this->capacity())));
(this.__begin_=(this.__end_=((this.__end_cap())=nullptr)));
};};
}
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type vector::max_size()const{return(std::__1::min<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type>((typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::__alloc_traits::.max_size((this.__alloc()))),(numeric_limits<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::difference_type>::.max())));
}
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type vector::__recommend(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __new_size)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type const __ms=(this->max_size());
if(operator>(__new_size,__ms)){(this.__throw_length_error());};
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type const __cap=(this->capacity());
if(operator>=(__cap,(__ms/2))){return __ms;};
return(std::__1::max<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type>((2*__cap),__new_size));
}
void vector::__construct_at_end(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n){__xcodeml_template_type_0_1&__a=(this.__alloc());
do{{class::std::__1::vector::__RAII_IncreaseAnnotator __annotator=(*this);
(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::__alloc_traits::.construct(__a,(std::__1::__to_raw_pointer(this.__end_))));
(++this.__end_);
(--__n);
(__annotator.__done());
};}while(operator>(__n,0));
}
void vector::__construct_at_end(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_reference __x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{__xcodeml_template_type_0_1&__a=(this.__alloc());
do{{class::std::__1::vector::__RAII_IncreaseAnnotator __annotator=(*this);
(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::__alloc_traits::.construct(__a,(std::__1::__to_raw_pointer(this.__end_)),__x));
(++this.__end_);
(--__n);
(__annotator.__done());
};}while(operator>(__n,0));
}
template<typename __xcodeml_template_type_1_0>typename enable_if<expression,void>::type vector::__construct_at_end(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n){__xcodeml_template_type_0_1&__a=(this.__alloc());
class::std::__1::vector::__RAII_IncreaseAnnotator __annotator=(*this)__n;
(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::__alloc_traits::.__construct_range_forward(__a,__first,__last,this.__end_));
(__annotator.__done());
}
void vector::__append(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n){if(operator>=(static_cast<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type>(operator-((this.__end_cap()),this.__end_)),__n)){(this.__construct_at_end(__n));}else{{__xcodeml_template_type_0_1&__a=(this.__alloc());
__split_buffer<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1&>__v=(this->__recommend(operator+((this->size()),__n)))(this->size())__a;
(__v.__construct_at_end(__n));
(this->__swap_out_circular_buffer(__v));
};};
}
void vector::__append(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_reference __x){if(operator>=(static_cast<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type>(operator-((this.__end_cap()),this.__end_)),__n)){(this.__construct_at_end(__n,__x));}else{{__xcodeml_template_type_0_1&__a=(this.__alloc());
__split_buffer<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1&>__v=(this->__recommend(operator+((this->size()),__n)))(this->size())__a;
(__v.__construct_at_end(__n,__x));
(this->__swap_out_circular_buffer(__v));
};};
}
vector::vector(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n){if(operator>(__n,0)){{(this->__vallocate(__n));
(this->__construct_at_end(__n));
};};
}
vector::vector(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n,__xcodeml_template_type_0_0 const&__x){if(operator>(__n,0)){{(this->__vallocate(__n));
(this->__construct_at_end(__n,__x));
};};
}
vector::vector(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n,__xcodeml_template_type_0_0 const&__x,__xcodeml_template_type_0_1 const&__a):(__a){if(operator>(__n,0)){{(this->__vallocate(__n));
(this->__construct_at_end(__n,__x));
};};
}
template<typename __xcodeml_template_type_1_0>vector::vector(__xcodeml_template_type_1_0 __first,typename enable_if<expression,__xcodeml_template_type_1_0>::type __last){{;for(;operator!=(__first,__last);(++__first)){(this->__emplace_back((*__first)));}};
}
template<typename __xcodeml_template_type_1_0>vector::vector(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last,__xcodeml_template_type_0_1 const&__a,typename enable_if<expression,void>::type(*)):(__a){{;for(;operator!=(__first,__last);(++__first)){(this->__emplace_back((*__first)));}};
}
template<typename __xcodeml_template_type_1_0>vector::vector(__xcodeml_template_type_1_0 __first,typename enable_if<expression,__xcodeml_template_type_1_0>::type __last){typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n=static_cast<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type>((std::__1::distance(__first,__last)));
if(operator>(__n,0)){{(this->__vallocate(__n));
(this->__construct_at_end(__first,__last,__n));
};};
}
template<typename __xcodeml_template_type_1_0>vector::vector(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last,__xcodeml_template_type_0_1 const&__a,typename enable_if<expression,void>::type(*)):(__a){typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n=static_cast<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type>((std::__1::distance(__first,__last)));
if(operator>(__n,0)){{(this->__vallocate(__n));
(this->__construct_at_end(__first,__last,__n));
};};
}
vector::vector(class vector const&__x):((typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::__alloc_traits::.select_on_container_copy_construction((__x.__alloc())))){typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n=(__x.size());
if(operator>(__n,0)){{(this->__vallocate(__n));
(this->__construct_at_end(__x.__begin_,__x.__end_,__n));
};};
}
vector::vector(class vector const&__x,__xcodeml_template_type_0_1 const&__a):(__a){typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n=(__x.size());
if(operator>(__n,0)){{(this->__vallocate(__n));
(this->__construct_at_end(__x.__begin_,__x.__end_,__n));
};};
}
vector::vector(class vector&& __x):((std::__1::move((__x.__alloc()))))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this.__begin_=__x.__begin_);
(this.__end_=__x.__end_);
((this.__end_cap())=(__x.__end_cap()));
(__x.__begin_=(__x.__end_=((__x.__end_cap())=nullptr)));
}
vector::vector(class vector&& __x,__xcodeml_template_type_0_1 const&__a):(__a)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator==(__a,(__x.__alloc()))){{(this.__begin_=__x.__begin_);
(this.__end_=__x.__end_);
((this.__end_cap())=(__x.__end_cap()));
(__x.__begin_=(__x.__end_=((__x.__end_cap())=nullptr)));
};}else{{typedef move_iterator<__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer> >_Ip;
(this->assign(__xcodeml_identity<move_iterator<__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer> > >::t((__x.begin())),__xcodeml_identity<move_iterator<__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer> > >::t((__x.end()))));
};};
}
vector::vector(initializer_list<__xcodeml_template_type_0_0>__il)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator>((__il.size()),0)){{(this->__vallocate((__il.size())));
(this->__construct_at_end((__il.begin()),(__il.end()),(__il.size())));
};};
}
vector::vector(initializer_list<__xcodeml_template_type_0_0>__il,__xcodeml_template_type_0_1 const&__a):(__a)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator>((__il.size()),0)){{(this->__vallocate((__il.size())));
(this->__construct_at_end((__il.begin()),(__il.end()),(__il.size())));
};};
}
class vector&vector::operator=(class vector&& __x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__move_assign(__x,__xcodeml_identity<integral_constant<bool,expression> >::t()));
return(*this);
}
void vector::__move_assign(class vector&__c,class::std::__1::integral_constant<bool,0>){if(operator!=((__vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::.__alloc()),(__c.__alloc()))){{typedef move_iterator<__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer> >_Ip;
(this->assign(__xcodeml_identity<move_iterator<__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer> > >::t((__c.begin())),__xcodeml_identity<move_iterator<__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer> > >::t((__c.end()))));
};}else{(this->__move_assign(__c,__xcodeml_identity<class::std::__1::integral_constant<bool,1> >::t()));};
}
void vector::__move_assign(class vector&__c,class::std::__1::integral_constant<bool,1>){(this->__vdeallocate());
(__vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::.__move_assign_alloc(__c));
(this.__begin_=__c.__begin_);
(this.__end_=__c.__end_);
((this.__end_cap())=(__c.__end_cap()));
(__c.__begin_=(__c.__end_=((__c.__end_cap())=nullptr)));
}
class vector&vector::operator=(class vector const&__x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator!=(this,(&__x))){{(__vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::.__copy_assign_alloc(__x));
(this->assign(__x.__begin_,__x.__end_));
};};
return(*this);
}
template<typename __xcodeml_template_type_1_0>typename enable_if<expression,void>::type vector::assign(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last){(this->clear());
{;for(;operator!=(__first,__last);(++__first)){(this->__emplace_back((*__first)));}};
}
template<typename __xcodeml_template_type_1_0>typename enable_if<expression,void>::type vector::assign(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last){typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __new_size=static_cast<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type>((std::__1::distance(__first,__last)));
if(operator<=(__new_size,(this->capacity()))){{__xcodeml_template_type_1_0 __mid=__last;
bool __growing=false;
if(operator>(__new_size,(this->size()))){{(__growing=true);
(__mid=__first);
(std::__1::advance(__mid,(this->size())));
};};
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __m=(std::__1::copy(__first,__mid,this.__begin_));
if(__growing){(this->__construct_at_end(__mid,__last,operator-(__new_size,(this->size()))));}else{(this.__destruct_at_end(__m));};
};}else{{(this->__vdeallocate());
(this->__vallocate((this->__recommend(__new_size))));
(this->__construct_at_end(__first,__last,__new_size));
};};
(this->__invalidate_all_iterators());
}
void vector::assign(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_reference __u){if(operator<=(__n,(this->capacity()))){{typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __s=(this->size());
(std::__1::fill_n(this.__begin_,(std::__1::min(__n,__s)),__u));
if(operator>(__n,__s)){(this->__construct_at_end(operator-(__n,__s),__u));}else{(this.__destruct_at_end(operator+(this.__begin_,__n)));};
};}else{{(this->__vdeallocate());
(this->__vallocate((this->__recommend(static_cast<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type>(__n)))));
(this->__construct_at_end(__n,__u));
};};
(this->__invalidate_all_iterators());
}
__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>vector::__make_iter(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer> >::t(__p);
}
__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>vector::__make_iter(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer __p)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer> >::t(__p);
}
__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>vector::begin()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__make_iter(this.__begin_));
}
__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>vector::begin()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__make_iter(this.__begin_));
}
__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>vector::end()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__make_iter(this.__end_));
}
__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>vector::end()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__make_iter(this.__end_));
}
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::reference vector::operator[](typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((void)0);
return(this.__begin_)[__n];
}
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_reference vector::operator[](typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((void)0);
return(this.__begin_)[__n];
}
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::reference vector::at(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n){if(operator>=(__n,(this->size()))){(this.__throw_out_of_range());};
return(this.__begin_)[__n];
}
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_reference vector::at(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n)const{if(operator>=(__n,(this->size()))){(this.__throw_out_of_range());};
return(this.__begin_)[__n];
}
void vector::reserve(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n){if(operator>(__n,(this->capacity()))){{__xcodeml_template_type_0_1&__a=(this.__alloc());
__split_buffer<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1&>__v=__n(this->size())__a;
(this->__swap_out_circular_buffer(__v));
};};
}
void vector::shrink_to_fit(){if(operator>((this->capacity()),(this->size()))){{try{__xcodeml_template_type_0_1&__a=(this.__alloc());
__split_buffer<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1&>__v=(this->size())(this->size())__a;
(this->__swap_out_circular_buffer(__v));
}catch(...){}
;
};};
}
template<typename __xcodeml_template_type_1_0>void vector::__push_back_slow_path(__xcodeml_template_type_1_0&& __x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{__xcodeml_template_type_0_1&__a=(this.__alloc());
__split_buffer<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1&>__v=(this->__recommend(operator+((this->size()),1)))(this->size())__a;
(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::__alloc_traits::.construct(__a,(std::__1::__to_raw_pointer(__v.__end_)),(std::__1::forward<__xcodeml_template_type_1_0>(__x))));
(__v.__end_++);
(this->__swap_out_circular_buffer(__v));
}
void vector::push_back(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_reference __x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator!=(this.__end_,(this.__end_cap()))){{class::std::__1::vector::__RAII_IncreaseAnnotator __annotator=(*this);
(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::__alloc_traits::.construct((this.__alloc()),(std::__1::__to_raw_pointer(this.__end_)),__x));
(__annotator.__done());
(++this.__end_);
};}else{(this->__push_back_slow_path(__x));};
}
void vector::push_back(__xcodeml_template_type_0_0&& __x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator<(this.__end_,(this.__end_cap()))){{class::std::__1::vector::__RAII_IncreaseAnnotator __annotator=(*this);
(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::__alloc_traits::.construct((this.__alloc()),(std::__1::__to_raw_pointer(this.__end_)),(std::__1::move(__x))));
(__annotator.__done());
(++this.__end_);
};}else{(this->__push_back_slow_path((std::__1::move(__x))));};
}
template<typename...__xcodeml_template_type_1_0>void vector::__emplace_back_slow_path(__xcodeml_template_type_1_0&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{__xcodeml_template_type_0_1&__a=(this.__alloc());
__split_buffer<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1&>__v=(this->__recommend(operator+((this->size()),1)))(this->size())__a;
(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::__alloc_traits::.construct(__a,(std::__1::__to_raw_pointer(__v.__end_)),(std::__1::forward<__xcodeml_template_type_1_0...>(__args))...));
(__v.__end_++);
(this->__swap_out_circular_buffer(__v));
}
template<typename...__xcodeml_template_type_1_0>void vector::emplace_back(__xcodeml_template_type_1_0&& ...__args)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator<(this.__end_,(this.__end_cap()))){{class::std::__1::vector::__RAII_IncreaseAnnotator __annotator=(*this);
(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::__alloc_traits::.construct((this.__alloc()),(std::__1::__to_raw_pointer(this.__end_)),(std::__1::forward<__xcodeml_template_type_1_0...>(__args))...));
(__annotator.__done());
(++this.__end_);
};}else{(this->__emplace_back_slow_path((std::__1::forward<__xcodeml_template_type_1_0...>(__args))...));};
}
void vector::pop_back()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((void)0);
(this.__destruct_at_end(operator-(this.__end_,1)));
}
__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>vector::erase(__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>__position)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((void)0);
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::difference_type __ps=operator-(__position,(this->cbegin()));
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __p=operator+(this.__begin_,__ps);
(this.__destruct_at_end((std::__1::move(operator+(__p,1),this.__end_,__p))));
(this.__invalidate_iterators_past(operator-(__p,1)));
__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>__r=(this->__make_iter(__p));
return __r;
}
__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>vector::erase(__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>__first,__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>__last){((void)0);
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __p=operator+(this.__begin_,operator-(__first,(this->begin())));
if(operator!=(__first,__last)){{(this.__destruct_at_end((std::__1::move(operator+(__p,operator-(__last,__first)),this.__end_,__p))));
(this.__invalidate_iterators_past(operator-(__p,1)));
};};
__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>__r=(this->__make_iter(__p));
return __r;
}
void vector::__move_range(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __from_s,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __from_e,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __to){typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __old_last=this.__end_;
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::difference_type __n=operator-(__old_last,__to);
{typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __i=operator+(__from_s,__n);for(;operator<(__i,__from_e);((++__i),(++this.__end_))){(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::__alloc_traits::.construct((this.__alloc()),(std::__1::__to_raw_pointer(this.__end_)),(std::__1::move((*__i)))));}};
(std::__1::move_backward(__from_s,operator+(__from_s,__n),__old_last));
}
__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>vector::insert(__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>__position,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_reference __x){typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __p=operator+(this.__begin_,operator-(__position,(this->begin())));
if(operator<(this.__end_,(this.__end_cap()))){{class::std::__1::vector::__RAII_IncreaseAnnotator __annotator=(*this);
if(operator==(__p,this.__end_)){{(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::__alloc_traits::.construct((this.__alloc()),(std::__1::__to_raw_pointer(this.__end_)),__x));
(++this.__end_);
};}else{{(this->__move_range(__p,this.__end_,operator+(__p,1)));
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer __xr=(pointer_traits<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>::.pointer_to(__x));
if((operator<=(__p,__xr)&&operator<(__xr,this.__end_))){(++__xr);};
((*__p)=(*__xr));
};};
(__annotator.__done());
};}else{{__xcodeml_template_type_0_1&__a=(this.__alloc());
__split_buffer<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1&>__v=(this->__recommend(operator+((this->size()),1)))operator-(__p,this.__begin_)__a;
(__v.push_back(__x));
(__p=(this->__swap_out_circular_buffer(__v,__p)));
};};
return(this->__make_iter(__p));
}
__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>vector::insert(__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>__position,__xcodeml_template_type_0_0&& __x){typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __p=operator+(this.__begin_,operator-(__position,(this->begin())));
if(operator<(this.__end_,(this.__end_cap()))){{class::std::__1::vector::__RAII_IncreaseAnnotator __annotator=(*this);
if(operator==(__p,this.__end_)){{(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::__alloc_traits::.construct((this.__alloc()),(std::__1::__to_raw_pointer(this.__end_)),(std::__1::move(__x))));
(++this.__end_);
};}else{{(this->__move_range(__p,this.__end_,operator+(__p,1)));
((*__p)=(std::__1::move(__x)));
};};
(__annotator.__done());
};}else{{__xcodeml_template_type_0_1&__a=(this.__alloc());
__split_buffer<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1&>__v=(this->__recommend(operator+((this->size()),1)))operator-(__p,this.__begin_)__a;
(__v.push_back((std::__1::move(__x))));
(__p=(this->__swap_out_circular_buffer(__v,__p)));
};};
return(this->__make_iter(__p));
}
template<typename...__xcodeml_template_type_1_0>__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>vector::emplace(__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>__position,__xcodeml_template_type_1_0&& ...__args){typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __p=operator+(this.__begin_,operator-(__position,(this->begin())));
if(operator<(this.__end_,(this.__end_cap()))){{class::std::__1::vector::__RAII_IncreaseAnnotator __annotator=(*this);
if(operator==(__p,this.__end_)){{(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::__alloc_traits::.construct((this.__alloc()),(std::__1::__to_raw_pointer(this.__end_)),(std::__1::forward<__xcodeml_template_type_1_0...>(__args))...));
(++this.__end_);
};}else{{__temp_value<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>__tmp=(this.__alloc())(std::__1::forward<__xcodeml_template_type_1_0...>(__args))...;
(this->__move_range(__p,this.__end_,operator+(__p,1)));
((*__p)=(std::__1::move((__tmp.get()))));
};};
(__annotator.__done());
};}else{{__xcodeml_template_type_0_1&__a=(this.__alloc());
__split_buffer<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1&>__v=(this->__recommend(operator+((this->size()),1)))operator-(__p,this.__begin_)__a;
(__v.emplace_back((std::__1::forward<__xcodeml_template_type_1_0...>(__args))...));
(__p=(this->__swap_out_circular_buffer(__v,__p)));
};};
return(this->__make_iter(__p));
}
__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer>vector::insert(__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>__position,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __n,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_reference __x){typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __p=operator+(this.__begin_,operator-(__position,(this->begin())));
if(operator>(__n,0)){{if(operator<=(__n,static_cast<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type>(operator-((this.__end_cap()),this.__end_)))){{typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __old_n=__n;
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __old_last=this.__end_;
if(operator>(__n,static_cast<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type>(operator-(this.__end_,__p)))){{typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __cx=operator-(__n,operator-(this.__end_,__p));
(this->__construct_at_end(__cx,__x));
(__n-=__cx);
};};
if(operator>(__n,0)){{class::std::__1::vector::__RAII_IncreaseAnnotator __annotator=(*this)__n;
(this->__move_range(__p,__old_last,operator+(__p,__old_n)));
(__annotator.__done());
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer __xr=(pointer_traits<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>::.pointer_to(__x));
if((operator<=(__p,__xr)&&operator<(__xr,this.__end_))){(__xr+=__old_n);};
(std::__1::fill_n(__p,__n,(*__xr)));
};};
};}else{{__xcodeml_template_type_0_1&__a=(this.__alloc());
__split_buffer<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1&>__v=(this->__recommend(operator+((this->size()),__n)))operator-(__p,this.__begin_)__a;
(__v.__construct_at_end(__n,__x));
(__p=(this->__swap_out_circular_buffer(__v,__p)));
};};
};};
return(this->__make_iter(__p));
}
template<typename __xcodeml_template_type_1_0>typename enable_if<expression,__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer> >::type vector::insert(__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>__position,__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last){typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::difference_type __off=operator-(__position,(this->begin()));
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __p=operator+(this.__begin_,__off);
__xcodeml_template_type_0_1&__a=(this.__alloc());
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __old_last=this.__end_;
{;for(;(operator!=(this.__end_,(this.__end_cap()))&&operator!=(__first,__last));(++__first)){{class::std::__1::vector::__RAII_IncreaseAnnotator __annotator=(*this);
(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::__alloc_traits::.construct(__a,(std::__1::__to_raw_pointer(this.__end_)),(*__first)));
(++this.__end_);
(__annotator.__done());
};}};
__split_buffer<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1&>__v=__a;
if(operator!=(__first,__last)){{try{(__v.__construct_at_end(__first,__last));
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::difference_type __old_size=operator-(__old_last,this.__begin_);
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::difference_type __old_p=operator-(__p,this.__begin_);
(this->reserve((this->__recommend(operator+((this->size()),(__v.size()))))));
(__p=operator+(this.__begin_,__old_p));
(__old_last=operator+(this.__begin_,__old_size));
}catch(...){(this->erase((this->__make_iter(__old_last)),(this->end())));
throw;
}
;
};};
(__p=(std::__1::rotate(__p,__old_last,this.__end_)));
(this->insert((this->__make_iter(__p)),(make_move_iterator((__v.begin()))),(make_move_iterator((__v.end())))));
return operator+((this->begin()),__off);
}
template<typename __xcodeml_template_type_1_0>typename enable_if<expression,__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer> >::type vector::insert(__wrap_iter<typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_pointer>__position,__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last){typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __p=operator+(this.__begin_,operator-(__position,(this->begin())));
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::difference_type __n=(std::__1::distance(__first,__last));
if(operator>(__n,0)){{if(operator<=(__n,operator-((this.__end_cap()),this.__end_))){{typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __old_n=__n;
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __old_last=this.__end_;
__xcodeml_template_type_1_0 __m=__last;
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::difference_type __dx=operator-(this.__end_,__p);
if(operator>(__n,__dx)){{(__m=__first);
typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::difference_type __diff=operator-(this.__end_,__p);
(std::__1::advance(__m,__diff));
(this->__construct_at_end(__m,__last,operator-(__n,__diff)));
(__n=__dx);
};};
if(operator>(__n,0)){{class::std::__1::vector::__RAII_IncreaseAnnotator __annotator=(*this)__n;
(this->__move_range(__p,__old_last,operator+(__p,__old_n)));
(__annotator.__done());
(std::__1::copy(__first,__m,__p));
};};
};}else{{__xcodeml_template_type_0_1&__a=(this.__alloc());
__split_buffer<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1&>__v=(this->__recommend(operator+((this->size()),__n)))operator-(__p,this.__begin_)__a;
(__v.__construct_at_end(__first,__last));
(__p=(this->__swap_out_circular_buffer(__v,__p)));
};};
};};
return(this->__make_iter(__p));
}
void vector::resize(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __sz){typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __cs=(this->size());
if(operator<(__cs,__sz)){(this.__append(operator-(__sz,__cs)));}else{if(operator>(__cs,__sz)){(this.__destruct_at_end(operator+(this.__begin_,__sz)));};};
}
void vector::resize(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __sz,typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::const_reference __x){typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type __cs=(this->size());
if(operator<(__cs,__sz)){(this.__append(operator-(__sz,__cs),__x));}else{if(operator>(__cs,__sz)){(this.__destruct_at_end(operator+(this.__begin_,__sz)));};};
}
void vector::swap(class vector&__x){((void)0);
(std::__1::swap(this.__begin_,__x.__begin_));
(std::__1::swap(this.__end_,__x.__end_));
(std::__1::swap((this.__end_cap()),(__x.__end_cap())));
(__swap_allocator((this.__alloc()),(__x.__alloc()),__xcodeml_identity<integral_constant<bool,expression> >::t()));
}
bool vector::__invariants()const{if(operator==(this.__begin_,nullptr)){{if((operator!=(this.__end_,nullptr)||operator!=((this.__end_cap()),nullptr))){return false;};
};}else{{if(operator>(this.__begin_,this.__end_)){return false;};
if(operator==(this.__begin_,(this.__end_cap()))){return false;};
if(operator>(this.__end_,(this.__end_cap()))){return false;};
};};
return true;
}
void vector::__invalidate_all_iterators()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
void vector::__invalidate_iterators_past(typename __vector_base<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::pointer __new_last)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((void)__new_last);
}
template<typename __xcodeml_template_type_0_0>class vector;
template<typename __xcodeml_template_type_0_0>class hash;
template<typename __xcodeml_template_type_0_0>class __has_storage_type<vector<bool,__xcodeml_template_type_0_0> >{public:static bool const value=true;
}
;
template<typename __xcodeml_template_type_0_0>class vector<bool,__xcodeml_template_type_0_0>:private __vector_base_common<1>{public:
public:typedef class vector<bool,__xcodeml_template_type_0_0>__self;
public:typedef bool value_type;
public:typedef __xcodeml_template_type_0_0 allocator_type;
public:typedef allocator_traits<__xcodeml_template_type_0_0>__alloc_traits;
public:typedef typename allocator_traits<__xcodeml_template_type_0_0>::size_type size_type;
public:typedef typename allocator_traits<__xcodeml_template_type_0_0>::difference_type difference_type;
public:typedef typename allocator_traits<__xcodeml_template_type_0_0>::size_type __storage_type;
public:typedef __bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>pointer;
public:typedef __bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>const_pointer;
public:typedef __bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>iterator;
public:typedef __bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>const_iterator;
public:typedef reverse_iterator<__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression> >reverse_iterator;
public:typedef reverse_iterator<__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression> >const_reverse_iterator;
private:
private:typedef typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type __storage_allocator;
private:typedef allocator_traits<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type>__storage_traits;
private:typedef typename allocator_traits<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type>::pointer __storage_pointer;
private:typedef typename allocator_traits<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type>::const_pointer __const_storage_pointer;
private:typename allocator_traits<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type>::pointer __begin_;
private:typename allocator_traits<__xcodeml_template_type_0_0>::size_type __size_;
private:__compressed_pair<typename allocator_traits<__xcodeml_template_type_0_0>::size_type,typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type>__cap_alloc_;
public:
public:typedef __bit_reference<class vector<bool,__xcodeml_template_type_0_0>,expression>reference;
public:typedef __bit_const_reference<class vector<bool,__xcodeml_template_type_0_0> >const_reference;
private:
private:typename allocator_traits<__xcodeml_template_type_0_0>::size_type&__cap()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__cap_alloc_.first());
}
private:typename allocator_traits<__xcodeml_template_type_0_0>::size_type const&__cap()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__cap_alloc_.first());
}
private:typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type&__alloc()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__cap_alloc_.second());
}
private:typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type const&__alloc()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__cap_alloc_.second());
}
private:static unsigned int const __bits_per_word=static_cast<>(((sizeof(typename allocator_traits<__xcodeml_template_type_0_0>::size_type))*8));
private:static typename allocator_traits<__xcodeml_template_type_0_0>::size_type __internal_cap_to_external(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__n*__bits_per_word);
}
private:static typename allocator_traits<__xcodeml_template_type_0_0>::size_type __external_cap_to_internal(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator+((operator-(__n,1)/__bits_per_word),1);
}
public:
public:vector();
public:vector(__xcodeml_template_type_0_0 const&__a);
public:~vector();
public:vector(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n);
public:vector(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n,bool const&__v);
public:vector(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n,bool const&__v,__xcodeml_template_type_0_0 const&__a);
public:template<typename __xcodeml_template_type_1_0>vector(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last,typename enable_if<expression,void>::type(*))
public:template<typename __xcodeml_template_type_1_0>vector(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last,__xcodeml_template_type_0_0 const&__a,typename enable_if<expression,void>::type(*))
public:template<typename __xcodeml_template_type_1_0>vector(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last,typename enable_if<expression,void>::type(*))
public:template<typename __xcodeml_template_type_1_0>vector(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last,__xcodeml_template_type_0_0 const&__a,typename enable_if<expression,void>::type(*))
public:vector(class vector const&__v);
public:vector(class vector const&__v,__xcodeml_template_type_0_0 const&__a);
public:class vector<bool,__xcodeml_template_type_0_0>&operator=(class vector const&__v);
public:vector(class::std::initializer_list<bool>__il);
public:vector(class::std::initializer_list<bool>__il,__xcodeml_template_type_0_0 const&__a);
public:vector(class vector<bool,__xcodeml_template_type_0_0>&& __v);
public:vector(class vector<bool,__xcodeml_template_type_0_0>&& __v,__xcodeml_template_type_0_0 const&__a);
public:class vector<bool,__xcodeml_template_type_0_0>&operator=(class vector<bool,__xcodeml_template_type_0_0>&& __v);
public:class vector<bool,__xcodeml_template_type_0_0>&operator=(class::std::initializer_list<bool>__il)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->assign((__il.begin()),(__il.end())));
return(*this);
}
public:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,void>::type assign(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last)
public:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,void>::type assign(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last)
public:void assign(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n,bool const&__x);
public:void assign(class::std::initializer_list<bool>__il)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->assign((__il.begin()),(__il.end())));
}
public:__xcodeml_template_type_0_0 get_allocator()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__xcodeml_template_type_0_0>::t((this.__alloc()));
}
public:typename allocator_traits<__xcodeml_template_type_0_0>::size_type max_size()const;
public:typename allocator_traits<__xcodeml_template_type_0_0>::size_type capacity()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__internal_cap_to_external((this->__cap())));
}
public:typename allocator_traits<__xcodeml_template_type_0_0>::size_type size()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return this->__size_;
}
public:bool empty()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator==(this->__size_,0);
}
public:void reserve(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n);
public:void shrink_to_fit();
public:__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>begin()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__make_iter(0));
}
public:__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>begin()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__make_iter(0));
}
public:__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>end()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__make_iter(this->__size_));
}
public:__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>end()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__make_iter(this->__size_));
}
public:reverse_iterator<__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression> >rbegin()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<reverse_iterator<__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression> > >::t((this->end()));
}
public:reverse_iterator<__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression> >rbegin()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<reverse_iterator<__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression> > >::t((this->end()));
}
public:reverse_iterator<__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression> >rend()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<reverse_iterator<__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression> > >::t((this->begin()));
}
public:reverse_iterator<__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression> >rend()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<reverse_iterator<__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression> > >::t((this->begin()));
}
public:__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>cbegin()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__make_iter(0));
}
public:__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>cend()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__make_iter(this->__size_));
}
public:reverse_iterator<__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression> >crbegin()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->rbegin());
}
public:reverse_iterator<__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression> >crend()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->rend());
}
public:__bit_reference<class vector<bool,__xcodeml_template_type_0_0>,expression>operator[](typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__make_ref(__n));
}
public:__bit_const_reference<class vector<bool,__xcodeml_template_type_0_0> >operator[](typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__make_ref(__n));
}
public:__bit_reference<class vector<bool,__xcodeml_template_type_0_0>,expression>at(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n);
public:__bit_const_reference<class vector<bool,__xcodeml_template_type_0_0> >at(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n)const;
public:__bit_reference<class vector<bool,__xcodeml_template_type_0_0>,expression>front()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__make_ref(0));
}
public:__bit_const_reference<class vector<bool,__xcodeml_template_type_0_0> >front()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__make_ref(0));
}
public:__bit_reference<class vector<bool,__xcodeml_template_type_0_0>,expression>back()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__make_ref(operator-(this->__size_,1)));
}
public:__bit_const_reference<class vector<bool,__xcodeml_template_type_0_0> >back()const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->__make_ref(operator-(this->__size_,1)));
}
public:void push_back(bool const&__x);
public:void pop_back()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(--this->__size_);
}
public:__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>insert(__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>__position,bool const&__x);
public:__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>insert(__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>__position,typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n,bool const&__x);
public:__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>insert(__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>__position,typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n,__bit_const_reference<class vector<bool,__xcodeml_template_type_0_0> >__x);
public:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression> >::type insert(__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>__position,__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last)
public:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression> >::type insert(__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>__position,__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last)
public:__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>insert(__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>__position,class::std::initializer_list<bool>__il)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(this->insert(__position,(__il.begin()),(__il.end())));
}
public:__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>erase(__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>__position);
public:__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>erase(__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>__first,__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>__last);
public:void clear()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__size_=0);
}
public:void swap(class vector<bool,__xcodeml_template_type_0_0>&);
public:static void swap(__bit_reference<class vector<bool,__xcodeml_template_type_0_0>,expression>__x,__bit_reference<class vector<bool,__xcodeml_template_type_0_0>,expression>__y){(std::__1::swap(__x,__y));
}
public:void resize(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __sz,bool __x);
public:void flip();
public:bool __invariants()const;
private:
private:void __invalidate_all_iterators();
private:void __vallocate(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n);
private:void __vdeallocate();
private:static typename allocator_traits<__xcodeml_template_type_0_0>::size_type __align_it(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __new_size)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(operator+(__new_size,(__bits_per_word-1))&(~operator-(((typename allocator_traits<__xcodeml_template_type_0_0>::size_type)__bits_per_word),1)));
}
private:typename allocator_traits<__xcodeml_template_type_0_0>::size_type __recommend(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __new_size)const;
private:void __construct_at_end(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n,bool __x);
private:template<typename __xcodeml_template_type_1_0>typename enable_if<expression,void>::type __construct_at_end(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last)
private:void __append(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n,__bit_const_reference<class vector<bool,__xcodeml_template_type_0_0> >__x);
private:__bit_reference<class vector<bool,__xcodeml_template_type_0_0>,expression>__make_ref(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __pos)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__bit_reference<class vector<bool,__xcodeml_template_type_0_0>,expression> >::t(operator+(this->__begin_,(__pos/__bits_per_word)),operator<<(__xcodeml_identity<typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::t(1),(__pos%__bits_per_word)));
}
private:__bit_const_reference<class vector<bool,__xcodeml_template_type_0_0> >__make_ref(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __pos)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__bit_const_reference<class vector<bool,__xcodeml_template_type_0_0> > >::t(operator+(this->__begin_,(__pos/__bits_per_word)),operator<<(__xcodeml_identity<typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::t(1),(__pos%__bits_per_word)));
}
private:__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>__make_iter(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __pos)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression> >::t(operator+(this->__begin_,(__pos/__bits_per_word)),static_cast<unsigned int>((__pos%__bits_per_word)));
}
private:__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>__make_iter(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __pos)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return __xcodeml_identity<__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression> >::t(operator+(this->__begin_,(__pos/__bits_per_word)),static_cast<unsigned int>((__pos%__bits_per_word)));
}
private:__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>__const_iterator_cast(__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>__p)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator+((this->begin()),operator-(__p,(this->cbegin())));
}
private:void __copy_assign_alloc(class vector const&__v)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__copy_assign_alloc(__v,__xcodeml_identity<integral_constant<bool,expression> >::t()));
}
private:void __copy_assign_alloc(class vector const&__c,class::std::__1::integral_constant<bool,1>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{if(operator!=((this->__alloc()),(__c.__alloc()))){(this->__vdeallocate());};
((this->__alloc())=(__c.__alloc()));
}
private:void __copy_assign_alloc(class vector const&,class::std::__1::integral_constant<bool,0>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
private:void __move_assign(class vector<bool,__xcodeml_template_type_0_0>&__c,class::std::__1::integral_constant<bool,0>);
private:void __move_assign(class vector<bool,__xcodeml_template_type_0_0>&__c,class::std::__1::integral_constant<bool,1>);
private:void __move_assign_alloc(class vector<bool,__xcodeml_template_type_0_0>&__c)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__move_assign_alloc(__c,__xcodeml_identity<integral_constant<bool,expression> >::t()));
}
private:void __move_assign_alloc(class vector<bool,__xcodeml_template_type_0_0>&__c,class::std::__1::integral_constant<bool,1>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{((this->__alloc())=(std::__1::move((__c.__alloc()))));
}
private:void __move_assign_alloc(class vector<bool,__xcodeml_template_type_0_0>&,class::std::__1::integral_constant<bool,0>)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
private:unsigned long __hash_code()const;
public:friend __bit_reference<class vector<bool,__xcodeml_template_type_0_0>,expression>;
public:friend __bit_const_reference<class vector<bool,__xcodeml_template_type_0_0> >;
public:friend __bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>;
public:friend __bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>;
public:friend __bit_array<class vector<bool,__xcodeml_template_type_0_0> >;
public:friend hash<class vector<bool,__xcodeml_template_type_0_0> >;
}
;
void vector::__invalidate_all_iterators()/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
void vector::__vallocate(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n){if(operator>(__n,(this->max_size()))){(this.__throw_length_error());};
(__n=(__external_cap_to_internal(__n)));
(this.__begin_=(allocator_traits<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type>::.allocate((this.__alloc()),__n)));
(this.__size_=0);
((this.__cap())=__n);
}
void vector::__vdeallocate(){if(operator!=(this.__begin_,nullptr)){{(allocator_traits<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type>::.deallocate((this.__alloc()),this.__begin_,(this->__cap())));
(this->__invalidate_all_iterators());
(this.__begin_=nullptr);
(this.__size_=((this.__cap())=0));
};};
}
typename allocator_traits<__xcodeml_template_type_0_0>::size_type vector::max_size()const{typename allocator_traits<__xcodeml_template_type_0_0>::size_type __amax=(allocator_traits<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type>::.max_size((this->__alloc())));
typename allocator_traits<__xcodeml_template_type_0_0>::size_type __nmax=((numeric_limits<typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::.max())/2);
if(operator<=((__nmax/__bits_per_word),__amax)){return __nmax;};
return(__internal_cap_to_external(__amax));
}
typename allocator_traits<__xcodeml_template_type_0_0>::size_type vector::__recommend(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __new_size)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typename allocator_traits<__xcodeml_template_type_0_0>::size_type const __ms=(this->max_size());
if(operator>(__new_size,__ms)){(this.__throw_length_error());};
typename allocator_traits<__xcodeml_template_type_0_0>::size_type const __cap=(this->capacity());
if(operator>=(__cap,(__ms/2))){return __ms;};
return(std::__1::max((2*__cap),(__align_it(__new_size))));
}
void vector::__construct_at_end(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n,bool __x)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typename allocator_traits<__xcodeml_template_type_0_0>::size_type __old_size=this.__size_;
(this.__size_+=__n);
if((operator==(__old_size,0)||operator!=((operator-(__old_size,1)/__bits_per_word),(operator-(this.__size_,1)/__bits_per_word)))){{if(operator<=(this.__size_,__bits_per_word)){((this.__begin_)[0]=__xcodeml_identity<typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::t(0));}else{((this.__begin_)[(operator-(this.__size_,1)/__bits_per_word)]=__xcodeml_identity<typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::t(0));};
};};
(std::__1::fill_n((this->__make_iter(__old_size)),__n,__x));
}
template<typename __xcodeml_template_type_1_0>typename enable_if<expression,void>::type vector::__construct_at_end(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last){typename allocator_traits<__xcodeml_template_type_0_0>::size_type __old_size=this.__size_;
(this.__size_+=(std::__1::distance(__first,__last)));
if((operator==(__old_size,0)||operator!=((operator-(__old_size,1)/__bits_per_word),(operator-(this.__size_,1)/__bits_per_word)))){{if(operator<=(this.__size_,__bits_per_word)){((this.__begin_)[0]=__xcodeml_identity<typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::t(0));}else{((this.__begin_)[(operator-(this.__size_,1)/__bits_per_word)]=__xcodeml_identity<typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::t(0));};
};};
(std::__1::copy(__first,__last,(this->__make_iter(__old_size))));
}
vector::vector():__begin_(nullptr),__size_(0),__cap_alloc_(0)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
vector::vector(__xcodeml_template_type_0_0 const&__a):__begin_(nullptr),__size_(0),__cap_alloc_(0 static_cast<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type>(__a))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{}
vector::vector(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n):__begin_(nullptr),__size_(0),__cap_alloc_(0){if(operator>(__n,0)){{(this->__vallocate(__n));
(this->__construct_at_end(__n,false));
};};
}
vector::vector(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n,bool const&__x):__begin_(nullptr),__size_(0),__cap_alloc_(0){if(operator>(__n,0)){{(this->__vallocate(__n));
(this->__construct_at_end(__n,__x));
};};
}
vector::vector(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n,bool const&__x,__xcodeml_template_type_0_0 const&__a):__begin_(nullptr),__size_(0),__cap_alloc_(0 static_cast<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type>(__a)){if(operator>(__n,0)){{(this->__vallocate(__n));
(this->__construct_at_end(__n,__x));
};};
}
template<typename __xcodeml_template_type_1_0>vector::vector(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last,typename enable_if<expression,void>::type(*)):__begin_(nullptr),__size_(0),__cap_alloc_(0){try{{;for(;operator!=(__first,__last);(++__first)){(this->push_back((*__first)));}};
}catch(...){if(operator!=(this->__begin_,nullptr)){(allocator_traits<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type>::.deallocate((this->__alloc()),this->__begin_,(this->__cap())));};
(this->__invalidate_all_iterators());
throw;
}
;
}
template<typename __xcodeml_template_type_1_0>vector::vector(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last,__xcodeml_template_type_0_0 const&__a,typename enable_if<expression,void>::type(*)):__begin_(nullptr),__size_(0),__cap_alloc_(0 static_cast<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type>(__a)){try{{;for(;operator!=(__first,__last);(++__first)){(this->push_back((*__first)));}};
}catch(...){if(operator!=(this->__begin_,nullptr)){(allocator_traits<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type>::.deallocate((this->__alloc()),this->__begin_,(this->__cap())));};
(this->__invalidate_all_iterators());
throw;
}
;
}
template<typename __xcodeml_template_type_1_0>vector::vector(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last,typename enable_if<expression,void>::type(*)):__begin_(nullptr),__size_(0),__cap_alloc_(0){typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n=static_cast<typename allocator_traits<__xcodeml_template_type_0_0>::size_type>((std::__1::distance(__first,__last)));
if(operator>(__n,0)){{(this->__vallocate(__n));
(this->__construct_at_end(__first,__last));
};};
}
template<typename __xcodeml_template_type_1_0>vector::vector(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last,__xcodeml_template_type_0_0 const&__a,typename enable_if<expression,void>::type(*)):__begin_(nullptr),__size_(0),__cap_alloc_(0 static_cast<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type>(__a)){typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n=static_cast<typename allocator_traits<__xcodeml_template_type_0_0>::size_type>((std::__1::distance(__first,__last)));
if(operator>(__n,0)){{(this->__vallocate(__n));
(this->__construct_at_end(__first,__last));
};};
}
vector::vector(class::std::initializer_list<bool>__il):__begin_(nullptr),__size_(0),__cap_alloc_(0){typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n=static_cast<typename allocator_traits<__xcodeml_template_type_0_0>::size_type>((__il.size()));
if(operator>(__n,0)){{(this->__vallocate(__n));
(this->__construct_at_end((__il.begin()),(__il.end())));
};};
}
vector::vector(class::std::initializer_list<bool>__il,__xcodeml_template_type_0_0 const&__a):__begin_(nullptr),__size_(0),__cap_alloc_(0 static_cast<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type>(__a)){typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n=static_cast<typename allocator_traits<__xcodeml_template_type_0_0>::size_type>((__il.size()));
if(operator>(__n,0)){{(this->__vallocate(__n));
(this->__construct_at_end((__il.begin()),(__il.end())));
};};
}
vector::~vector(){if(operator!=(this->__begin_,nullptr)){(allocator_traits<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type>::.deallocate((this->__alloc()),this->__begin_,(this->__cap())));};
(this->__invalidate_all_iterators());
}
vector::vector(class vector const&__v):__begin_(nullptr),__size_(0),__cap_alloc_(0(allocator_traits<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type>::.select_on_container_copy_construction((__v.__alloc())))){if(operator>((__v.size()),0)){{(this->__vallocate((__v.size())));
(this->__construct_at_end((__v.begin()),(__v.end())));
};};
}
vector::vector(class vector const&__v,__xcodeml_template_type_0_0 const&__a):__begin_(nullptr),__size_(0),__cap_alloc_(0 __a){if(operator>((__v.size()),0)){{(this->__vallocate((__v.size())));
(this->__construct_at_end((__v.begin()),(__v.end())));
};};
}
class vector<bool,__xcodeml_template_type_0_0>&vector::operator=(class vector const&__v){if(operator!=(this,(&__v))){{(this->__copy_assign_alloc(__v));
if(__v.__size_){{if(operator>(__v.__size_,(this->capacity()))){{(this->__vdeallocate());
(this->__vallocate(__v.__size_));
};};
(std::__1::copy(__v.__begin_,operator+(__v.__begin_,(__external_cap_to_internal(__v.__size_))),this->__begin_));
};};
(this->__size_=__v.__size_);
};};
return(*this);
}
vector::vector(class vector<bool,__xcodeml_template_type_0_0>&& __v):__begin_(__v.__begin_),__size_(__v.__size_),__cap_alloc_((std::move(__v.__cap_alloc_)))/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__v.__begin_=nullptr);
(__v.__size_=0);
((__v.__cap())=0);
}
vector::vector(class vector<bool,__xcodeml_template_type_0_0>&& __v,__xcodeml_template_type_0_0 const&__a):__begin_(nullptr),__size_(0),__cap_alloc_(0 __a){if(operator==(__a,__xcodeml_identity<__xcodeml_template_type_0_0>::t((__v.__alloc())))){{(this.__begin_=__v.__begin_);
(this.__size_=__v.__size_);
((this.__cap())=(__v.__cap()));
(__v.__begin_=nullptr);
((__v.__cap())=(__v.__size_=0));
};}else{if(operator>((__v.size()),0)){{(this->__vallocate((__v.size())));
(this->__construct_at_end((__v.begin()),(__v.end())));
};};};
}
class vector<bool,__xcodeml_template_type_0_0>&vector::operator=(class vector<bool,__xcodeml_template_type_0_0>&& __v)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(this->__move_assign(__v,__xcodeml_identity<integral_constant<bool,expression> >::t()));
return(*this);
}
void vector::__move_assign(class vector<bool,__xcodeml_template_type_0_0>&__c,class::std::__1::integral_constant<bool,0>){if(operator!=((this->__alloc()),(__c.__alloc()))){(this->assign((__c.begin()),(__c.end())));}else{(this->__move_assign(__c,__xcodeml_identity<class::std::__1::integral_constant<bool,1> >::t()));};
}
void vector::__move_assign(class vector<bool,__xcodeml_template_type_0_0>&__c,class::std::__1::integral_constant<bool,1>){(this->__vdeallocate());
(this->__move_assign_alloc(__c));
(this.__begin_=__c.__begin_);
(this.__size_=__c.__size_);
((this.__cap())=(__c.__cap()));
(__c.__begin_=nullptr);
((__c.__cap())=(__c.__size_=0));
}
void vector::assign(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n,bool const&__x){(this->__size_=0);
if(operator>(__n,0)){{typename allocator_traits<__xcodeml_template_type_0_0>::size_type __c=(this->capacity());
if(operator<=(__n,__c)){(this->__size_=__n);}else{{class vector<bool,__xcodeml_template_type_0_0>__v=(this->__alloc());
(__v.reserve((this->__recommend(__n))));
(__v.__size_=__n);
(this->swap(__v));
};};
(std::__1::fill_n((this->begin()),__n,__x));
};};
(this->__invalidate_all_iterators());
}
template<typename __xcodeml_template_type_1_0>typename enable_if<expression,void>::type vector::assign(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last){(this->clear());
{;for(;operator!=(__first,__last);(++__first)){(this->push_back((*__first)));}};
}
template<typename __xcodeml_template_type_1_0>typename enable_if<expression,void>::type vector::assign(__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last){(this->clear());
typename allocator_traits<__xcodeml_template_type_0_0>::difference_type __ns=(std::__1::distance(__first,__last));
((void)0);
unsigned long const __n=static_cast<typename allocator_traits<__xcodeml_template_type_0_0>::size_type>(__ns);
if(__n){{if(operator>(__n,(this->capacity()))){{(this->__vdeallocate());
(this->__vallocate(__n));
};};
(this->__construct_at_end(__first,__last));
};};
}
void vector::reserve(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n){if(operator>(__n,(this->capacity()))){{class vector<bool,__xcodeml_template_type_0_0>__v=(this.__alloc());
(__v.__vallocate(__n));
(__v.__construct_at_end((this.begin()),(this.end())));
(this->swap(__v));
(this->__invalidate_all_iterators());
};};
}
void vector::shrink_to_fit(){if(operator>((__external_cap_to_internal((this->size()))),(this->__cap()))){{try{(__xcodeml_identity<class vector<bool,__xcodeml_template_type_0_0> >::t((*this),__xcodeml_identity<__xcodeml_template_type_0_0>::t((this->__alloc()))).swap((*this)));
}catch(...){}
;
};};
}
__bit_reference<class vector<bool,__xcodeml_template_type_0_0>,expression>vector::at(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n){if(operator>=(__n,(this->size()))){(this.__throw_out_of_range());};
return((*this))[__n];
}
__bit_const_reference<class vector<bool,__xcodeml_template_type_0_0> >vector::at(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n)const{if(operator>=(__n,(this->size()))){(this.__throw_out_of_range());};
return((*this))[__n];
}
void vector::push_back(bool const&__x){if(operator==(this.__size_,(this.capacity()))){(this->reserve((this->__recommend(operator+(this.__size_,1)))));};
(++this.__size_);
((this->back())=__x);
}
__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>vector::insert(__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>__position,bool const&__x){__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>__r;
if(operator<((this->size()),(this->capacity()))){{__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>__old_end=(this->end());
(++this->__size_);
(std::__1::copy_backward(__position,__old_end,(this->end())));
(__r=(this->__const_iterator_cast(__position)));
};}else{{class vector<bool,__xcodeml_template_type_0_0>__v=(this->__alloc());
(__v.reserve((this->__recommend(operator+(this->__size_,1)))));
(__v.__size_=operator+(this->__size_,1));
(__r=(std::__1::copy((this->cbegin()),__position,(__v.begin()))));
(std::__1::copy_backward(__position,(this->cend()),(__v.end())));
(this->swap(__v));
};};
((*__r)=__x);
return __r;
}
__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>vector::insert(__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>__position,typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n,bool const&__x){__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>__r;
typename allocator_traits<__xcodeml_template_type_0_0>::size_type __c=(this->capacity());
if((operator<=(__n,__c)&&operator<=((this->size()),operator-(__c,__n)))){{__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>__old_end=(this->end());
(this->__size_+=__n);
(std::__1::copy_backward(__position,__old_end,(this->end())));
(__r=(this->__const_iterator_cast(__position)));
};}else{{class vector<bool,__xcodeml_template_type_0_0>__v=(this->__alloc());
(__v.reserve((this->__recommend(operator+(this->__size_,__n)))));
(__v.__size_=operator+(this->__size_,__n));
(__r=(std::__1::copy((this->cbegin()),__position,(__v.begin()))));
(std::__1::copy_backward(__position,(this->cend()),(__v.end())));
(this->swap(__v));
};};
(std::__1::fill_n(__r,__n,__x));
return __r;
}
template<typename __xcodeml_template_type_1_0>typename enable_if<expression,__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression> >::type vector::insert(__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>__position,__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last){typename allocator_traits<__xcodeml_template_type_0_0>::difference_type __off=operator-(__position,(this->begin()));
__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>__p=(this->__const_iterator_cast(__position));
__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>__old_end=(this->end());
{;for(;(operator!=((this->size()),(this->capacity()))&&operator!=(__first,__last));(++__first)){{(++this.__size_);
((this->back())=(*__first));
};}};
class vector<bool,__xcodeml_template_type_0_0>__v=(this->__alloc());
if(operator!=(__first,__last)){{try{(__v.assign(__first,__last));
typename allocator_traits<__xcodeml_template_type_0_0>::difference_type __old_size=static_cast<typename allocator_traits<__xcodeml_template_type_0_0>::difference_type>(operator-(__old_end,(this->begin())));
typename allocator_traits<__xcodeml_template_type_0_0>::difference_type __old_p=operator-(__p,(this->begin()));
(this->reserve((this->__recommend(operator+((this->size()),(__v.size()))))));
(__p=operator+((this->begin()),__old_p));
(__old_end=operator+((this->begin()),__old_size));
}catch(...){(this->erase(__old_end,(this->end())));
throw;
}
;
};};
(__p=(std::__1::rotate(__p,__old_end,(this->end()))));
(this->insert(__p,(__v.begin()),(__v.end())));
return operator+((this->begin()),__off);
}
template<typename __xcodeml_template_type_1_0>typename enable_if<expression,__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression> >::type vector::insert(__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>__position,__xcodeml_template_type_1_0 __first,__xcodeml_template_type_1_0 __last){typename allocator_traits<__xcodeml_template_type_0_0>::difference_type const __n_signed=(std::__1::distance(__first,__last));
((void)0);
typename allocator_traits<__xcodeml_template_type_0_0>::size_type const __n=static_cast<typename allocator_traits<__xcodeml_template_type_0_0>::size_type>(__n_signed);
__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>__r;
typename allocator_traits<__xcodeml_template_type_0_0>::size_type __c=(this->capacity());
if((operator<=(__n,__c)&&operator<=((this->size()),operator-(__c,__n)))){{__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>__old_end=(this->end());
(this->__size_+=__n);
(std::__1::copy_backward(__position,__old_end,(this->end())));
(__r=(this->__const_iterator_cast(__position)));
};}else{{class vector<bool,__xcodeml_template_type_0_0>__v=(this->__alloc());
(__v.reserve((this->__recommend(operator+(this->__size_,__n)))));
(__v.__size_=operator+(this->__size_,__n));
(__r=(std::__1::copy((this->cbegin()),__position,(__v.begin()))));
(std::__1::copy_backward(__position,(this->cend()),(__v.end())));
(this->swap(__v));
};};
(std::__1::copy(__first,__last,__r));
return __r;
}
__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>vector::erase(__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>__position)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>__r=(this->__const_iterator_cast(__position));
(std::__1::copy(operator+(__position,1),(this.cend()),__r));
(--this->__size_);
return __r;
}
__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>vector::erase(__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>__first,__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,1,expression>__last){__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>__r=(this->__const_iterator_cast(__first));
typename allocator_traits<__xcodeml_template_type_0_0>::difference_type __d=operator-(__last,__first);
(std::__1::copy(__last,(this.cend()),__r));
(this->__size_-=__d);
return __r;
}
void vector::swap(class vector<bool,__xcodeml_template_type_0_0>&__x){(std::__1::swap(this.__begin_,__x.__begin_));
(std::__1::swap(this.__size_,__x.__size_));
(std::__1::swap((this.__cap()),(__x.__cap())));
(__swap_allocator((this.__alloc()),(__x.__alloc()),__xcodeml_identity<integral_constant<bool,expression> >::t()));
}
void vector::resize(typename allocator_traits<__xcodeml_template_type_0_0>::size_type __sz,bool __x){typename allocator_traits<__xcodeml_template_type_0_0>::size_type __cs=(this->size());
if(operator<(__cs,__sz)){{__bit_iterator<class vector<bool,__xcodeml_template_type_0_0>,0,expression>__r;
typename allocator_traits<__xcodeml_template_type_0_0>::size_type __c=(this->capacity());
typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n=operator-(__sz,__cs);
if((operator<=(__n,__c)&&operator<=(__cs,operator-(__c,__n)))){{(__r=(this->end()));
(this->__size_+=__n);
};}else{{class vector<bool,__xcodeml_template_type_0_0>__v=(this->__alloc());
(__v.reserve((this->__recommend(operator+(this->__size_,__n)))));
(__v.__size_=operator+(this->__size_,__n));
(__r=(std::__1::copy((this->cbegin()),(this->cend()),(__v.begin()))));
(this->swap(__v));
};};
(std::__1::fill_n(__r,__n,__x));
};}else{(this->__size_=__sz);};
}
void vector::flip(){typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n=this->__size_;
typename allocator_traits<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type>::pointer __p=this->__begin_;
{;for(;operator>=(__n,__bits_per_word);((++__p),(__n-=__bits_per_word))){((*__p)=(~(*__p)));}};
if(operator>(__n,0)){{typename allocator_traits<__xcodeml_template_type_0_0>::size_type __m=((~__xcodeml_identity<typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::t(0))>>operator-(__bits_per_word,__n));
typename allocator_traits<__xcodeml_template_type_0_0>::size_type __b=((*__p)&__m);
((*__p)&=(~__m));
((*__p)|=((~__b)&__m));
};};
}
bool vector::__invariants()const{if(operator==(this.__begin_,nullptr)){{if((operator!=(this.__size_,0)||operator!=((this.__cap()),0))){return false;};
};}else{{if(operator==((this.__cap()),0)){return false;};
if(operator>(this.__size_,(this.capacity()))){return false;};
};};
return true;
}
unsigned long vector::__hash_code()const{unsigned long __h=0;
typename allocator_traits<__xcodeml_template_type_0_0>::size_type __n=this->__size_;
typename allocator_traits<typename __rebind_alloc_helper<allocator_traits<__xcodeml_template_type_0_0>,typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::type>::pointer __p=this->__begin_;
{;for(;operator>=(__n,__bits_per_word);((++__p),(__n-=__bits_per_word))){(__h^=(*__p));}};
if(operator>(__n,0)){{typename allocator_traits<__xcodeml_template_type_0_0>::size_type const __m=((~__xcodeml_identity<typename allocator_traits<__xcodeml_template_type_0_0>::size_type>::t(0))>>operator-(__bits_per_word,__n));
(__h^=((*__p)&__m));
};};
return __h;
}
template<typename __xcodeml_template_type_0_0>class hash<vector<bool,__xcodeml_template_type_0_0> >:public unary_function<vector<bool,__xcodeml_template_type_0_0>,unsigned long>{public:unsigned long operator()(vector<bool,__xcodeml_template_type_0_0>const&__vec)const/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(__vec.__hash_code());
}
}
;
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator==(vector<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,vector<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{typename vector<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>::size_type const __sz=(__x.size());
return(operator==(__sz,(__y.size()))&&(std::__1::equal((__x.begin()),(__x.end()),(__y.begin()))));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator!=(vector<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,vector<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator==(__x,__y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator<(vector<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,vector<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(std::__1::lexicographical_compare((__x.begin()),(__x.end()),(__y.begin()),(__y.end())));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator>(vector<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,vector<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return operator<(__y,__x);
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator>=(vector<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,vector<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(__x,__y));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>bool operator<=(vector<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__x,vector<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>const&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{return(!operator<(__y,__x));
}
template<typename __xcodeml_template_type_0_0,typename __xcodeml_template_type_0_1>void swap(vector<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&__x,vector<__xcodeml_template_type_0_0,__xcodeml_template_type_0_1>&__y)/*gccattr visibility:*//*gccattr exclude_from_explicit_instantiation:*/{(__x.swap(__y));
}
}
}
typedef long fpos_t;
typedef long off_t;
typedef long off64_t;
class __sbuf{public:unsigned char(*_base);
public:int _size;
}
;
class __sFILE{public:unsigned char(*_p);
public:int _r;
public:int _w;
public:short _flags;
public:short _file;
public:class::__sbuf _bf;
public:int _lbfsize;
public:void(*_cookie);
public:int(*_close)(void(*));
public:int(*_read)(void(*),char(*),int);
public:long(*_seek)(void(*),long,int);
public:int(*_write)(void(*),char const(*),int);
public:class::__sbuf _ub;
public:unsigned char(*_up);
public:int _ur;
public:unsigned char _ubuf[3];
public:unsigned char _nbuf[1];
public:class::__sbuf _lb;
public:int _blksize;
public:long _offset;

/* Ignored a member with no access specifier class pthread_mutex;*/

public:class::pthread_mutex(*_fl_mutex);

/* Ignored a member with no access specifier class pthread;*/

public:class::pthread(*_fl_owner);
public:int _fl_count;
public:int _orientation;
public:union::__xcodeml_2 _mbstate;
public:int _flags2;
}
;
extern"C"{void clearerr(class::__sFILE(*));};
extern"C"{int fclose(class::__sFILE(*));};
extern"C"{int feof(class::__sFILE(*));};
extern"C"{int ferror(class::__sFILE(*));};
extern"C"{int fflush(class::__sFILE(*));};
extern"C"{int fgetc(class::__sFILE(*));};
extern"C"{int fgetpos(class::__sFILE(*),long(*));};
extern"C"{char(*fgets(char(*),int,class::__sFILE(*)));};
extern"C"{class::__sFILE(*fopen(char const(*),char const(*)));};
extern"C"{int fprintf(class::__sFILE(*),char const(*),...)/*gccattr format:*/;};
extern"C"{int fputc(int,class::__sFILE(*));};
extern"C"{int fputs(char const(*),class::__sFILE(*));};
extern"C"{unsigned long fread(void(*),unsigned long,unsigned long,class::__sFILE(*));};
extern"C"{class::__sFILE(*freopen(char const(*),char const(*),class::__sFILE(*)));};
extern"C"{int fscanf(class::__sFILE(*),char const(*),...)/*gccattr format:*/;};
extern"C"{int fseek(class::__sFILE(*),long,int);};
extern"C"{int fsetpos(class::__sFILE(*),long const(*));};
extern"C"{long ftell(class::__sFILE(*));};
extern"C"{unsigned long fwrite(void const(*),unsigned long,unsigned long,class::__sFILE(*));};
extern"C"{int getc(class::__sFILE(*));};
extern"C"{int getchar();};
extern"C"{char(*gets_s(char(*),unsigned long));};
extern"C"{void perror(char const(*));};
extern"C"{int printf(char const(*),...)/*gccattr format:*/;};
extern"C"{int putc(int,class::__sFILE(*));};
extern"C"{int putchar(int);};
extern"C"{int puts(char const(*));};
extern"C"{int remove(char const(*));};
extern"C"{int rename(char const(*),char const(*));};
extern"C"{void rewind(class::__sFILE(*));};
extern"C"{int scanf(char const(*),...)/*gccattr format:*/;};
extern"C"{void setbuf(class::__sFILE(*),char(*));};
extern"C"{int setvbuf(class::__sFILE(*),char(*),int,unsigned long);};
extern"C"{int sprintf(char(*),char const(*),...)/*gccattr format:*/;};
extern"C"{int sscanf(char const(*),char const(*),...)/*gccattr format:*/;};
extern"C"{class::__sFILE(*tmpfile());};
extern"C"{char(*tmpnam(char(*)));};
extern"C"{int ungetc(int,class::__sFILE(*));};
extern"C"{int vfprintf(class::__sFILE(*),char const(*),class::__va_list_tag(*))/*gccattr format:*/;};
extern"C"{int vprintf(char const(*),class::__va_list_tag(*))/*gccattr format:*/;};
extern"C"{int vsprintf(char(*),char const(*),class::__va_list_tag(*))/*gccattr format:*/;};
extern"C"{int snprintf(char(*),unsigned long,char const(*),...)/*gccattr format:*/;};
extern"C"{int vsnprintf(char(*),unsigned long,char const(*),class::__va_list_tag(*))/*gccattr format:*/;};
extern"C"{int vfscanf(class::__sFILE(*),char const(*),class::__va_list_tag(*))/*gccattr format:*/;};
extern"C"{int vscanf(char const(*),class::__va_list_tag(*))/*gccattr format:*/;};
extern"C"{int vsscanf(char const(*),char const(*),class::__va_list_tag(*))/*gccattr format:*/;};
extern"C"{char(*ctermid(char(*)));};
extern"C"{class::__sFILE(*fdopen(int,char const(*)));};
extern"C"{int fileno(class::__sFILE(*));};
extern"C"{int pclose(class::__sFILE(*));};
extern"C"{class::__sFILE(*popen(char const(*),char const(*)));};
extern"C"{int ftrylockfile(class::__sFILE(*));};
extern"C"{void flockfile(class::__sFILE(*));};
extern"C"{void funlockfile(class::__sFILE(*));};
extern"C"{int getc_unlocked(class::__sFILE(*));};
extern"C"{int getchar_unlocked();};
extern"C"{int putc_unlocked(int,class::__sFILE(*));};
extern"C"{int putchar_unlocked(int);};
extern"C"{void clearerr_unlocked(class::__sFILE(*));};
extern"C"{int feof_unlocked(class::__sFILE(*));};
extern"C"{int ferror_unlocked(class::__sFILE(*));};
extern"C"{int fileno_unlocked(class::__sFILE(*));};
extern"C"{int fseeko(class::__sFILE(*),long,int);};
extern"C"{long ftello(class::__sFILE(*));};
extern"C"{int getw(class::__sFILE(*));};
extern"C"{int putw(int,class::__sFILE(*));};
extern"C"{char(*tempnam(char const(*),char const(*)));};
extern"C"{class::__sFILE(*fmemopen(void(*),unsigned long,char const(*)));};
extern"C"{long getdelim(char(*(*)),unsigned long(*),int,class::__sFILE(*));};
extern"C"{class::__sFILE(*open_memstream(char(*(*)),unsigned long(*)));};
extern"C"{int renameat(int,char const(*),int,char const(*));};
extern"C"{int vdprintf(int,char const(*),class::__va_list_tag(*))/*gccattr format:*/;};
extern"C"{long getline(char(*(*)),unsigned long(*),class::__sFILE(*));};
extern"C"{int dprintf(int,char const(*),...)/*gccattr format:*/;};
extern"C"{int asprintf(char(*(*)),char const(*),...)/*gccattr format:*/;};
extern"C"{char(*ctermid_r(char(*)));};
extern"C"{void fcloseall();};
extern"C"{int fdclose(class::__sFILE(*),int(*));};
extern"C"{char(*fgetln(class::__sFILE(*),unsigned long(*)));};
extern"C"{char const(*fmtcheck(char const(*),char const(*)))/*gccattr format_arg:*/;};
extern"C"{int fpurge(class::__sFILE(*));};
extern"C"{void setbuffer(class::__sFILE(*),char(*),int);};
extern"C"{int setlinebuf(class::__sFILE(*));};
extern"C"{int vasprintf(char(*(*)),char const(*),class::__va_list_tag(*))/*gccattr format:*/;};
extern int const sys_nerr;
extern char const(*const sys_errlist);
extern"C"{class::__sFILE(*funopen(void const(*),int(*)(void(*),char(*),int),int(*)(void(*),char const(*),int),long(*)(void(*),long,int),int(*)(void(*))));};
typedef long cookie_read_function_t(void(*),char(*),unsigned long);
typedef long cookie_write_function_t(void(*),char const(*),unsigned long);
typedef int cookie_seek_function_t(void(*),long(*),int);
typedef int cookie_close_function_t(void(*));
class __xcodeml_20{public:long(*read)(void(*),char(*),unsigned long);
public:long(*write)(void(*),char const(*),unsigned long);
public:int(*seek)(void(*),long(*),int);
public:int(*close)(void(*));
}
;
typedef class __xcodeml_20 cookie_io_functions_t;
extern"C"{class::__sFILE(*fopencookie(void(*),char const(*),class __xcodeml_20));};
extern"C"{int ftruncate(int,long);};
extern"C"{long lseek(int,long,int);};
extern"C"{void(*mmap(void(*),unsigned long,int,int,int,long));};
extern"C"{int truncate(char const(*),long);};
extern"C"{int __srget(class::__sFILE(*));};
extern"C"{int __swbuf(int,class::__sFILE(*));};
int __sputc(int _c,class::__sFILE(*_p)){if((((--_p->_w)>=0)||((_p->_w>=_p->_lbfsize)&&(((char)_c)!='\n')))){return((*(_p->_p++))=_c);}else{return(__swbuf(_c,_p));};
}
extern int __isthreaded;

int main(){class::std::__1::vector<int,class::std::__1::allocator<int> >a;
(a.push_back(1));
(printf("%d\n",a.operator[](0)));
return 0;
}

